[{"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\index.js":"1","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\App.js":"2","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Layout.js":"3","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Menu.js":"4","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Routes.js":"5","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\NotFound.js":"6","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\Dashboard.js":"7","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\date-time.js":"8","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\api.js":"9","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\ErrorAlert.js":"10","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\format-reservation-date.js":"11","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Reservations.js":"12","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Seat.js":"13","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\AddTable.js":"14","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\NewReservation.js":"15","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\EditReservation.js":"16","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Search.js":"17","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\SearchResults.js":"18","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\SeatButton.js":"19","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\FinishButton.js":"20","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\CancelButton.js":"21","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\PastDateError.js":"22","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\TuesdayError.js":"23","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\OccupiedError.js":"24","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\CapacityError.js":"25","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\TimeError.js":"26","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\ResForm.js":"27","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\ErrorCaught.js":"28","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\index.js":"29","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\App.js":"30","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Layout.js":"31","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Menu.js":"32","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Routes.js":"33","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\NotFound.js":"34","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EditParticipant.js":"35","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\NewParticipant.js":"36","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\date-time.js":"37","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\api.js":"38","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ResForm.js":"39","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\ErrorAlert.js":"40","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\format-reservation-date.js":"41","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\AddStatus.js":"42","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\dashboard\\ParticipantsDashboard.js":"43","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\RecCheck.js":"44","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\dashboard\\RecDashboard.js":"45","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ViewParticipant.js":"46","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\ErrorCaught.js":"47","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenu.js":"48","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\Search.js":"49","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\SearchResults.js":"50","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantNew.js":"51","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollOld.js":"52","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollFormOld.js":"53","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantNewForm.js":"54","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollSearch.js":"55","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\NewInstance.js":"56","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EditInstance.js":"57","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollHome.js":"58","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollNew.js":"59","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\dashboard\\RecPrevInstances.js":"60","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\DischargeParticipant.js":"61","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\DischargeForm.js":"62"},{"size":299,"mtime":1632929090351,"results":"63","hashOfConfig":"64"},{"size":352,"mtime":1632929090348,"results":"65","hashOfConfig":"64"},{"size":579,"mtime":1632929090353,"results":"66","hashOfConfig":"64"},{"size":1879,"mtime":1632929090354,"results":"67","hashOfConfig":"64"},{"size":1878,"mtime":1637426666050,"results":"68","hashOfConfig":"64"},{"size":345,"mtime":1632929090355,"results":"69","hashOfConfig":"64"},{"size":9807,"mtime":1639824012377,"results":"70","hashOfConfig":"64"},{"size":2468,"mtime":1632929090358,"results":"71","hashOfConfig":"64"},{"size":5480,"mtime":1639775206136,"results":"72","hashOfConfig":"64"},{"size":505,"mtime":1632929090352,"results":"73","hashOfConfig":"64"},{"size":647,"mtime":1632929090358,"results":"74","hashOfConfig":"64"},{"size":3380,"mtime":1634328747899,"results":"75","hashOfConfig":"64"},{"size":5825,"mtime":1639822987223,"results":"76","hashOfConfig":"64"},{"size":3207,"mtime":1639825565342,"results":"77","hashOfConfig":"64"},{"size":6037,"mtime":1639826532773,"results":"78","hashOfConfig":"64"},{"size":4762,"mtime":1639825602327,"results":"79","hashOfConfig":"64"},{"size":2486,"mtime":1639422719827,"results":"80","hashOfConfig":"64"},{"size":1457,"mtime":1639775206133,"results":"81","hashOfConfig":"64"},{"size":648,"mtime":1639411982223,"results":"82","hashOfConfig":"64"},{"size":1031,"mtime":1639423154745,"results":"83","hashOfConfig":"64"},{"size":1033,"mtime":1639423167018,"results":"84","hashOfConfig":"64"},{"size":501,"mtime":1639423065348,"results":"85","hashOfConfig":"64"},{"size":491,"mtime":1639423021387,"results":"86","hashOfConfig":"64"},{"size":472,"mtime":1639423073156,"results":"87","hashOfConfig":"64"},{"size":443,"mtime":1639423115815,"results":"88","hashOfConfig":"64"},{"size":511,"mtime":1639423028074,"results":"89","hashOfConfig":"64"},{"size":2887,"mtime":1639775206131,"results":"90","hashOfConfig":"64"},{"size":393,"mtime":1639823323987,"results":"91","hashOfConfig":"64"},{"size":299,"mtime":1632929090351,"results":"92","hashOfConfig":"93"},{"size":352,"mtime":1632929090348,"results":"94","hashOfConfig":"93"},{"size":579,"mtime":1632929090353,"results":"95","hashOfConfig":"93"},{"size":1948,"mtime":1645897093013,"results":"96","hashOfConfig":"93"},{"size":3177,"mtime":1664217513430,"results":"97","hashOfConfig":"93"},{"size":345,"mtime":1632929090355,"results":"98","hashOfConfig":"93"},{"size":3320,"mtime":1647736892197,"results":"99","hashOfConfig":"93"},{"size":3446,"mtime":1643656784584,"results":"100","hashOfConfig":"93"},{"size":2468,"mtime":1632929090358,"results":"101","hashOfConfig":"93"},{"size":4839,"mtime":1656009316211,"results":"102","hashOfConfig":"93"},{"size":1730,"mtime":1642537334373,"results":"103","hashOfConfig":"93"},{"size":505,"mtime":1632929090352,"results":"104","hashOfConfig":"93"},{"size":647,"mtime":1632929090358,"results":"105","hashOfConfig":"93"},{"size":7866,"mtime":1664226593926,"results":"106","hashOfConfig":"93"},{"size":3693,"mtime":1657117512297,"results":"107","hashOfConfig":"93"},{"size":9113,"mtime":1647738882412,"results":"108","hashOfConfig":"93"},{"size":5361,"mtime":1656010133821,"results":"109","hashOfConfig":"93"},{"size":4091,"mtime":1647738355317,"results":"110","hashOfConfig":"93"},{"size":393,"mtime":1643496164453,"results":"111","hashOfConfig":"93"},{"size":1269,"mtime":1664205190811,"results":"112","hashOfConfig":"93"},{"size":2506,"mtime":1645898581674,"results":"113","hashOfConfig":"93"},{"size":1648,"mtime":1647738504046,"results":"114","hashOfConfig":"93"},{"size":3123,"mtime":1655838931888,"results":"115","hashOfConfig":"93"},{"size":7547,"mtime":1652384772004,"results":"116","hashOfConfig":"93"},{"size":10257,"mtime":1652384574078,"results":"117","hashOfConfig":"93"},{"size":2570,"mtime":1652807282730,"results":"118","hashOfConfig":"93"},{"size":1765,"mtime":1655749475248,"results":"119","hashOfConfig":"93"},{"size":8169,"mtime":1652824428713,"results":"120","hashOfConfig":"93"},{"size":8847,"mtime":1652820937645,"results":"121","hashOfConfig":"93"},{"size":2894,"mtime":1655747191081,"results":"122","hashOfConfig":"93"},{"size":8224,"mtime":1655835740816,"results":"123","hashOfConfig":"93"},{"size":4264,"mtime":1656095996543,"results":"124","hashOfConfig":"93"},{"size":5918,"mtime":1656610502991,"results":"125","hashOfConfig":"93"},{"size":6310,"mtime":1656610765522,"results":"126","hashOfConfig":"93"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},"bj93m2",{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"129"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"129"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"129"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"129"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"129"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"129"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"129"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"129"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},"1hl4ygm",{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"195"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"195"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"195"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"195"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"195"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"195"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"195"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"242","messages":"243","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"195"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"195"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"195"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"195"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"195"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"195"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"195"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"268"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"195"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"195"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"195"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"195"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"195"},"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\index.js",[],["284","285"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\App.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Layout.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Menu.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Routes.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\NotFound.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\Dashboard.js",["286","287","288","289","290","291","292"],"//The main functions of the Dashboard component are to display all of the reservations\r\n//and allow the user to seat, edit, or cancel reservations and to display all of the\r\n//tables and allow the user to finish the tables\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport {\r\n  listReservations,\r\n  updateReservationStatus,\r\n  updateTableStatus,\r\n} from \"../utils/api\";\r\nimport { listTables } from \"../utils/api\";\r\nimport SeatButton from \"./SeatButton\";\r\nimport FinishButton from \"./FinishButton\";\r\nimport CancelButton from \"./CancelButton\";\r\nimport ErrorCaught from \"../reservations/ErrorCaught\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Dashboard({ date }) {\r\n  //The main state variables are reservations and tables which are arrays to be displayed\r\n  const [reservations, setReservations] = useState([]);\r\n  const [reservationsError, setReservationsError] = useState(null);\r\n  const [tables, setTables] = useState([]);\r\n  const [tablesError, setTablesError] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  //Declare an instance of the useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Create the functionality for the prev, today, and next buttons to toggle dates\r\n  //Function to add a day to a date\r\n  Date.prototype.addDays = function (days) {\r\n    var date = new Date(this.valueOf());\r\n    date.setDate(date.getDate() + days);\r\n    return date;\r\n  };\r\n\r\n  //Extract the year, month, and day from the date passed in and use it to\r\n  //create a date that can be incremented and decremented\r\n  let month = Number(date.substring(5, 7)) - 1;\r\n  let day = Number(date.substring(8, 10));\r\n  let year = Number(date.substring(0, 4));\r\n\r\n  let currDate = new Date(year, month, day);\r\n\r\n  //For the prevDate and nextDate, convert the date to a text string\r\n  //Convert prevDate to a text string\r\n  let prevDate = currDate.addDays(-1);\r\n  let prevDateDay = prevDate.getDate();\r\n  if (prevDateDay < 10) prevDateDay = \"0\" + prevDateDay;\r\n  let prevDateMonth = prevDate.getMonth() + 1;\r\n  if (prevDateMonth < 10) prevDateMonth = \"0\" + prevDateMonth;\r\n  let prevDateString =\r\n    prevDate.getFullYear() + \"-\" + prevDateMonth + \"-\" + prevDateDay;\r\n\r\n  //Convert nextDate to a text string\r\n  let nextDate = currDate.addDays(1);\r\n  let nextDateDay = nextDate.getDate();\r\n  if (nextDateDay < 10) nextDateDay = \"0\" + nextDateDay;\r\n  let nextDateMonth = nextDate.getMonth() + 1;\r\n  if (nextDateMonth < 10) nextDateMonth = \"0\" + nextDateMonth;\r\n  let nextDateString =\r\n    nextDate.getFullYear() + \"-\" + nextDateMonth + \"-\" + nextDateDay;\r\n  console.log(\"nextDateString\", nextDateString);\r\n\r\n  //Use useEffect to load the reservations and the tables\r\n\r\n  //Load reservations\r\n  useEffect(loadDashboard, [date]);\r\n\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setReservationsError(null);\r\n\r\n    listReservations({ date }, abortController.signal)\r\n      .then(setReservations)\r\n      .catch(setReservationsError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //Load tables\r\n  useEffect(loadTables, [date]);\r\n\r\n  function loadTables() {\r\n    const abortController = new AbortController();\r\n    setTablesError(null);\r\n    listTables(abortController.signal).then(setTables).catch(setTablesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //Create the handleFinish function to finish a table\r\n  //This function changes the status of a reservation to 'finished' and the status of table to 'free'\r\n  async function handleFinish(reservationId, tableId) {\r\n    setVisibility3(null);\r\n\r\n    //Create a reservation object with a reservation_id and set the status to 'finished'\r\n    console.log(\"reservationId\", reservationId);\r\n    let reservation = {\r\n      data: {},\r\n    };\r\n\r\n    reservation.data.reservation_id = reservationId;\r\n    reservation.data.status = \"finished\";\r\n\r\n    //Create a table object with a table_id and set the reservation_id to null (which makes it 'free')\r\n    let table = {\r\n      data: {},\r\n    };\r\n\r\n    table.data.table_id = tableId;\r\n    table.data.reservation_id = null;\r\n\r\n    //Make an api call to update the reservation's status\r\n    async function changeReservation(reservation) {\r\n      try {\r\n        const response = await updateReservationStatus(reservation);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservationStatus API call: \", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n\r\n    if (reservationId !== null) changeReservation(reservation);\r\n\r\n    //Make an api call to update the table's status\r\n    async function changeTable(table) {\r\n      try {\r\n        const response = await updateTableStatus(table);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateTableStatus API call: \", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n    await changeTable(table);\r\n\r\n    //Reload reservations and tables\r\n    loadTables();\r\n    loadDashboard();\r\n  }\r\n\r\n  //Create a handleCancel function to cancel a reservation\r\n  //This function sets a reservation's status to cancelled\r\n  async function handleCancel(reservationId) {\r\n    setVisibility3(null);\r\n\r\n    //Create a reservation object with a reservation_id and set the status to cancelled\r\n    let reservation = {\r\n      data: {},\r\n    };\r\n\r\n    reservation.data.reservation_id = reservationId;\r\n    reservation.data.status = \"cancelled\";\r\n\r\n    //Make an api call to update the status of the reservation\r\n    async function changeReservation(reservation) {\r\n      try {\r\n        const response = await updateReservationStatus(reservation);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservationStatus API call: \", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n    await changeReservation(reservation);\r\n    loadDashboard();\r\n  }\r\n\r\n  //Create table rows of reservations using the 'reservations' state array\r\n  const reservationLinks = reservations.map((reservation) => {\r\n    let visible = reservation.status === \"booked\" ? true : null;\r\n    let visible2 = reservation.status !== \"cancelled\" ? true : null;\r\n\r\n    return (\r\n      <tr key={reservation.reservation_id}>\r\n        <td>{reservation.reservation_id}</td>\r\n        <td>{reservation.first_name}</td>\r\n        <td>{reservation.last_name}</td>\r\n        <td>{reservation.mobile_number}</td>\r\n        <td>{reservation.reservation_date}</td>\r\n        <td>{reservation.reservation_time}</td>\r\n        <td>{reservation.people}</td>\r\n        <td data-reservation-id-status={reservation.reservation_id}>\r\n          {reservation.status}\r\n        </td>\r\n        <td>\r\n          <Link to={`/reservations/${reservation.reservation_id}/edit`}>\r\n            <button type=\"button\" class=\"btn btn-outline-primary\">\r\n              Edit\r\n            </button>\r\n          </Link>{\" \"}\r\n        </td>\r\n        <td>\r\n          <CancelButton\r\n            visibility={visible2}\r\n            handleCancel={handleCancel}\r\n            reservationId={reservation.reservation_id}\r\n          />\r\n        </td>\r\n        <SeatButton\r\n          visibility={visible}\r\n          reservationId={reservation.reservation_id}\r\n        />\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  //Create table rows of tables using the 'tables' state array\r\n  const tableLinks = tables.map((table) => {\r\n    let visible = table.reservation_id ? true : null;\r\n\r\n    return (\r\n      <tr key={table.table_id}>\r\n        <td>{table.table_id}</td>\r\n        <td>{table.table_name}</td>\r\n        <td>{table.capacity}</td>\r\n        <td>{table.reservation_id}</td>\r\n        <td data-table-id-status={table.table_id}>\r\n          {table.reservation_id === null ? \"free\" : \"occupied\"}\r\n        </td>\r\n        <FinishButton\r\n          visibility={visible}\r\n          handleFinish={handleFinish}\r\n          reservationId={table.reservation_id}\r\n          tableId={table.table_id}\r\n        />\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  //Return the html code for the reservations and the tables\r\n  return (\r\n    <main>\r\n      <h1>Reservations</h1>\r\n      <table>\r\n        <tr>\r\n          <th>Reservation ID</th>\r\n          <th>First Name</th>\r\n          <th>Last Name</th>\r\n          <th>Mobile Number</th>\r\n          <th>Reservation Date</th>\r\n          <th>Reservation Time</th>\r\n          <th>People</th>\r\n          <th>Status</th>\r\n        </tr>\r\n\r\n        {reservationLinks}\r\n        <tr>\r\n          <td>\r\n            <Link to={`/dashboard?date=${prevDateString}`}>\r\n              <button type=\"button\" class=\"btn btn-primary\">\r\n                Previous\r\n              </button>\r\n            </Link>{\" \"}\r\n          </td>\r\n          <td>\r\n            <Link to={`/dashboard`}>\r\n              <button type=\"button\" class=\"btn btn-primary\">\r\n                Today\r\n              </button>\r\n            </Link>{\" \"}\r\n          </td>\r\n          <td>\r\n            <Link to={`/dashboard?date=${nextDateString}`}>\r\n              <button type=\"button\" class=\"btn btn-primary\">\r\n                Next\r\n              </button>\r\n            </Link>{\" \"}\r\n          </td>\r\n        </tr>\r\n      </table>\r\n      <br />\r\n      <h1>Tables for Seating</h1>\r\n      <table>\r\n        <tr>\r\n          <th>Table ID</th>\r\n          <th>Table Name</th>\r\n          <th>Capacity</th>\r\n          <th>Reservation ID</th>\r\n          <th>Status</th>\r\n        </tr>\r\n        {tableLinks}\r\n      </table>\r\n      <ErrorCaught visibility3={visibility3} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\date-time.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\api.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\ErrorAlert.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\format-reservation-date.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Reservations.js",["293","294"],"import React, { useEffect, useState } from \"react\";\r\nimport { listReservations } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Reservations({ date }) {\r\n  const [reservations, setReservations] = useState([]);\r\n  const [reservationsError, setReservationsError] = useState(null);\r\n\r\n  useEffect(loadDashboard, [date]);\r\n\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setReservationsError(null);\r\n    listReservations({ date }, abortController.signal)\r\n      .then(setReservations)\r\n      .catch(setReservationsError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  const reservationLinks = reservations.map((reservation) => (\r\n    <li key={reservation.reservation_id}>\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{reservation.reservation_id}</h5>\r\n          <p className=\"card-text\">\r\n            <table>\r\n              <tr>\r\n                <td>{reservation.first_name}</td>\r\n                <td>{reservation.last_name}</td>\r\n              </tr>\r\n            </table>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <main>\r\n      <h1>Reservations</h1>\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"first_name\">First Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"first_name\"\r\n            className=\"form-control\"\r\n            id=\"first_name\"\r\n            aria-describedby=\"emailHelp\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"last_name\">Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            className=\"form-control\"\r\n            id=\"last_name\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"mobile_number\">Mobile Number</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"mobile_number\"\r\n            className=\"form-control\"\r\n            id=\"mobile_number\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"reservation_date\">Date of Reservation</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"reservation_date\"\r\n            className=\"form-control\"\r\n            id=\"reservation_date\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"reservation_time\">Time of Reservation</label>\r\n          <input\r\n            type=\"time\"\r\n            name=\"reservation_time\"\r\n            className=\"form-control\"\r\n            id=\"reservation_time\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"people\">People</label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"people\"\r\n            className=\"form-control\"\r\n            id=\"people\"\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Submit\r\n        </button>\r\n        <button type=\"cancel\" className=\"btn btn-primary\">\r\n          Cancel\r\n        </button>\r\n      </form>\r\n      <ul>{reservationLinks}</ul>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Reservations;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Seat.js",["295","296","297","298"],"//The Seat Component is used to assign a reservation to a given table\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  listTables,\r\n  updateTable,\r\n  readReservation,\r\n  readTable,\r\n} from \"../utils/api\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\nimport CapacityError from \"./CapacityError\";\r\nimport OccupiedError from \"./OccupiedError\";\r\nimport ErrorCaught from \"./ErrorCaught\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Seat({ date }) {\r\n  //Create state variables\r\n  const [tables, setTables] = useState([]);\r\n  const [tablesError, setTablesError] = useState(null);\r\n  const [tableId, setTableId] = useState(\"\");\r\n  const [visibility, setVisibility] = useState(null);\r\n  const [visibility2, setVisibility2] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [capacity, setCapacity] = useState(null);\r\n  const [people, setPeople] = useState(null);\r\n  const [occupied, setOccupied] = useState(null);\r\n\r\n  //history hook\r\n  const history = useHistory();\r\n\r\n  //The handleTableIdChange function is called whenever the value for the table drop-down is changed\r\n  //This function sets the table_id, capacity, and occupied status of the table\r\n  function handleTableIdChange(event) {\r\n    setTableId(event.target.value);\r\n    setVisibility3(null);\r\n\r\n    async function getTable(table_id) {\r\n      try {\r\n        const response = await readTable(table_id);\r\n        setCapacity(response.capacity);\r\n        setOccupied(response.reservation_id);\r\n      } catch (err) {\r\n        console.log(\"Error making readTable API call:\", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n\r\n    getTable(event.target.value);\r\n  }\r\n\r\n  //Get ReservationId from url\r\n  const { reservationId } = useParams();\r\n\r\n  //Use useEffect to load the tables\r\n  useEffect(loadTables, [date]);\r\n\r\n  function loadTables() {\r\n    const abortController = new AbortController();\r\n    setTablesError(null);\r\n\r\n    //Reset ErrorCaught visibility\r\n    setVisibility3(null);\r\n\r\n    listTables(abortController.signal).then(setTables).catch(setTablesError);\r\n    loadPeople();\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  function loadPeople() {\r\n    //Make call to get the reservation and check the number of people in the reservation\r\n    async function getReservation(reservationId) {\r\n      try {\r\n        const response = await readReservation(reservationId);\r\n        setPeople(response.people);\r\n      } catch (err) {\r\n        console.log(\"Error Making readReservation API Call\", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n    getReservation(reservationId);\r\n  }\r\n\r\n  //Create table rows from the tables state array and use to populate the drop-down\r\n  const tableLinks = tables.map((table) => (\r\n    <option value={table.table_id}>\r\n      {table.table_name} - {table.capacity}\r\n    </option>\r\n  ));\r\n\r\n  //Create the handleSubmit function to seat a party at a table\r\n  //This function changes the status of a reservation to \"seated\" and it\r\n  //changes the reservation_id on the table to match the party's reservation_id\r\n  //so that the table is \"occupied\"\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n    validate();\r\n\r\n    //Create a table object with a table_id and reservation_id\r\n    let table = {\r\n      data: {},\r\n    };\r\n\r\n    table.data.table_id = tableId;\r\n    table.data.reservation_id = reservationId;\r\n\r\n    //Update the table with the reservation_id\r\n    async function changeTable(table) {\r\n      try {\r\n        const response = await updateTable(table);\r\n        history.push(\"/dashboard\");\r\n      } catch (err) {\r\n        console.log(\"The API Call for updateTable had an error:\", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n    await changeTable(table);\r\n  }\r\n\r\n  //The validate function is used by the handleSubmit function to make sure\r\n  //that the table has sufficient capacity and that it is not occupied.\r\n  const validate = () => {\r\n    //Reset visibility\r\n    setVisibility(null);\r\n    setVisibility2(null);\r\n    setVisibility3(null);\r\n\r\n    //Display an error message if table capacity is less than the size of the party\r\n    if (capacity < people) {\r\n      setVisibility(true);\r\n    }\r\n\r\n    if (occupied !== null) {\r\n      setVisibility2(true);\r\n    }\r\n  };\r\n\r\n  //Create the handleCancel function to return the user to the reservations page\r\n  const handleCancel = (event) => {\r\n    window.history.back();\r\n  };\r\n\r\n  //Return the drop-down and the submit button to allow a user to seat a party at a table\r\n  return (\r\n    <main>\r\n      <h1>Seat the Party</h1>\r\n      <br />\r\n      <div class=\"form-group\">\r\n        <label for=\"exampleFormControlSelect1\">Choose Table</label>\r\n        <select\r\n          class=\"form-control\"\r\n          id=\"table_id\"\r\n          name=\"table_id\"\r\n          onChange={handleTableIdChange}\r\n          value={tableId}\r\n        >\r\n          <option value=\"\">--Select an Option--</option>\r\n          {tableLinks}\r\n        </select>\r\n      </div>\r\n      <form onSubmit={handleSubmit}>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Submit\r\n        </button>\r\n        <button\r\n          type=\"cancel\"\r\n          className=\"btn btn-primary\"\r\n          onClick={handleCancel}\r\n        >\r\n          Cancel\r\n        </button>\r\n      </form>\r\n      <CapacityError visibility={visibility} />\r\n      <OccupiedError visibility2={visibility2} />\r\n      <ErrorCaught visibility3={visibility3} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Seat;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\AddTable.js",["299"],"import React, { useState } from \"react\";\r\nimport { createTable } from \"../utils/api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ErrorCaught from \"./ErrorCaught\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction AddTable({ date }) {\r\n  //Create tableName and capacity state variables and add event listeners\r\n  const [tableName, setTableName] = useState(\"\");\r\n  const handleTableNameChange = (event) => setTableName(event.target.value);\r\n\r\n  const [capacity, setCapacity] = useState(\"\");\r\n  const handleCapacityChange = (event) => setCapacity(event.target.value);\r\n\r\n  //State vars for ErrorCaught\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //The handleSubmit function creates a new table and posts it to the db\r\n  const handleSubmit = (event) => {\r\n    console.log(\"helloThereGuy\");\r\n    event.preventDefault();\r\n\r\n    setVisibility3(null);\r\n\r\n    //Create a table object and set its name and capacity according to the\r\n    //input fields\r\n    let table = {\r\n      data: {},\r\n    };\r\n\r\n    table.data.table_name = tableName;\r\n    table.data.capacity = Number(capacity);\r\n\r\n    //Make an api call to post the new table to the db\r\n    async function newTable(table) {\r\n      try {\r\n        const response = await createTable(table);\r\n        if (response) history.push(\"/dashboard\");\r\n      } catch (err) {\r\n        console.log(\"Error making createTable API call: \", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n\r\n    newTable(table);\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n    window.history.back();\r\n  };\r\n\r\n  //Return the html with inputs for entering the tableName and capacity\r\n  return (\r\n    <main>\r\n      <h1>Add a Table</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"table_name\">Table Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"table_name\"\r\n            className=\"form-control\"\r\n            id=\"table_name\"\r\n            onChange={handleTableNameChange}\r\n            value={tableName}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"capacity\">Capacity</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"capacity\"\r\n            className=\"form-control\"\r\n            id=\"capacity\"\r\n            onChange={handleCapacityChange}\r\n            value={capacity}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Submit\r\n        </button>\r\n        <button\r\n          type=\"cancel\"\r\n          className=\"btn btn-primary\"\r\n          onClick={handleCancel}\r\n        >\r\n          Cancel\r\n        </button>\r\n      </form>\r\n      <ErrorCaught visibility3={visibility3} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default AddTable;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\NewReservation.js",["300","301"],"import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createReservation } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\nimport ResForm from \"./ResForm\";\r\nimport PastDateError from \"./PastDateError\";\r\nimport TuesdayError from \"./TuesdayError\";\r\nimport TimeError from \"./TimeError\";\r\nimport ErrorCaught from \"./ErrorCaught\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction NewReservation({ date }) {\r\n  //Create state variables and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const handleMobileNumberChange = (event) =>\r\n    setMobileNumber(event.target.value);\r\n\r\n  const [reservationDate, setReservationDate] = useState(\"\");\r\n  const handleReservationDateChange = (event) =>\r\n    setReservationDate(event.target.value);\r\n\r\n  const [reservationTime, setReservationTime] = useState(\"\");\r\n  const handleReservationTimeChange = (event) =>\r\n    setReservationTime(event.target.value);\r\n\r\n  const [people, setPeople] = useState(\"\");\r\n  const handlePeopleChange = (event) => setPeople(Number(event.target.value));\r\n\r\n  //Set visibility for the different types of errors that can occur\r\n  const [visibility, setVisibility] = useState(null);\r\n  const [visibility2, setVisibility2] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  const [visibilityError, setVisibilityError] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Create switched\r\n  let switched = null;\r\n\r\n  //Create the handleSubmit function which creates a reservation based on the input and\r\n  //makes an api call to add that reservation to the database\r\n  const handleSubmit = (event) => {\r\n    switched = null;\r\n\r\n    event.preventDefault();\r\n\r\n    //Validate the input\r\n    validate();\r\n\r\n    if (!switched) {\r\n      let reservation = {\r\n        data: {},\r\n      };\r\n\r\n      //Set state variables\r\n      reservation.data.first_name = firstName;\r\n      reservation.data.last_name = lastName;\r\n      reservation.data.mobile_number = mobileNumber;\r\n      reservation.data.reservation_date = reservationDate;\r\n      reservation.data.reservation_time = reservationTime;\r\n      reservation.data.people = people;\r\n\r\n      //Make api call to create a new reservation\r\n      async function newReservation(reservation) {\r\n        try {\r\n          const response = await createReservation(reservation);\r\n        } catch (err) {\r\n          console.log(\"Error making createReservation API call\", err);\r\n          setErrMessage(err);\r\n          setVisibilityError(true);\r\n        }\r\n      }\r\n      newReservation(reservation);\r\n\r\n      history.push(`/dashboard?date=${reservationDate}`);\r\n    }\r\n  };\r\n\r\n  //The validate function ensures that the reservation is not in the past, on a Tuesday,\r\n  //or before 10:00AM or after 9:30PM\r\n  const validate = () => {\r\n    //Reset visibility\r\n    setVisibility(null);\r\n    setVisibility2(null);\r\n    setVisibility3(null);\r\n    setVisibilityError(null);\r\n\r\n    //Create date for reservation date\r\n    let month = Number(reservationDate.substring(5, 7)) - 1;\r\n    let day = Number(reservationDate.substring(8, 10));\r\n    let year = Number(reservationDate.substring(0, 4));\r\n    let hours = Number(reservationTime.substring(0, 2));\r\n    let minutes = Number(reservationTime.substring(3));\r\n\r\n    //Compare the current date with the date of the reservation entered\r\n    let resDate = new Date(year, month, day);\r\n    resDate.setHours(hours);\r\n    resDate.setMinutes(minutes);\r\n\r\n    let today = new Date();\r\n\r\n    //If the current date is greater than the reservation date, throw an error\r\n    if (resDate.valueOf() < today.valueOf()) {\r\n      setVisibility(true);\r\n      switched = true;\r\n    }\r\n\r\n    //If the reservation is made on a Tuesday, throw an error\r\n    if (resDate.getDay() === 2) {\r\n      setVisibility2(true);\r\n      switched = true;\r\n    }\r\n\r\n    //If the reservation is earlier than 10:30am or later than 9:30pm, throw an error\r\n    if (\r\n      resDate.getHours() < 10 ||\r\n      (resDate.getHours() === 10 && resDate.getMinutes() < 30)\r\n    ) {\r\n      setVisibility3(true);\r\n      switched = true;\r\n    }\r\n\r\n    if (\r\n      resDate.getHours() > 21 ||\r\n      (resDate.getHours() === 21 && resDate.getMinutes() > 30)\r\n    ) {\r\n      setVisibility3(true);\r\n      switched = true;\r\n    }\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage1\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n    history.push(\"/dashboard\");\r\n  };\r\n\r\n  //Return the form with inputs to create a new reservation\r\n  return (\r\n    <main>\r\n      <h1>Add a New Reservation</h1>\r\n      <ResForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        mobileNumber={mobileNumber}\r\n        handleMobileNumberChange={handleMobileNumberChange}\r\n        reservationDate={reservationDate}\r\n        handleReservationDateChange={handleReservationDateChange}\r\n        reservationTime={reservationTime}\r\n        handleReservationTimeChange={handleReservationTimeChange}\r\n        people={people}\r\n        handlePeopleChange={handlePeopleChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n      <PastDateError visibility={visibility} />\r\n      <TuesdayError visibility2={visibility2} />\r\n      <TimeError visibility3={visibility3} />\r\n      <ErrorCaught visibility3={visibilityError} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default NewReservation;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\EditReservation.js",["302"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readReservation, updateReservation } from \"../utils/api\";\r\nimport ResForm from \"./ResForm\";\r\nimport ErrorCaught from \"./ErrorCaught\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction EditReservation({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const handleMobileNumberChange = (event) =>\r\n    setMobileNumber(event.target.value);\r\n\r\n  const [reservationDate, setReservationDate] = useState(\"\");\r\n  const handleReservationDateChange = (event) =>\r\n    setReservationDate(event.target.value);\r\n\r\n  const [reservationTime, setReservationTime] = useState(\"\");\r\n  const handleReservationTimeChange = (event) =>\r\n    setReservationTime(event.target.value);\r\n\r\n  const [people, setPeople] = useState(\"\");\r\n  const handlePeopleChange = (event) => setPeople(Number(event.target.value));\r\n\r\n  //State vars for error message\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Get ReservationId from url\r\n  const { reservationId } = useParams();\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Make an API Call to get the reservation based on the reservation_id\r\n  useEffect(() => {\r\n    async function getReservation(reservationId) {\r\n      const response = await readReservation(reservationId);\r\n\r\n      let dateString = response.reservation_date.substring(0, 10);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setMobileNumber(response.mobile_number);\r\n      setReservationDate(dateString);\r\n      setReservationTime(response.reservation_time);\r\n      setPeople(response.people);\r\n    }\r\n    getReservation(reservationId);\r\n  }, [reservationId]);\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function creates a reservation based on the user input and then uses changeReservation() api call\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    setVisibility3(null);\r\n\r\n    let reservation = {\r\n      data: {},\r\n    };\r\n\r\n    reservation.data.reservation_id = reservationId;\r\n    reservation.data.first_name = firstName;\r\n    reservation.data.last_name = lastName;\r\n    reservation.data.mobile_number = mobileNumber;\r\n    reservation.data.reservation_date = reservationDate;\r\n    reservation.data.reservation_time = reservationTime;\r\n    reservation.data.people = people;\r\n\r\n    //Make api call to update reservation\r\n    async function changeReservation(reservation) {\r\n      try {\r\n        const response = await updateReservation(reservation);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n    await changeReservation(reservation);\r\n\r\n    //Reset fields\r\n    setFirstName(\"\");\r\n    setLastName(\"\");\r\n    setMobileNumber(\"\");\r\n    setReservationDate(\"\");\r\n    setReservationTime(\"\");\r\n    setPeople(\"\");\r\n\r\n    //Go back to dashboard page\r\n    history.push(`/dashboard?date=${reservationDate}`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard?date=${reservationDate}`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Edit Reservation</h1>\r\n      <ResForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        mobileNumber={mobileNumber}\r\n        handleMobileNumberChange={handleMobileNumberChange}\r\n        reservationDate={reservationDate}\r\n        handleReservationDateChange={handleReservationDateChange}\r\n        reservationTime={reservationTime}\r\n        handleReservationTimeChange={handleReservationTimeChange}\r\n        people={people}\r\n        handlePeopleChange={handlePeopleChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n      <ErrorCaught visibility3={visibility3} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default EditReservation;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Search.js",["303","304","305"],"import React, { useEffect, useState } from \"react\";\r\nimport SearchResults from \"./SearchResults\";\r\nimport { listReservations } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Search({ date }) {\r\n  //Create the phone nubmer state variable and add event listeners\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  const handlePhoneNumberChange = (event) => setPhoneNumber(event.target.value);\r\n  const [visibilityStatus, setVisibilityStatus] = useState(null);\r\n  const [reservations, setReservations] = useState([]);\r\n  const [reservationsError, setReservationsError] = useState(null);\r\n\r\n  //UseEffect is used to get the reservations\r\n  useEffect(loadDashboard, [phoneNumber]);\r\n\r\n  //Load all of the reservations filtered by phone number\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setReservationsError(null);\r\n    const mobile_number = phoneNumber;\r\n\r\n    listReservations({ mobile_number }, abortController.signal)\r\n      .then(setReservations)\r\n      .catch(setReservationsError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //The handleSubmit function merely shows the search results\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    loadDashboard();\r\n    setVisibilityStatus(true);\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage1\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  //Return the form to enter the phone number and show the results\r\n  return (\r\n    <main>\r\n      <h1>Find Reservations</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"mobile_number\">Enter a Customer Phone Number</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"mobile_number\"\r\n            className=\"form-control\"\r\n            id=\"mobile_number\"\r\n            onChange={handlePhoneNumberChange}\r\n            value={phoneNumber}\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Find\r\n        </button>\r\n      </form>\r\n      <div>\r\n        <SearchResults\r\n          visibility={visibilityStatus}\r\n          phoneNumber={phoneNumber}\r\n          reservations={reservations}\r\n        />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\SearchResults.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\SeatButton.js",["306","307"],"//The Seat Button is used to seat a reservation\r\n//The button will appear next to a reservation on the Dashboard\r\n//The two props are visibility and reservationId\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction SeatButton({ visibility, reservationId }) {\r\n  if (visibility !== null) {\r\n    return (\r\n      <td>\r\n        <Link to={`/reservations/${reservationId}/seat`}>\r\n          <button type=\"button\" class=\"btn btn-outline-primary\">\r\n            Seat\r\n          </button>\r\n        </Link>{\" \"}\r\n      </td>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default SeatButton;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\FinishButton.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\CancelButton.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\PastDateError.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\TuesdayError.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\OccupiedError.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\CapacityError.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\TimeError.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\ResForm.js",["308","309"],"//The Seat Button is used to seat a reservation\r\n//The button will appear next to a reservation on the Dashboard\r\n//The two props are visibility and reservationId\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nfunction ResForm({\r\n  firstName,\r\n  handleFirstNameChange,\r\n  lastName,\r\n  handleLastNameChange,\r\n  mobileNumber,\r\n  handleMobileNumberChange,\r\n  reservationDate,\r\n  handleReservationDateChange,\r\n  reservationTime,\r\n  handleReservationTimeChange,\r\n  people,\r\n  handlePeopleChange,\r\n  handleSubmit,\r\n  handleCancel,\r\n}) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"first_name\">First Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"first_name\"\r\n          className=\"form-control\"\r\n          id=\"first_name\"\r\n          aria-describedby=\"emailHelp\"\r\n          onChange={handleFirstNameChange}\r\n          value={firstName}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"last_name\">Last Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"last_name\"\r\n          className=\"form-control\"\r\n          id=\"last_name\"\r\n          onChange={handleLastNameChange}\r\n          value={lastName}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"mobile_number\">Mobile Number</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"mobile_number\"\r\n          className=\"form-control\"\r\n          id=\"mobile_number\"\r\n          onChange={handleMobileNumberChange}\r\n          value={mobileNumber}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"reservation_date\">Date of Reservation</label>\r\n        <input\r\n          type=\"date\"\r\n          name=\"reservation_date\"\r\n          className=\"form-control\"\r\n          id=\"reservation_date\"\r\n          onChange={handleReservationDateChange}\r\n          value={reservationDate}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"reservation_time\">Time of Reservation</label>\r\n        <input\r\n          type=\"time\"\r\n          name=\"reservation_time\"\r\n          className=\"form-control\"\r\n          id=\"reservation_time\"\r\n          onChange={handleReservationTimeChange}\r\n          value={reservationTime}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"people\">People</label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"people\"\r\n          className=\"form-control\"\r\n          id=\"people\"\r\n          onChange={handlePeopleChange}\r\n          value={people}\r\n        />\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Submit\r\n      </button>\r\n      <button type=\"cancel\" className=\"btn btn-primary\" onClick={handleCancel}>\r\n        Cancel\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ResForm;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\ErrorCaught.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\index.js",[],["310","311"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\App.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Layout.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Menu.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Routes.js",["312","313","314","315"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\NotFound.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EditParticipant.js",["316","317","318","319","320","321"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport {\r\n  readReservation,\r\n  updateReservation,\r\n  readParticipant,\r\n  updateParticipant,\r\n} from \"../utils/api\";\r\nimport ResForm from \"./ResForm\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction EditParticipant({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const handleMobileNumberChange = (event) =>\r\n    setMobileNumber(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Get ParticipantId from url\r\n  const { participantId } = useParams();\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Make an API Call to get the reservation based on the reservation_id\r\n  useEffect(() => {\r\n    async function getParticipant(participantId) {\r\n      const response = await readParticipant(participantId);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setMobileNumber(response.mobile_number);\r\n    }\r\n    getParticipant(participantId);\r\n  }, [participantId]);\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function creates a reservation based on the user input and then uses changeReservation() api call\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let participant = {\r\n      data: {},\r\n    };\r\n\r\n    participant.data.participant_id = participantId;\r\n    participant.data.first_name = firstName;\r\n    participant.data.last_name = lastName;\r\n    participant.data.mobile_number = mobileNumber;\r\n\r\n    //Make api call to update reservation\r\n    async function changeParticipant(participant) {\r\n      try {\r\n        const response = await updateParticipant(participant);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await changeParticipant(participant);\r\n\r\n    alert(\"Participant Info Updated successfully\");\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Edit Participant</h1>\r\n      <ResForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        mobileNumber={mobileNumber}\r\n        handleMobileNumberChange={handleMobileNumberChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default EditParticipant;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\NewParticipant.js",["322","323","324"],"import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createReservation, createParticipant } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\nimport ResForm from \"./ResForm\";\r\nimport ErrorCaught from \"../ErrorCaught\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction NewReservation({ date }) {\r\n  //Create state variables and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const handleMobileNumberChange = (event) =>\r\n    setMobileNumber(event.target.value);\r\n\r\n  //Set visibility for the different types of errors that can occur\r\n  const [visibilityError, setVisibilityError] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Create switched\r\n  let switched = null;\r\n\r\n  //Create the handleSubmit function which creates a reservation based on the input and\r\n  //makes an api call to add that reservation to the database\r\n  const handleSubmit = (event) => {\r\n    switched = null;\r\n\r\n    event.preventDefault();\r\n\r\n    //Validate the input\r\n    validate();\r\n\r\n    if (!switched) {\r\n      let participant = {\r\n        data: {},\r\n      };\r\n\r\n      //Set state variables\r\n      participant.data.first_name = firstName;\r\n      participant.data.last_name = lastName;\r\n      participant.data.mobile_number = mobileNumber;\r\n\r\n      //Make api call to create a new reservation\r\n      async function newParticipant(participant) {\r\n        try {\r\n          const response = await createParticipant(participant);\r\n        } catch (err) {\r\n          console.log(\"Error making createReservation API call\", err);\r\n          setErrMessage(err);\r\n          setVisibilityError(true);\r\n        }\r\n      }\r\n      newParticipant(participant);\r\n\r\n      history.push(`/`);\r\n    }\r\n  };\r\n\r\n  //The validate function ensures that the reservation is not in the past, on a Tuesday,\r\n  //or before 10:00AM or after 9:30PM\r\n  const validate = () => {\r\n    //Reset visibility\r\n    setVisibilityError(null);\r\n\r\n    //If firstName, lastName, or mobileNumber are missing, throw an error\r\n    if (!firstName || !lastName || !mobileNumber) {\r\n      setVisibilityError(true);\r\n      switched = true;\r\n    }\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage1\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  //Return the form with inputs to create a new reservation\r\n  return (\r\n    <main>\r\n      <h1>Add a New Program Participant</h1>\r\n      <ResForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        mobileNumber={mobileNumber}\r\n        handleMobileNumberChange={handleMobileNumberChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n      <ErrorCaught visibility3={visibilityError} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default NewReservation;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\date-time.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\api.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ResForm.js",["325","326"],"//The Seat Button is used to seat a reservation\r\n//The button will appear next to a reservation on the Dashboard\r\n//The two props are visibility and reservationId\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nfunction ResForm({\r\n  firstName,\r\n  handleFirstNameChange,\r\n  lastName,\r\n  handleLastNameChange,\r\n  mobileNumber,\r\n  handleMobileNumberChange,\r\n  handleSubmit,\r\n  handleCancel,\r\n}) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"first_name\">First Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"first_name\"\r\n          className=\"form-control\"\r\n          id=\"first_name\"\r\n          aria-describedby=\"emailHelp\"\r\n          onChange={handleFirstNameChange}\r\n          value={firstName}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"last_name\">Last Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"last_name\"\r\n          className=\"form-control\"\r\n          id=\"last_name\"\r\n          onChange={handleLastNameChange}\r\n          value={lastName}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"mobile_number\">Mobile Number</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"mobile_number\"\r\n          className=\"form-control\"\r\n          id=\"mobile_number\"\r\n          onChange={handleMobileNumberChange}\r\n          value={mobileNumber}\r\n        />\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Submit\r\n      </button>{\" \"}\r\n      <button type=\"cancel\" className=\"btn btn-primary\" onClick={handleCancel}>\r\n        Cancel\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ResForm;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\ErrorAlert.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\format-reservation-date.js",[],["327","328"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\AddStatus.js",["329","330","331","332","333","334","335","336","337"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\dashboard\\ParticipantsDashboard.js",["338","339","340","341"],"//The main functions of the Dashboard component are to display all of the reservations\r\n//and allow the user to seat, edit, or cancel reservations and to display all of the\r\n//tables and allow the user to finish the tables\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { listInstances } from \"../utils/api\";\r\nimport ErrorCaught from \"../ErrorCaught\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction ParticipantsDashboard({ date }) {\r\n  //The main state variables are reservations and tables which are arrays to be displayed\r\n  const [instances, setInstances] = useState([]);\r\n  const [instancesError, setInstancesError] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  //Declare an instance of the useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Use useEffect to load the reservations and the tables\r\n\r\n  //Load reservations\r\n  useEffect(loadDashboard, [date]);\r\n\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setInstancesError(null);\r\n\r\n    listInstances({}, abortController.signal)\r\n      .then(setInstances)\r\n      .catch(setInstancesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //Create table rows of reservations using the 'reservations' state array\r\n  const instanceLinks = instances.map((instance) => {\r\n    let startDateString = instance.start_date.substring(0, 10);\r\n    let dischargeDateString = \"\";\r\n    if (instance.discharge_date)\r\n      dischargeDateString = instance.discharge_date.substring(0, 10);\r\n\r\n    return (\r\n      <tr key={instance.instance_id}>\r\n        <td>{instance.instance_id}</td>\r\n        <td>{instance.first_name}</td>\r\n        <td>{instance.last_name}</td>\r\n        <td>{instance.incident_num}</td>\r\n        <td>{startDateString}</td>\r\n        <td>{dischargeDateString}</td>\r\n        <Link to={`/participants/${instance.instance_id}/statuses`}>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            style={{ margin: \"5px\" }}\r\n          >\r\n            Add Status\r\n          </button>\r\n        </Link>{\" \"}\r\n        <Link to={`/participants/${instance.instance_id}/view`}>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            style={{ margin: \"5px\" }}\r\n          >\r\n            View\r\n          </button>\r\n        </Link>{\" \"}\r\n        <Link to={`/participants/${instance.instance_id}/edit`}>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            style={{ margin: \"5px\" }}\r\n          >\r\n            Edit\r\n          </button>\r\n        </Link>\r\n        <Link\r\n          to={`/participants/${instance.instance_id}/discharge_participant`}\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            style={{ margin: \"5px\" }}\r\n          >\r\n            Discharge\r\n          </button>\r\n        </Link>{\" \"}\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  //Return the html code for the reservations and the tables\r\n  return (\r\n    <main>\r\n      <h1>Active Participants</h1>\r\n      <table class=\"table\">\r\n        <tr>\r\n          <th>Instance ID</th> <th>First Name</th> <th>Last Name</th>{\" \"}\r\n          <th>Incident #</th>\r\n          <th>Start Date</th> <th>Discharge Date</th>\r\n        </tr>\r\n\r\n        {instanceLinks}\r\n      </table>\r\n      <br />\r\n\r\n      <ErrorCaught visibility3={visibility3} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default ParticipantsDashboard;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\RecCheck.js",["342","343","344","345","346","347","348","349","350"],"import React, { useEffect, useState } from \"react\";\r\nimport { createStatus } from \"../utils/api\";\r\n\r\nimport { readInstance, updateInstance } from \"../utils/api\";\r\nimport { useParams, useHistory, Link } from \"react-router-dom\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction RecCheck({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [incident, setIncident] = useState(null);\r\n  const handleIncidentChange = (event) => setIncident(event.target.value);\r\n\r\n  const [statusName, setStatusName] = useState(null);\r\n  const handleStatusNameChange = (event) => setStatusName(event.target.value);\r\n\r\n  const [startDate, setStartDate] = useState(null);\r\n  const handleStartDateChange = (event) => setStartDate(event.target.value);\r\n\r\n  const [dischargeDate, setDischargeDate] = useState(null);\r\n  const handleDischargeDateChange = (event) =>\r\n    setDischargeDate(event.target.value);\r\n\r\n  const [checkDate, setCheckDate] = useState(null);\r\n  const handleCheckDateChange = (event) => setCheckDate(event.target.value);\r\n\r\n  const [timePeriod, setTimePeriod] = useState(null);\r\n  const handleTimePeriodChange = (event) => setTimePeriod(event.target.value);\r\n\r\n  const [fed, setFed] = useState(\"\");\r\n  const handleFedChange = (event) => setFed(event.target.value);\r\n\r\n  const [state, setState] = useState(\"\");\r\n  const handleStateChange = (event) => setState(event.target.value);\r\n\r\n  //State vars for ErrorCaught\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Get InstanceId from url\r\n  const { instanceId } = useParams();\r\n  console.log(\"instanceId\", instanceId);\r\n\r\n  //Make an API Call to get the reservation based on the reservation_id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n\r\n      let startDateString = response.start_date.substring(0, 10);\r\n      let dischargeDateString = response.start_date.substring(0, 10);\r\n      let checkDateString = response.start_date.substring(0, 10);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setIncident(response.incident_num);\r\n      setStartDate(startDateString);\r\n      setDischargeDate(dischargeDateString);\r\n      setCheckDate(checkDateString);\r\n    }\r\n    getInstance(instanceId);\r\n    console.log(\"start date\", startDate, \"discharge date\", dischargeDate);\r\n  }, [instanceId]);\r\n\r\n  async function handleSubmit(event) {\r\n    let instance = {\r\n      data: {},\r\n    };\r\n\r\n    instance.data.instance_id = Number(instanceId);\r\n    if (timePeriod === \"1\" && fed === \"yes\") instance.data[\"1_YR_Fed\"] = \"yes\";\r\n    if (timePeriod === \"1\" && fed === \"no\") instance.data[\"1_YR_Fed\"] = \"no\";\r\n    if (timePeriod === \"1\" && state === \"yes\")\r\n      instance.data[\"1_YR_State\"] = \"yes\";\r\n    if (timePeriod === \"1\" && state === \"no\")\r\n      instance.data[\"1_YR_State\"] = \"no\";\r\n    if (timePeriod === \"2\" && fed === \"yes\") instance.data[\"2_YR_Fed\"] = \"yes\";\r\n    if (timePeriod === \"2\" && fed === \"no\") instance.data[\"2_YR_Fed\"] = \"no\";\r\n    if (timePeriod === \"2\" && state === \"yes\")\r\n      instance.data[\"2_YR_State\"] = \"yes\";\r\n    if (timePeriod === \"2\" && state === \"no\")\r\n      instance.data[\"2_YR_State\"] = \"no\";\r\n    if (timePeriod === \"3\" && fed === \"yes\") instance.data[\"3_YR_Fed\"] = \"yes\";\r\n    if (timePeriod === \"3\" && fed === \"no\") instance.data[\"3_YR_Fed\"] = \"no\";\r\n    if (timePeriod === \"3\" && state === \"yes\")\r\n      instance.data[\"3_YR_State\"] = \"yes\";\r\n    if (timePeriod === \"3\" && state === \"no\")\r\n      instance.data[\"3_YR_State\"] = \"no\";\r\n    if (timePeriod === \"4\" && fed === \"yes\") instance.data[\"4_YR_Fed\"] = \"yes\";\r\n    if (timePeriod === \"4\" && fed === \"no\") instance.data[\"4_YR_Fed\"] = \"no\";\r\n    if (timePeriod === \"4\" && state === \"yes\")\r\n      instance.data[\"4_YR_State\"] = \"yes\";\r\n    if (timePeriod === \"4\" && state === \"no\")\r\n      instance.data[\"4_YR_State\"] = \"no\";\r\n    if (timePeriod === \"5\" && fed === \"yes\") instance.data[\"5_YR_Fed\"] = \"yes\";\r\n    if (timePeriod === \"5\" && fed === \"no\") instance.data[\"5_YR_Fed\"] = \"no\";\r\n    if (timePeriod === \"5\" && state === \"yes\")\r\n      instance.data[\"5_YR_State\"] = \"yes\";\r\n    if (timePeriod === \"5\" && state === \"no\")\r\n      instance.data[\"5_YR_State\"] = \"no\";\r\n\r\n    //Make api call to update instance\r\n    async function changeInstance(instance) {\r\n      const response = await updateInstance(instance);\r\n      console.log(response);\r\n    }\r\n    await changeInstance(instance);\r\n\r\n    alert(\"Recidivism Check Performed Successfully\");\r\n  }\r\n\r\n  //Return the html with status drop-down\r\n  return (\r\n    <main>\r\n      <h1>Recidivism Check</h1>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"first_name\">First Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"first_name\"\r\n          className=\"form-control\"\r\n          id=\"first_name\"\r\n          aria-describedby=\"emailHelp\"\r\n          onChange={handleFirstNameChange}\r\n          value={firstName}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"last_name\">Last Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"last_name\"\r\n          className=\"form-control\"\r\n          id=\"last_name\"\r\n          onChange={handleLastNameChange}\r\n          value={lastName}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"last_name\">Incident</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"last_name\"\r\n          className=\"form-control\"\r\n          id=\"last_name\"\r\n          onChange={handleIncidentChange}\r\n          value={incident}\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"start_date\">Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"start_date\"\r\n              className=\"form-control\"\r\n              id=\"start_date\"\r\n              onChange={handleStartDateChange}\r\n              value={startDate}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"discharge_date\">Discharge Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"discharge_date\"\r\n              className=\"form-control\"\r\n              id=\"discharge_date\"\r\n              onChange={handleDischargeDateChange}\r\n              value={dischargeDate}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"check_date\">Date of Recidivism Check</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"check_date\"\r\n              className=\"form-control\"\r\n              id=\"check_date\"\r\n              onChange={handleCheckDateChange}\r\n              value={checkDate}\r\n            />\r\n          </div>\r\n          <label for=\"exampleFormControlSelect1\">\r\n            Select Time Period of Check\r\n          </label>\r\n          <select\r\n            class=\"form-control\"\r\n            id=\"timePeriod\"\r\n            name=\"timePeriod\"\r\n            onChange={handleTimePeriodChange}\r\n            value={timePeriod}\r\n          >\r\n            <option value=\"\">--Time Period--</option>\r\n            <option value=\"1\"> 1 Year</option>\r\n            <option value=\"2\"> 2 Year</option>\r\n            <option value=\"3\"> 3 Year</option>\r\n            <option value=\"4\"> 4 Year</option>\r\n            <option value=\"5\"> 5 Year</option>\r\n          </select>\r\n          <label for=\"fed\">Federal Check</label>\r\n          <select\r\n            class=\"form-control\"\r\n            id=\"fed\"\r\n            name=\"fed\"\r\n            onChange={handleFedChange}\r\n            value={fed}\r\n          >\r\n            <option value=\"\">--Went Back?--</option>\r\n            <option value=\"yes\"> Yes</option>\r\n            <option value=\"no\"> No</option>\r\n          </select>\r\n          <label for=\"state\">State Check</label>\r\n          <select\r\n            class=\"form-control\"\r\n            id=\"state\"\r\n            name=\"state\"\r\n            onChange={handleStateChange}\r\n            value={state}\r\n          >\r\n            <option value=\"\">--Went Back?--</option>\r\n            <option value=\"yes\"> Yes</option>\r\n            <option value=\"no\"> No</option>\r\n          </select>\r\n          <br />\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Submit\r\n          </button>{\" \"}\r\n          <Link to={`/participants/rec_dashboard`}>\r\n            <button type=\"cancel\" className=\"btn btn-primary\">\r\n              Return to Recidivism Dashboard\r\n            </button>\r\n          </Link>\r\n        </form>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default RecCheck;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\dashboard\\RecDashboard.js",["351","352","353","354","355","356"],"//The main functions of the Dashboard component are to display all of the reservations\r\n//and allow the user to seat, edit, or cancel reservations and to display all of the\r\n//tables and allow the user to finish the tables\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { listInstances } from \"../utils/api\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction RecDashboard({ date }) {\r\n  //The main state variables are reservations and tables which are arrays to be displayed\r\n  let [instances, setInstances] = useState([]);\r\n  const [instancesError, setInstancesError] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [day, setDay] = useState(\"\");\r\n  const [month, setMonth] = useState(\"\");\r\n  const [year, setYear] = useState(\"\");\r\n  //Declare an instance of the useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Use useEffect to load the reservations and the tables\r\n\r\n  //Load reservations\r\n  useEffect(loadDashboard, [day, month, year]);\r\n\r\n  function loadDashboard() {\r\n    console.log(\"trying\");\r\n\r\n    const abortController = new AbortController();\r\n    setInstancesError(null);\r\n\r\n    listInstances({ day, month, year }, abortController.signal)\r\n      .then(setInstances)\r\n      .catch(setInstancesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  function pastDue() {\r\n    const currDate = new Date();\r\n    setMonth(currDate.getMonth());\r\n    setDay(currDate.getDate());\r\n    setYear(currDate.getFullYear());\r\n    console.log(\"dateString\", month, day, year);\r\n  }\r\n\r\n  function dueWithin30() {\r\n    const currDate = new Date();\r\n    currDate.setDate(currDate.getDate() + 30);\r\n    setMonth(currDate.getMonth());\r\n    setDay(currDate.getDate());\r\n    setYear(currDate.getFullYear());\r\n    console.log(\"dateString\", month, day, year);\r\n  }\r\n\r\n  function dueWithin90() {\r\n    const currDate = new Date();\r\n    currDate.setDate(currDate.getDate() + 90);\r\n    setMonth(currDate.getMonth());\r\n    setDay(currDate.getDate());\r\n    setYear(currDate.getFullYear());\r\n    console.log(\"dateString\", month, day, year);\r\n  }\r\n\r\n  //Create table rows of reservations using the 'reservations' state array\r\n  const instanceLinks = instances.map((instance) => {\r\n    let startDateString = instance.start_date.substring(0, 10);\r\n    let dischargeDateString = \"\";\r\n    if (instance.discharge_date)\r\n      dischargeDateString = instance.discharge_date.substring(0, 10);\r\n    let checkDateString = null;\r\n    if (instance.next_check_date)\r\n      checkDateString = instance.next_check_date.substring(0, 10);\r\n\r\n    return (\r\n      <tr key={instance.instance_id} style={{ padding: \"15px\" }}>\r\n        <td>{instance.instance_id}</td>\r\n        <td>{instance.first_name}</td>\r\n        <td>{instance.last_name}</td>\r\n        <td>{startDateString}</td>\r\n        <td>{dischargeDateString}</td>\r\n        <td>{checkDateString}</td>\r\n        <td>{instance[\"1_YR_Fed\"]}</td>\r\n        <td>{instance[\"1_YR_State\"]}</td>\r\n        <td>{instance[\"2_YR_Fed\"]}</td>\r\n        <td>{instance[\"2_YR_State\"]}</td>\r\n        <td>{instance[\"3_YR_Fed\"]}</td>\r\n        <td>{instance[\"3_YR_State\"]}</td>\r\n        <td>{instance[\"4_YR_Fed\"]}</td>\r\n        <td>{instance[\"4_YR_State\"]}</td>\r\n        <td>{instance[\"5_YR_Fed\"]}</td>\r\n        <td>{instance[\"5_YR_State\"]}</td>\r\n        <td>\r\n          <Link to={`/participants/${instance.instance_id}/rec_check`}>\r\n            <button\r\n              type=\"button\"\r\n              class=\"btn btn-primary\"\r\n              style={{ margin: \"5px\" }}\r\n            >\r\n              Perform Check\r\n            </button>\r\n          </Link>{\" \"}\r\n        </td>\r\n        <td>\r\n          <Link to={`/participants/${instance.participant_id}/rec_prev`}>\r\n            <button\r\n              type=\"button\"\r\n              class=\"btn btn-primary\"\r\n              style={{ margin: \"5px\" }}\r\n            >\r\n              View All\r\n            </button>\r\n          </Link>{\" \"}\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  //Return the html code for the reservations and the tables\r\n  return (\r\n    <main>\r\n      <h1>Recidivism Dashboard</h1>\r\n      <br />\r\n      <button type=\"button\" class=\"btn btn-primary\" onClick={pastDue}>\r\n        Past Due\r\n      </button>{\" \"}\r\n      <button type=\"button\" class=\"btn btn-primary\" onClick={dueWithin30}>\r\n        Due within 30 Days\r\n      </button>{\" \"}\r\n      <button type=\"button\" class=\"btn btn-primary\" onClick={dueWithin90}>\r\n        Due within 90 Days\r\n      </button>\r\n      <br />\r\n      <br />\r\n      <table class=\"table table-sm\">\r\n        <tr>\r\n          <th>Instance ID</th> <th>First Name</th> <th>Last Name</th>\r\n          <th>Start Date</th> <th>Discharge Date</th> <th>Next Check Date</th>\r\n          <th>1 YR Fed</th>\r\n          <th>1 YR State</th>\r\n          <th>2 YR Fed</th>\r\n          <th>2 YR State</th>\r\n          <th>3 YR Fed</th>\r\n          <th>3 YR State</th>\r\n          <th>4 YR Fed</th>\r\n          <th>4 YR State</th>\r\n          <th>5 YR Fed</th>\r\n          <th>5 YR State</th>\r\n          <th></th>\r\n        </tr>\r\n\r\n        {instanceLinks}\r\n      </table>\r\n      <br />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default RecDashboard;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ViewParticipant.js",["357","358","359","360","361","362","363","364"],"//The main functions of the Dashboard component are to display all of the reservations\r\n//and allow the user to seat, edit, or cancel reservations and to display all of the\r\n//tables and allow the user to finish the tables\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { readInstance, listStatuses } from \"../utils/api\";\r\nimport ParticipantMenu from \"./ParticipantMenu\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction ParticipantsDashboard({ date }) {\r\n  //The main state variables are reservations and tables which are arrays to be displayed\r\n  const [statuses, setStatuses] = useState([]);\r\n  const [statusesError, setStatusesError] = useState(null);\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [incidentNum, setIncidentNum] = useState(null);\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  //Declare an instance of the useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Get instanceId from url\r\n  const { instanceId } = useParams();\r\n  const instance_id = instanceId;\r\n  console.log(\"instance id\", instance_id);\r\n\r\n  //Use useEffect to load the statuses and the instances\r\n  //Load reservations\r\n  useEffect(loadStatuses, [date]);\r\n\r\n  function loadStatuses() {\r\n    const abortController = new AbortController();\r\n    setStatusesError(null);\r\n\r\n    listStatuses({ instance_id }, abortController.signal)\r\n      .then(setStatuses)\r\n      .catch(setStatusesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //Load instance\r\n  //Make an API Call to get the instance on the instance_id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n\r\n      let instDateString = response.start_date.substring(0, 10);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setIncidentNum(response.incident_num);\r\n      setStartDate(instDateString);\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  //Create table rows of statuses using the 'statuses' state array\r\n  const statusLinks = statuses.map((status) => {\r\n    let dateString = status.date.substring(0, 10);\r\n\r\n    return (\r\n      <tr key={status.status_id}>\r\n        <td style={{ padding: \"10px\" }}>{status.status_name}</td>\r\n        <td style={{ padding: \"10px\" }}>{dateString}</td>\r\n        <td style={{ padding: \"10px\" }}>{status.notes}</td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  //Return the html code for the reservations and the tables\r\n  return (\r\n    <main>\r\n      <h1>\r\n        <center>View Participant</center>\r\n      </h1>\r\n      <center>\r\n        <table\r\n          class=\"table table-sm\"\r\n          style={{ width: \"70%\", fontSize: \"25px\" }}\r\n        >\r\n          <tr style={{ padding: \"5px\" }}>\r\n            <td>\r\n              <strong>First Name: </strong>\r\n              {firstName}{\" \"}\r\n            </td>\r\n            <td>\r\n              <strong>Last Name: </strong> {lastName}\r\n            </td>\r\n            <td>\r\n              <strong>Incident #: </strong> {incidentNum}\r\n            </td>\r\n            <td>\r\n              <strong>Start Date: </strong> {startDate}\r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </center>\r\n      <br />\r\n\r\n      <div class=\"container\">\r\n        <div class=\"row\">\r\n          <div class=\"col\">\r\n            <ParticipantMenu instanceId={instanceId} />\r\n          </div>\r\n          <div class=\"col-9\">\r\n            <h1>Status Updates</h1>\r\n            <table class=\"table table-sm\">\r\n              <tr>\r\n                <th>Status Name</th> <th>Date</th> <th>Notes</th>{\" \"}\r\n              </tr>\r\n              {statusLinks}\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <br />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default ParticipantsDashboard;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\ErrorCaught.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenu.js",["365","366","367"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\Search.js",["368","369","370"],"import React, { useEffect, useState } from \"react\";\r\nimport SearchResults from \"./SearchResults\";\r\nimport { listInstances } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Search({ date }) {\r\n  //Create the phone nubmer state variable and add event listeners\r\n  const [last_name, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n  const [visibilityStatus, setVisibilityStatus] = useState(null);\r\n  const [instances, setInstances] = useState([]);\r\n  const [instancesError, setInstancesError] = useState(null);\r\n\r\n  //UseEffect is used to get the reservations\r\n  useEffect(loadDashboard, [last_name]);\r\n\r\n  //Load all of the reservations filtered by phone number\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setInstancesError(null);\r\n    console.log(\"last_name\", last_name);\r\n\r\n    listInstances({ last_name }, abortController.signal)\r\n      .then((response) => {\r\n        setInstances(response);\r\n        console.log(\"instances\", response);\r\n      })\r\n      .catch(setInstancesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //The handleSubmit function merely shows the search results\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    loadDashboard();\r\n    setVisibilityStatus(true);\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage1\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  //Return the form to enter the phone number and show the results\r\n  return (\r\n    <main>\r\n      <h1>Find Instances</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"last_name\">Enter a Participant's Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            className=\"form-control\"\r\n            id=\"last_name\"\r\n            onChange={handleLastNameChange}\r\n            value={last_name}\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Find\r\n        </button>\r\n      </form>\r\n      <div>\r\n        <SearchResults\r\n          visibility={visibilityStatus}\r\n          last_name={last_name}\r\n          instances={instances}\r\n        />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\SearchResults.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantNew.js",["371","372","373","374","375","376","377"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readParticipant, createParticipant } from \"../utils/api\";\r\nimport ParticipantNewForm from \"./ParticipantNewForm\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction ParticipantNew({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [dob, setDob] = useState(null);\r\n  const handleDobChange = (event) => setDob(event.target.value);\r\n\r\n  const [current, setCurrent] = useState(\"\");\r\n  const handleCurrentChange = (event) => setCurrent(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function creates a reservation based on the user input and then uses changeReservation() api call\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let participant_id;\r\n\r\n    let participant = {\r\n      data: {},\r\n    };\r\n\r\n    participant.data.first_name = firstName;\r\n    participant.data.last_name = lastName;\r\n    participant.data.dob = dob;\r\n    participant.data.current_participant = current;\r\n\r\n    //Make api call to update reservation\r\n    async function newParticipant(participant) {\r\n      try {\r\n        const response = await createParticipant(participant);\r\n        participant_id = response.participant_id;\r\n        console.log(\"Here is the response\", participant_id);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await newParticipant(participant);\r\n\r\n    alert(\"Participant Enrolled Successfully\");\r\n    //Go back to dashboard page\r\n    history.push(`/participants/${participant_id}/enrollNew`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Enroll New Participant</h1>\r\n      <ParticipantNewForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        dob={dob}\r\n        handleDobChange={handleDobChange}\r\n        current={current}\r\n        handleCurrentChange={handleCurrentChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default ParticipantNew;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollOld.js",["378","379","380","381","382","383","384","385","386"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport {\r\n  readReservation,\r\n  updateReservation,\r\n  readParticipant,\r\n  createInstance,\r\n} from \"../utils/api\";\r\nimport EnrollFormOld from \"./EnrollFormOld\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction EnrollOld({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [gender, setGender] = useState(\"\");\r\n  const handleGenderChange = (event) => setGender(event.target.value);\r\n\r\n  const [dob, setDob] = useState(\"\");\r\n  const handleDobChange = (event) => setDob(event.target.value);\r\n\r\n  const [homeCounty, setHomeCounty] = useState(\"\");\r\n  const handleHomeCountyChange = (event) => setHomeCounty(event.target.value);\r\n\r\n  const [incidentNum, setIncidentNum] = useState(null);\r\n  const handleIncidentNumChange = (event) => setIncidentNum(event.target.value);\r\n\r\n  const [incomeBefore, setIncomeBefore] = useState(\"\");\r\n  const handleIncomeBeforeChange = (event) =>\r\n    setIncomeBefore(event.target.value);\r\n\r\n  const [accountsPrior, setAccountsPrior] = useState(\"\");\r\n  const handleAccountsPriorChange = (event) =>\r\n    setAccountsPrior(event.target.value);\r\n\r\n  const [lastUseDate, setLastUseDate] = useState(\"\");\r\n  const handleLastUseChange = (event) => setLastUseDate(event.target.value);\r\n\r\n  const [yearsInside, setYearsInside] = useState(null);\r\n  const handleYearsInsideChange = (event) => setYearsInside(event.target.value);\r\n\r\n  const [sexOff, setSexOff] = useState(\"\");\r\n  const handleSexOffChange = (event) => setSexOff(event.target.value);\r\n\r\n  const [recentStayLength, setRecentStayLength] = useState(\"\");\r\n  const handleRecentStayLengthChange = (event) =>\r\n    setRecentStayLength(event.target.value);\r\n\r\n  const [drugChoice, setDrugChoice] = useState(\"\");\r\n  const handleDrugChoiceChange = (event) => setDrugChoice(event.target.value);\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const handleStartDateChange = (event) => setStartDate(event.target.value);\r\n\r\n  const [mat, setMat] = useState(\"\");\r\n  const handleMatChange = (event) => setMat(event.target.value);\r\n\r\n  const [tanf, setTanf] = useState(\"\");\r\n  const handleTanfChange = (event) => setTanf(event.target.value);\r\n\r\n  const [chargesDescr, setChargesDescr] = useState(\"\");\r\n  const handleChargesDescrChange = (event) =>\r\n    setChargesDescr(event.target.value);\r\n\r\n  const [copingLength, setCopingLength] = useState(\"\");\r\n  const handleCopingLengthChange = (event) =>\r\n    setCopingLength(event.target.value);\r\n\r\n  const [needsGed, setNeedsGed] = useState(\"\");\r\n  const handleNeedsGedChange = (event) => setNeedsGed(event.target.value);\r\n\r\n  const [employmentDetails, setEmploymentDetails] = useState(\"\");\r\n  const handleEmploymentDetailsChange = (event) =>\r\n    setEmploymentDetails(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function creates a reservation based on the user input and then uses changeReservation() api call\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let participant = {\r\n      data: {},\r\n    };\r\n\r\n    participant.data.first_name = firstName;\r\n    participant.data.last_name = lastName;\r\n    participant.data.gender = gender;\r\n    participant.data.birth_date = dob;\r\n    participant.data.home_county = homeCounty;\r\n    participant.data.incident_num = incidentNum;\r\n    participant.data.income_before_try = incomeBefore;\r\n    participant.data.accounts_before_try = accountsPrior;\r\n    participant.data.last_use_date = lastUseDate;\r\n    participant.data.years_inside = yearsInside;\r\n    participant.data.sex_offender = sexOff;\r\n    participant.data.recent_stay_length = recentStayLength;\r\n    participant.data.drug_of_choice = drugChoice;\r\n    participant.data.start_date = startDate;\r\n    participant.data.mat_entering_try = mat;\r\n    participant.data.tanf = tanf;\r\n    participant.data.charges = chargesDescr;\r\n    participant.data.coping_period_length = copingLength;\r\n    participant.data.needs_ged = needsGed;\r\n    participant.data.employment_status_entering = employmentDetails;\r\n\r\n    //Log participant\r\n    console.log(\"participant\", participant);\r\n\r\n    //Make api call to update reservation\r\n    async function newParticipant(participant) {\r\n      try {\r\n        const response = await createInstance(participant);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await newParticipant(participant);\r\n\r\n    alert(\"Participant Enrolled Successfully\");\r\n    //Go back to dashboard page\r\n    //history.push(`/participants/dashboard`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Enroll Participant</h1>\r\n      <EnrollFormOld\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        gender={gender}\r\n        handleGenderChange={handleGenderChange}\r\n        dob={dob}\r\n        handleDobChange={handleDobChange}\r\n        homeCounty={homeCounty}\r\n        handleHomeCountyChange={handleHomeCountyChange}\r\n        incidentNum={incidentNum}\r\n        handleIncidentNumChange={handleIncidentNumChange}\r\n        incomeBefore={incomeBefore}\r\n        handleIncomeBeforeChange={handleIncomeBeforeChange}\r\n        accountsPrior={accountsPrior}\r\n        handleAccountsPriorChange={handleAccountsPriorChange}\r\n        lastUseDate={lastUseDate}\r\n        handleLastUseChange={handleLastUseChange}\r\n        yearsInside={yearsInside}\r\n        handleYearsInsideChange={handleYearsInsideChange}\r\n        sexOff={sexOff}\r\n        handleSexOffChange={handleSexOffChange}\r\n        recentStayLength={recentStayLength}\r\n        handleRecentStayLengthChange={handleRecentStayLengthChange}\r\n        drugChoice={drugChoice}\r\n        handleDrugChoiceChange={handleDrugChoiceChange}\r\n        startDate={startDate}\r\n        handleStartDateChange={handleStartDateChange}\r\n        mat={mat}\r\n        handleMatChange={handleMatChange}\r\n        tanf={tanf}\r\n        handleTanfChange={handleTanfChange}\r\n        chargesDescr={chargesDescr}\r\n        handleChargesDescrChange={handleChargesDescrChange}\r\n        copingLength={copingLength}\r\n        handleCopingLengthChange={handleCopingLengthChange}\r\n        needsGed={needsGed}\r\n        handleNeedsGedChange={handleNeedsGedChange}\r\n        employmentDetails={employmentDetails}\r\n        handleEmploymentDetailsChange={handleEmploymentDetailsChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default EnrollOld;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollFormOld.js",["387","388"],"//The Seat Button is used to seat a reservation\r\n//The button will appear next to a reservation on the Dashboard\r\n//The two props are visibility and reservationId\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction EnrollFormOld({\r\n  firstName,\r\n  handleFirstNameChange,\r\n  lastName,\r\n  handleLastNameChange,\r\n  gender,\r\n  handleGenderChange,\r\n  dob,\r\n  handleDobChange,\r\n  homeCounty,\r\n  handleHomeCountyChange,\r\n  incidentNum,\r\n  handleIncidentNumChange,\r\n  incomeBefore,\r\n  handleIncomeBeforeChange,\r\n  accountsPrior,\r\n  handleAccountsPriorChange,\r\n  lastUseDate,\r\n  handleLastUseChange,\r\n  yearsInside,\r\n  handleYearsInsideChange,\r\n  sexOff,\r\n  handleSexOffChange,\r\n  recentStayLength,\r\n  handleRecentStayLengthChange,\r\n  drugChoice,\r\n  handleDrugChoiceChange,\r\n  startDate,\r\n  handleStartDateChange,\r\n  mat,\r\n  handleMatChange,\r\n  tanf,\r\n  handleTanfChange,\r\n  chargesDescr,\r\n  handleChargesDescrChange,\r\n  copingLength,\r\n  handleCopingLengthChange,\r\n  needsGed,\r\n  handleNeedsGedChange,\r\n  employmentDetails,\r\n  handleEmploymentDetailsChange,\r\n  handleSubmit,\r\n  handleCancel,\r\n}) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"first_name\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"first_name\"\r\n              className=\"form-control\"\r\n              id=\"first_name\"\r\n              aria-describedby=\"emailHelp\"\r\n              onChange={handleFirstNameChange}\r\n              value={firstName}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"last_name\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"last_name\"\r\n              className=\"form-control\"\r\n              id=\"last_name\"\r\n              onChange={handleLastNameChange}\r\n              value={lastName}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"gender\">Gender</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"gender\"\r\n              className=\"form-control\"\r\n              id=\"gender\"\r\n              onChange={handleGenderChange}\r\n              value={gender}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"dob\">Date of Birth</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"dob\"\r\n              className=\"form-control\"\r\n              id=\"dob\"\r\n              onChange={handleDobChange}\r\n              value={dob}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"home_county\">Home County</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"home_county\"\r\n              className=\"form-control\"\r\n              id=\"home_county\"\r\n              onChange={handleHomeCountyChange}\r\n              value={homeCounty}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"incident_num\">Incident Number</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"incident_num\"\r\n              className=\"form-control\"\r\n              id=\"incident_num\"\r\n              onChange={handleIncidentNumChange}\r\n              value={incidentNum}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"income_before\">Income Before Entering TRY</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"income_before\"\r\n              className=\"form-control\"\r\n              id=\"income_before\"\r\n              onChange={handleIncomeBeforeChange}\r\n              value={incomeBefore}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"accounts_prior\">Had Accounts Before TRY?</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"accounts_prior\"\r\n              className=\"form-control\"\r\n              id=\"accounts_prior\"\r\n              onChange={handleAccountsPriorChange}\r\n              value={accountsPrior}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"last_use_date\">Last Use Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"last_use_date\"\r\n              className=\"form-control\"\r\n              id=\"last_use_date\"\r\n              onChange={handleLastUseChange}\r\n              value={lastUseDate}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"years_inside\">Years on the Inside</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"years_inside\"\r\n              className=\"form-control\"\r\n              id=\"years_inside\"\r\n              onChange={handleYearsInsideChange}\r\n              value={yearsInside}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"sex_offender\">Sex Offender?</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"sex_offender\"\r\n              className=\"form-control\"\r\n              id=\"sex_offender\"\r\n              onChange={handleSexOffChange}\r\n              value={sexOff}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"recent_length\">Recent Stay Length</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"recent_length\"\r\n              className=\"form-control\"\r\n              id=\"recent_length\"\r\n              onChange={handleRecentStayLengthChange}\r\n              value={recentStayLength}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"drug_of_choice\">Drug of Choice?</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"drug_of_choice\"\r\n              className=\"form-control\"\r\n              id=\"drug_of_choice\"\r\n              onChange={handleDrugChoiceChange}\r\n              value={drugChoice}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"start_date\">Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"start_date\"\r\n              className=\"form-control\"\r\n              id=\"start_date\"\r\n              onChange={handleStartDateChange}\r\n              value={startDate}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"mat\">MAT</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"mat\"\r\n              className=\"form-control\"\r\n              id=\"mat\"\r\n              onChange={handleMatChange}\r\n              value={mat}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"tanf\">TANF</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"tanf\"\r\n              className=\"form-control\"\r\n              id=\"tanf\"\r\n              onChange={handleTanfChange}\r\n              value={tanf}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"charges_descr\">Charges Description:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"charges_descr\"\r\n              className=\"form-control\"\r\n              id=\"charges_descr\"\r\n              onChange={handleChargesDescrChange}\r\n              value={chargesDescr}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"coping_length\">Coping Length:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"coping_length\"\r\n              className=\"form-control\"\r\n              id=\"coping_length\"\r\n              onChange={handleCopingLengthChange}\r\n              value={copingLength}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"needs_ged\">Needs GED?:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"needs_ged\"\r\n              className=\"form-control\"\r\n              id=\"needs_ged\"\r\n              onChange={handleNeedsGedChange}\r\n              value={needsGed}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"employment_details\">Employment Details:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"employment_details\"\r\n              className=\"form-control\"\r\n              id=\"employment_details\"\r\n              onChange={handleEmploymentDetailsChange}\r\n              value={employmentDetails}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Submit\r\n      </button>{\" \"}\r\n      <Link to={`/participants/dashboard`}>\r\n        <button type=\"cancel\" className=\"btn btn-primary\">\r\n          Return to Dashboard\r\n        </button>\r\n      </Link>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default EnrollFormOld;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantNewForm.js",["389","390"],"//The Seat Button is used to seat a reservation\r\n//The button will appear next to a reservation on the Dashboard\r\n//The two props are visibility and reservationId\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction ParticipantNewForm({\r\n  firstName,\r\n  handleFirstNameChange,\r\n  lastName,\r\n  handleLastNameChange,\r\n  dob,\r\n  handleDobChange,\r\n  current,\r\n  handleCurrentChange,\r\n  handleSubmit,\r\n  handleCancel,\r\n}) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"first_name\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"first_name\"\r\n              className=\"form-control\"\r\n              id=\"first_name\"\r\n              aria-describedby=\"emailHelp\"\r\n              onChange={handleFirstNameChange}\r\n              value={firstName}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"last_name\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"last_name\"\r\n              className=\"form-control\"\r\n              id=\"last_name\"\r\n              onChange={handleLastNameChange}\r\n              value={lastName}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"dob\">Date of Birth</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"dob\"\r\n              className=\"form-control\"\r\n              id=\"dob\"\r\n              onChange={handleDobChange}\r\n              value={dob}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"current\">Currently in Program?</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"current\"\r\n              className=\"form-control\"\r\n              id=\"current\"\r\n              onChange={handleCurrentChange}\r\n              value={current}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Submit\r\n      </button>{\" \"}\r\n      <Link to={`/participants/dashboard`}>\r\n        <button type=\"cancel\" className=\"btn btn-primary\">\r\n          Return to Dashboard\r\n        </button>\r\n      </Link>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ParticipantNewForm;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollSearch.js",["391"],"//The SearchResults component is used to show the results from the search for reservations by phone number\r\n//It is used on the Search component\r\n\r\nimport React from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nfunction EnrollSearch({ visibility, last_name, participants }) {\r\n  //Create table rows of the reservations to display in the search results\r\n  //Use the reservations state array to create the arrows.\r\n  const participantLinks = participants.map((participant) => {\r\n    let dobString = \"\";\r\n    if (participant.dob) dobString = participant.dob.substring(0, 10);\r\n\r\n    return (\r\n      <tr key={participant.participant_id}>\r\n        <td>{participant.first_name}</td>\r\n        <td>{participant.last_name}</td>\r\n        <td>{dobString}</td>\r\n        <td>{participant.current_participant}</td>\r\n        <Link to={`/participants/${participant.participant_id}/enrollNew`}>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            style={{ margin: \"5px\" }}\r\n          >\r\n            Re-enroll\r\n          </button>\r\n        </Link>{\" \"}\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  if (visibility !== null) {\r\n    if (participants.length === 0) {\r\n      return (\r\n        <div>\r\n          <h1>No participants found</h1>\r\n        </div>\r\n      );\r\n    } else {\r\n      //Return the results as a table\r\n      return (\r\n        <div>\r\n          <h1>Instances found for {last_name}</h1>\r\n          <table class=\"table\">\r\n            <th>First Name</th>\r\n            <th>Last Name</th>\r\n            <th>Date of Birth</th>\r\n            <th>Current Participant</th>\r\n            {participantLinks}\r\n          </table>\r\n        </div>\r\n      );\r\n    }\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default EnrollSearch;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\NewInstance.js",["392","393","394","395","396","397"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readInstance, createInstance } from \"../utils/api\";\r\nimport EnrollFormOld from \"./EnrollFormOld\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction NewInstance({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [participantId, setParticipantId] = useState(\"\");\r\n  const handleParticipantIdChange = (event) =>\r\n    setParticipantId(event.target.value);\r\n\r\n  const [gender, setGender] = useState(\"\");\r\n  const handleGenderChange = (event) => setGender(event.target.value);\r\n\r\n  const [dob, setDob] = useState(\"\");\r\n  const handleDobChange = (event) => setDob(event.target.value);\r\n\r\n  const [homeCounty, setHomeCounty] = useState(\"\");\r\n  const handleHomeCountyChange = (event) => setHomeCounty(event.target.value);\r\n\r\n  const [incidentNum, setIncidentNum] = useState(null);\r\n  const handleIncidentNumChange = (event) => setIncidentNum(event.target.value);\r\n\r\n  const [incomeBefore, setIncomeBefore] = useState(\"\");\r\n  const handleIncomeBeforeChange = (event) =>\r\n    setIncomeBefore(event.target.value);\r\n\r\n  const [accountsPrior, setAccountsPrior] = useState(\"\");\r\n  const handleAccountsPriorChange = (event) =>\r\n    setAccountsPrior(event.target.value);\r\n\r\n  const [lastUseDate, setLastUseDate] = useState(\"\");\r\n  const handleLastUseChange = (event) => setLastUseDate(event.target.value);\r\n\r\n  const [yearsInside, setYearsInside] = useState(null);\r\n  const handleYearsInsideChange = (event) => setYearsInside(event.target.value);\r\n\r\n  const [sexOff, setSexOff] = useState(\"\");\r\n  const handleSexOffChange = (event) => setSexOff(event.target.value);\r\n\r\n  const [recentStayLength, setRecentStayLength] = useState(\"\");\r\n  const handleRecentStayLengthChange = (event) =>\r\n    setRecentStayLength(event.target.value);\r\n\r\n  const [drugChoice, setDrugChoice] = useState(\"\");\r\n  const handleDrugChoiceChange = (event) => setDrugChoice(event.target.value);\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const handleStartDateChange = (event) => setStartDate(event.target.value);\r\n\r\n  const [mat, setMat] = useState(\"\");\r\n  const handleMatChange = (event) => setMat(event.target.value);\r\n\r\n  const [tanf, setTanf] = useState(\"\");\r\n  const handleTanfChange = (event) => setTanf(event.target.value);\r\n\r\n  const [chargesDescr, setChargesDescr] = useState(\"\");\r\n  const handleChargesDescrChange = (event) =>\r\n    setChargesDescr(event.target.value);\r\n\r\n  const [copingLength, setCopingLength] = useState(\"\");\r\n  const handleCopingLengthChange = (event) =>\r\n    setCopingLength(event.target.value);\r\n\r\n  const [needsGed, setNeedsGed] = useState(\"\");\r\n  const handleNeedsGedChange = (event) => setNeedsGed(event.target.value);\r\n\r\n  const [employmentDetails, setEmploymentDetails] = useState(\"\");\r\n  const handleEmploymentDetailsChange = (event) =>\r\n    setEmploymentDetails(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Get instanceId from url\r\n  let { instanceId } = useParams();\r\n\r\n  //Make an API Call to get the instance based on the instance_id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setParticipantId(response.participant_id);\r\n      setGender(response.gender);\r\n      setDob(response.birth_date.substring(0, 10));\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function creates a reservation based on the user input and then uses changeReservation() api call\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let participant = {\r\n      data: {},\r\n    };\r\n\r\n    participant.data.participant_id = participantId;\r\n    participant.data.first_name = firstName;\r\n    participant.data.last_name = lastName;\r\n    participant.data.gender = gender;\r\n    participant.data.birth_date = dob;\r\n    participant.data.home_county = homeCounty;\r\n    participant.data.incident_num = incidentNum;\r\n    participant.data.income_before_try = incomeBefore;\r\n    participant.data.accounts_before_try = accountsPrior;\r\n    participant.data.last_use_date = lastUseDate;\r\n    participant.data.years_inside = yearsInside;\r\n    participant.data.sex_offender = sexOff;\r\n    participant.data.recent_stay_length = recentStayLength;\r\n    participant.data.drug_of_choice = drugChoice;\r\n    participant.data.start_date = startDate;\r\n    participant.data.mat_entering_try = mat;\r\n    participant.data.tanf = tanf;\r\n    participant.data.charges = chargesDescr;\r\n    participant.data.coping_period_length = copingLength;\r\n    participant.data.needs_ged = needsGed;\r\n    participant.data.employment_status_entering = employmentDetails;\r\n\r\n    //Log participant\r\n    console.log(\"participant\", participant);\r\n\r\n    //Make api call to update reservation\r\n    async function newParticipant(participant) {\r\n      try {\r\n        const response = await createInstance(participant);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await newParticipant(participant);\r\n\r\n    alert(\"Participant Enrolled Successfully\");\r\n\r\n    //Go back to dashboard page\r\n    //history.push(`/participants/dashboard`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    //history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Edit Participant</h1>\r\n      <EnrollFormOld\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        gender={gender}\r\n        handleGenderChange={handleGenderChange}\r\n        dob={dob}\r\n        handleDobChange={handleDobChange}\r\n        homeCounty={homeCounty}\r\n        handleHomeCountyChange={handleHomeCountyChange}\r\n        incidentNum={incidentNum}\r\n        handleIncidentNumChange={handleIncidentNumChange}\r\n        incomeBefore={incomeBefore}\r\n        handleIncomeBeforeChange={handleIncomeBeforeChange}\r\n        accountsPrior={accountsPrior}\r\n        handleAccountsPriorChange={handleAccountsPriorChange}\r\n        lastUseDate={lastUseDate}\r\n        handleLastUseChange={handleLastUseChange}\r\n        yearsInside={yearsInside}\r\n        handleYearsInsideChange={handleYearsInsideChange}\r\n        sexOff={sexOff}\r\n        handleSexOffChange={handleSexOffChange}\r\n        recentStayLength={recentStayLength}\r\n        handleRecentStayLengthChange={handleRecentStayLengthChange}\r\n        drugChoice={drugChoice}\r\n        handleDrugChoiceChange={handleDrugChoiceChange}\r\n        startDate={startDate}\r\n        handleStartDateChange={handleStartDateChange}\r\n        mat={mat}\r\n        handleMatChange={handleMatChange}\r\n        tanf={tanf}\r\n        handleTanfChange={handleTanfChange}\r\n        chargesDescr={chargesDescr}\r\n        handleChargesDescrChange={handleChargesDescrChange}\r\n        copingLength={copingLength}\r\n        handleCopingLengthChange={handleCopingLengthChange}\r\n        needsGed={needsGed}\r\n        handleNeedsGedChange={handleNeedsGedChange}\r\n        employmentDetails={employmentDetails}\r\n        handleEmploymentDetailsChange={handleEmploymentDetailsChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default NewInstance;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EditInstance.js",["398","399","400","401","402","403","404","405","406"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport {\r\n  readReservation,\r\n  updateReservation,\r\n  readParticipant,\r\n  createParticipant,\r\n  readInstance,\r\n  updateInstance,\r\n} from \"../utils/api\";\r\nimport EnrollFormOld from \"./EnrollFormOld\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction EditInstance({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [gender, setGender] = useState(\"\");\r\n  const handleGenderChange = (event) => setGender(event.target.value);\r\n\r\n  const [dob, setDob] = useState(\"\");\r\n  const handleDobChange = (event) => setDob(event.target.value);\r\n\r\n  const [homeCounty, setHomeCounty] = useState(\"\");\r\n  const handleHomeCountyChange = (event) => setHomeCounty(event.target.value);\r\n\r\n  const [incidentNum, setIncidentNum] = useState(null);\r\n  const handleIncidentNumChange = (event) => setIncidentNum(event.target.value);\r\n\r\n  const [incomeBefore, setIncomeBefore] = useState(\"\");\r\n  const handleIncomeBeforeChange = (event) =>\r\n    setIncomeBefore(event.target.value);\r\n\r\n  const [accountsPrior, setAccountsPrior] = useState(\"\");\r\n  const handleAccountsPriorChange = (event) =>\r\n    setAccountsPrior(event.target.value);\r\n\r\n  const [lastUseDate, setLastUseDate] = useState(\"\");\r\n  const handleLastUseChange = (event) => setLastUseDate(event.target.value);\r\n\r\n  const [yearsInside, setYearsInside] = useState(null);\r\n  const handleYearsInsideChange = (event) => setYearsInside(event.target.value);\r\n\r\n  const [sexOff, setSexOff] = useState(\"\");\r\n  const handleSexOffChange = (event) => setSexOff(event.target.value);\r\n\r\n  const [recentStayLength, setRecentStayLength] = useState(\"\");\r\n  const handleRecentStayLengthChange = (event) =>\r\n    setRecentStayLength(event.target.value);\r\n\r\n  const [drugChoice, setDrugChoice] = useState(\"\");\r\n  const handleDrugChoiceChange = (event) => setDrugChoice(event.target.value);\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const handleStartDateChange = (event) => setStartDate(event.target.value);\r\n\r\n  const [mat, setMat] = useState(\"\");\r\n  const handleMatChange = (event) => setMat(event.target.value);\r\n\r\n  const [tanf, setTanf] = useState(\"\");\r\n  const handleTanfChange = (event) => setTanf(event.target.value);\r\n\r\n  const [chargesDescr, setChargesDescr] = useState(\"\");\r\n  const handleChargesDescrChange = (event) =>\r\n    setChargesDescr(event.target.value);\r\n\r\n  const [copingLength, setCopingLength] = useState(\"\");\r\n  const handleCopingLengthChange = (event) =>\r\n    setCopingLength(event.target.value);\r\n\r\n  const [needsGed, setNeedsGed] = useState(\"\");\r\n  const handleNeedsGedChange = (event) => setNeedsGed(event.target.value);\r\n\r\n  const [employmentDetails, setEmploymentDetails] = useState(\"\");\r\n  const handleEmploymentDetailsChange = (event) =>\r\n    setEmploymentDetails(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Get instanceId from url\r\n  let { instanceId } = useParams();\r\n\r\n  //Make an API Call to get the instance based on the instance_id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setGender(response.gender);\r\n      setDob(response.birth_date.substring(0, 10));\r\n      setHomeCounty(response.has_checking);\r\n      setIncidentNum(response.incident_num);\r\n      setIncomeBefore(response.has_license);\r\n      setAccountsPrior(response.accounts_before_try);\r\n      setLastUseDate(response.last_use_date.substring(0, 10));\r\n      setYearsInside(response.years_inside);\r\n      setSexOff(response.sex_offender);\r\n      setRecentStayLength(response.recent_stay_length);\r\n      setDrugChoice(response.drug_of_choice);\r\n      setStartDate(response.start_date.substring(0, 10));\r\n      setMat(response.mat_entering_try);\r\n      setTanf(response.tanf);\r\n      setChargesDescr(response.charges);\r\n      setCopingLength(response.coping_period_length);\r\n      setNeedsGed(response.needs_ged);\r\n      setEmploymentDetails(response.employment_status_entering);\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function creates a reservation based on the user input and then uses changeReservation() api call\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let participant = {\r\n      data: {},\r\n    };\r\n\r\n    participant.data.instance_id = instanceId;\r\n    participant.data.first_name = firstName;\r\n    participant.data.last_name = lastName;\r\n    participant.data.gender = gender;\r\n    participant.data.birth_date = dob;\r\n    participant.data.home_county = homeCounty;\r\n    participant.data.incident_num = incidentNum;\r\n    participant.data.income_before_try = incomeBefore;\r\n    participant.data.accounts_before_try = accountsPrior;\r\n    participant.data.last_use_date = lastUseDate;\r\n    participant.data.years_inside = yearsInside;\r\n    participant.data.sex_offender = sexOff;\r\n    participant.data.recent_stay_length = recentStayLength;\r\n    participant.data.drug_of_choice = drugChoice;\r\n    participant.data.start_date = startDate;\r\n    participant.data.mat_entering_try = mat;\r\n    participant.data.tanf = tanf;\r\n    participant.data.charges = chargesDescr;\r\n    participant.data.coping_period_length = copingLength;\r\n    participant.data.needs_ged = needsGed;\r\n    participant.data.employment_status_entering = employmentDetails;\r\n\r\n    //Log participant\r\n    console.log(\"participant\", participant);\r\n\r\n    //Make api call to update reservation\r\n    async function updateParticipant(participant) {\r\n      try {\r\n        const response = await updateInstance(participant);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await updateParticipant(participant);\r\n\r\n    alert(\"Participant Info Updated Successfully\");\r\n\r\n    //Go back to dashboard page\r\n    //history.push(`/participants/dashboard`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    //history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Edit Participant</h1>\r\n      <EnrollFormOld\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        gender={gender}\r\n        handleGenderChange={handleGenderChange}\r\n        dob={dob}\r\n        handleDobChange={handleDobChange}\r\n        homeCounty={homeCounty}\r\n        handleHomeCountyChange={handleHomeCountyChange}\r\n        incidentNum={incidentNum}\r\n        handleIncidentNumChange={handleIncidentNumChange}\r\n        incomeBefore={incomeBefore}\r\n        handleIncomeBeforeChange={handleIncomeBeforeChange}\r\n        accountsPrior={accountsPrior}\r\n        handleAccountsPriorChange={handleAccountsPriorChange}\r\n        lastUseDate={lastUseDate}\r\n        handleLastUseChange={handleLastUseChange}\r\n        yearsInside={yearsInside}\r\n        handleYearsInsideChange={handleYearsInsideChange}\r\n        sexOff={sexOff}\r\n        handleSexOffChange={handleSexOffChange}\r\n        recentStayLength={recentStayLength}\r\n        handleRecentStayLengthChange={handleRecentStayLengthChange}\r\n        drugChoice={drugChoice}\r\n        handleDrugChoiceChange={handleDrugChoiceChange}\r\n        startDate={startDate}\r\n        handleStartDateChange={handleStartDateChange}\r\n        mat={mat}\r\n        handleMatChange={handleMatChange}\r\n        tanf={tanf}\r\n        handleTanfChange={handleTanfChange}\r\n        chargesDescr={chargesDescr}\r\n        handleChargesDescrChange={handleChargesDescrChange}\r\n        copingLength={copingLength}\r\n        handleCopingLengthChange={handleCopingLengthChange}\r\n        needsGed={needsGed}\r\n        handleNeedsGedChange={handleNeedsGedChange}\r\n        employmentDetails={employmentDetails}\r\n        handleEmploymentDetailsChange={handleEmploymentDetailsChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default EditInstance;\r\n",["407","408"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollHome.js",["409","410","411"],"import React, { useEffect, useState } from \"react\";\r\nimport EnrollSearch from \"./EnrollSearch\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { listParticipants } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction EnrollHome({ date }) {\r\n  //Create the phone nubmer state variable and add event listeners\r\n  const [last_name, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n  const [visibilityStatus, setVisibilityStatus] = useState(null);\r\n  const [participants, setParticipants] = useState([]);\r\n  const [participantsError, setParticipantsError] = useState(null);\r\n\r\n  //UseEffect is used to get the reservations\r\n  useEffect(loadDashboard, [last_name]);\r\n\r\n  //Load all of the reservations filtered by phone number\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setParticipantsError(null);\r\n    console.log(\"last_name\", last_name);\r\n\r\n    listParticipants({ last_name }, abortController.signal)\r\n      .then((response) => {\r\n        setParticipants(response);\r\n        console.log(\"participants\", response);\r\n      })\r\n      .catch(setParticipantsError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //The handleSubmit function merely shows the search results\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    loadDashboard();\r\n    setVisibilityStatus(true);\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage1\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  //Return the form to enter the phone number and show the results\r\n  return (\r\n    <main>\r\n      <h1>Enroll Participants</h1>\r\n      <br />\r\n      <h3>Enter New Participant</h3>\r\n      <Link to={`/participants/createParticipant`}>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Create New Participant\r\n        </button>\r\n      </Link>\r\n      <br></br>\r\n      <br />\r\n      <h3>Lookup Participants</h3>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"last_name\">Enter a Participant's Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            className=\"form-control\"\r\n            id=\"last_name\"\r\n            onChange={handleLastNameChange}\r\n            value={last_name}\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Find\r\n        </button>\r\n      </form>\r\n      <div>\r\n        <EnrollSearch\r\n          visibility={visibilityStatus}\r\n          last_name={last_name}\r\n          participants={participants}\r\n        />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default EnrollHome;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollNew.js",["412","413","414","415","416","417"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport {\r\n  readReservation,\r\n  updateReservation,\r\n  readParticipant,\r\n  createInstance,\r\n} from \"../utils/api\";\r\nimport EnrollFormOld from \"./EnrollFormOld\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction EnrollNew({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [gender, setGender] = useState(\"\");\r\n  const handleGenderChange = (event) => setGender(event.target.value);\r\n\r\n  const [dob, setDob] = useState(\"\");\r\n  const handleDobChange = (event) => setDob(event.target.value);\r\n\r\n  const [homeCounty, setHomeCounty] = useState(\"\");\r\n  const handleHomeCountyChange = (event) => setHomeCounty(event.target.value);\r\n\r\n  const [incidentNum, setIncidentNum] = useState(null);\r\n  const handleIncidentNumChange = (event) => setIncidentNum(event.target.value);\r\n\r\n  const [incomeBefore, setIncomeBefore] = useState(\"\");\r\n  const handleIncomeBeforeChange = (event) =>\r\n    setIncomeBefore(event.target.value);\r\n\r\n  const [accountsPrior, setAccountsPrior] = useState(\"\");\r\n  const handleAccountsPriorChange = (event) =>\r\n    setAccountsPrior(event.target.value);\r\n\r\n  const [lastUseDate, setLastUseDate] = useState(\"\");\r\n  const handleLastUseChange = (event) => setLastUseDate(event.target.value);\r\n\r\n  const [yearsInside, setYearsInside] = useState(null);\r\n  const handleYearsInsideChange = (event) => setYearsInside(event.target.value);\r\n\r\n  const [sexOff, setSexOff] = useState(\"\");\r\n  const handleSexOffChange = (event) => setSexOff(event.target.value);\r\n\r\n  const [recentStayLength, setRecentStayLength] = useState(\"\");\r\n  const handleRecentStayLengthChange = (event) =>\r\n    setRecentStayLength(event.target.value);\r\n\r\n  const [drugChoice, setDrugChoice] = useState(\"\");\r\n  const handleDrugChoiceChange = (event) => setDrugChoice(event.target.value);\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const handleStartDateChange = (event) => setStartDate(event.target.value);\r\n\r\n  const [mat, setMat] = useState(\"\");\r\n  const handleMatChange = (event) => setMat(event.target.value);\r\n\r\n  const [tanf, setTanf] = useState(\"\");\r\n  const handleTanfChange = (event) => setTanf(event.target.value);\r\n\r\n  const [chargesDescr, setChargesDescr] = useState(\"\");\r\n  const handleChargesDescrChange = (event) =>\r\n    setChargesDescr(event.target.value);\r\n\r\n  const [copingLength, setCopingLength] = useState(\"\");\r\n  const handleCopingLengthChange = (event) =>\r\n    setCopingLength(event.target.value);\r\n\r\n  const [needsGed, setNeedsGed] = useState(\"\");\r\n  const handleNeedsGedChange = (event) => setNeedsGed(event.target.value);\r\n\r\n  const [employmentDetails, setEmploymentDetails] = useState(\"\");\r\n  const handleEmploymentDetailsChange = (event) =>\r\n    setEmploymentDetails(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Get participantId from url\r\n  const { participantId } = useParams();\r\n  const participant_id = participantId;\r\n  console.log(\"instance id\", participant_id);\r\n\r\n  //Load participant\r\n  //Make an API Call to get the participant on the participant_id\r\n  useEffect(() => {\r\n    async function getParticipant(participantId) {\r\n      const response = await readParticipant(participantId);\r\n\r\n      let dobString = response.dob.substring(0, 10);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setDob(dobString);\r\n    }\r\n    getParticipant(participantId);\r\n  }, [participantId]);\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function creates a reservation based on the user input and then uses changeReservation() api call\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let participant = {\r\n      data: {},\r\n    };\r\n\r\n    participant.data.participant_id = participantId;\r\n    participant.data.first_name = firstName;\r\n    participant.data.last_name = lastName;\r\n    participant.data.gender = gender;\r\n    participant.data.birth_date = dob;\r\n    participant.data.home_county = homeCounty;\r\n    participant.data.incident_num = incidentNum;\r\n    participant.data.income_before_try = incomeBefore;\r\n    participant.data.accounts_before_try = accountsPrior;\r\n    participant.data.last_use_date = lastUseDate;\r\n    participant.data.years_inside = yearsInside;\r\n    participant.data.sex_offender = sexOff;\r\n    participant.data.recent_stay_length = recentStayLength;\r\n    participant.data.drug_of_choice = drugChoice;\r\n    participant.data.start_date = startDate;\r\n    participant.data.mat_entering_try = mat;\r\n    participant.data.tanf = tanf;\r\n    participant.data.charges = chargesDescr;\r\n    participant.data.coping_period_length = copingLength;\r\n    participant.data.needs_ged = needsGed;\r\n    participant.data.employment_status_entering = employmentDetails;\r\n\r\n    //Log participant\r\n    console.log(\"participant\", participant);\r\n\r\n    //Make api call to update reservation\r\n    async function newParticipant(participant) {\r\n      try {\r\n        const response = await createInstance(participant);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await newParticipant(participant);\r\n\r\n    alert(\"Participant Enrolled Successfully\");\r\n    //Go back to dashboard page\r\n    //history.push(`/participants/dashboard`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Enroll Participant</h1>\r\n      <EnrollFormOld\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        gender={gender}\r\n        handleGenderChange={handleGenderChange}\r\n        dob={dob}\r\n        handleDobChange={handleDobChange}\r\n        homeCounty={homeCounty}\r\n        handleHomeCountyChange={handleHomeCountyChange}\r\n        incidentNum={incidentNum}\r\n        handleIncidentNumChange={handleIncidentNumChange}\r\n        incomeBefore={incomeBefore}\r\n        handleIncomeBeforeChange={handleIncomeBeforeChange}\r\n        accountsPrior={accountsPrior}\r\n        handleAccountsPriorChange={handleAccountsPriorChange}\r\n        lastUseDate={lastUseDate}\r\n        handleLastUseChange={handleLastUseChange}\r\n        yearsInside={yearsInside}\r\n        handleYearsInsideChange={handleYearsInsideChange}\r\n        sexOff={sexOff}\r\n        handleSexOffChange={handleSexOffChange}\r\n        recentStayLength={recentStayLength}\r\n        handleRecentStayLengthChange={handleRecentStayLengthChange}\r\n        drugChoice={drugChoice}\r\n        handleDrugChoiceChange={handleDrugChoiceChange}\r\n        startDate={startDate}\r\n        handleStartDateChange={handleStartDateChange}\r\n        mat={mat}\r\n        handleMatChange={handleMatChange}\r\n        tanf={tanf}\r\n        handleTanfChange={handleTanfChange}\r\n        chargesDescr={chargesDescr}\r\n        handleChargesDescrChange={handleChargesDescrChange}\r\n        copingLength={copingLength}\r\n        handleCopingLengthChange={handleCopingLengthChange}\r\n        needsGed={needsGed}\r\n        handleNeedsGedChange={handleNeedsGedChange}\r\n        employmentDetails={employmentDetails}\r\n        handleEmploymentDetailsChange={handleEmploymentDetailsChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default EnrollNew;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\dashboard\\RecPrevInstances.js",["418","419","420","421","422","423","424","425","426","427"],"//The main functions of the Dashboard component are to display all of the reservations\r\n//and allow the user to seat, edit, or cancel reservations and to display all of the\r\n//tables and allow the user to finish the tables\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { listInstances } from \"../utils/api\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction RecPrevInstances({ date }) {\r\n  //The main state variables are reservations and tables which are arrays to be displayed\r\n  let [instances, setInstances] = useState([]);\r\n  const [instancesError, setInstancesError] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [day, setDay] = useState(\"\");\r\n  const [month, setMonth] = useState(\"\");\r\n  const [year, setYear] = useState(\"\");\r\n\r\n  //Declare an instance of the useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Get instanceId from url\r\n  const { participant_id } = useParams();\r\n  console.log(\"participant id\", participant_id);\r\n\r\n  //Use useEffect to load the reservations and the tables\r\n  //Load reservations\r\n  useEffect(loadDashboard, [day, month, year]);\r\n  function loadDashboard() {\r\n    console.log(\"trying\");\r\n    const abortController = new AbortController();\r\n    setInstancesError(null);\r\n\r\n    listInstances({ participant_id }, abortController.signal)\r\n      .then(setInstances)\r\n      .catch(setInstancesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //Create table rows of reservations using the 'reservations' state array\r\n  const instanceLinks = instances.map((instance) => {\r\n    let startDateString = instance.start_date.substring(0, 10);\r\n    let dischargeDateString = \"\";\r\n    if (instance.discharge_date)\r\n      dischargeDateString = instance.discharge_date.substring(0, 10);\r\n    let checkDateString = null;\r\n    if (instance.next_check_date)\r\n      checkDateString = instance.next_check_date.substring(0, 10);\r\n\r\n    return (\r\n      <tr key={instance.instance_id} style={{ padding: \"15px\" }}>\r\n        <td>{instance.instance_id}</td>\r\n        <td>{instance.first_name}</td>\r\n        <td>{instance.last_name}</td>\r\n        <td>{startDateString}</td>\r\n        <td>{dischargeDateString}</td>\r\n        <td>{checkDateString}</td>\r\n        <td>{instance[\"1_YR_Fed\"]}</td>\r\n        <td>{instance[\"1_YR_State\"]}</td>\r\n        <td>{instance[\"2_YR_Fed\"]}</td>\r\n        <td>{instance[\"2_YR_State\"]}</td>\r\n        <td>{instance[\"3_YR_Fed\"]}</td>\r\n        <td>{instance[\"3_YR_State\"]}</td>\r\n        <td>{instance[\"4_YR_Fed\"]}</td>\r\n        <td>{instance[\"4_YR_State\"]}</td>\r\n        <td>{instance[\"5_YR_Fed\"]}</td>\r\n        <td>{instance[\"5_YR_State\"]}</td>\r\n        <td>\r\n          <Link to={`/participants/${instance.instance_id}/rec_check`}>\r\n            <button\r\n              type=\"button\"\r\n              class=\"btn btn-primary\"\r\n              style={{ margin: \"5px\" }}\r\n            >\r\n              Perform Check\r\n            </button>\r\n          </Link>{\" \"}\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  //Return the html code for the reservations and the tables\r\n  return (\r\n    <main>\r\n      <h1>View Previous Instances</h1>\r\n      <br />\r\n      <Link to={`/participants/rec_dashboard`}>\r\n        <button type=\"button\" class=\"btn btn-primary\" style={{ margin: \"5px\" }}>\r\n          Return to Recidivism Dashboard\r\n        </button>{\" \"}\r\n      </Link>\r\n      <br />\r\n      <br />\r\n      <table class=\"table table-sm\">\r\n        <tr>\r\n          <th>Instance ID</th> <th>First Name</th> <th>Last Name</th>\r\n          <th>Start Date</th> <th>Discharge Date</th> <th>Next Check Date</th>\r\n          <th>1 YR Fed</th>\r\n          <th>1 YR State</th>\r\n          <th>2 YR Fed</th>\r\n          <th>2 YR State</th>\r\n          <th>3 YR Fed</th>\r\n          <th>3 YR State</th>\r\n          <th>4 YR Fed</th>\r\n          <th>4 YR State</th>\r\n          <th>5 YR Fed</th>\r\n          <th>5 YR State</th>\r\n          <th></th>\r\n        </tr>\r\n\r\n        {instanceLinks}\r\n      </table>\r\n      <br />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default RecPrevInstances;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\DischargeParticipant.js",["428","429","430","431","432","433"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport {\r\n  readInstance,\r\n  updateInstance,\r\n  readParticipant,\r\n  createInstance,\r\n} from \"../utils/api\";\r\nimport DischargeForm from \"./DischargeForm\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction DischargeParticipant({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const handleStartDateChange = (event) => setStartDate(event.target.value);\r\n\r\n  const [dischargeDate, setDischargeDate] = useState(\"\");\r\n  const handleDischargeDateChange = (event) =>\r\n    setDischargeDate(event.target.value);\r\n\r\n  const [dischargeReason, setDischargeReason] = useState(\"\");\r\n  const handleDischargeReasonChange = (event) =>\r\n    setDischargeReason(event.target.value);\r\n\r\n  const [gotChecking, setGotChecking] = useState(\"\");\r\n  const handleGotCheckingChange = (event) => setGotChecking(event.target.value);\r\n\r\n  const [gotLicense, setGotLicense] = useState(\"\");\r\n  const handleGotLicenseChange = (event) => setGotLicense(event.target.value);\r\n\r\n  const [gotSavings, setGotSavings] = useState(\"\");\r\n  const handleGotSavingsChange = (event) => setGotSavings(event.target.value);\r\n\r\n  const [programUtilization, setProgramUtilization] = useState(\"\");\r\n  const handleProgramUtilizationChange = (event) =>\r\n    setProgramUtilization(event.target.value);\r\n\r\n  const [housingTransition, setHousingTransition] = useState(\"\");\r\n  const handleHousingTransitionChange = (event) =>\r\n    setHousingTransition(event.target.value);\r\n\r\n  const [dischargeStatus, setDischargeStatus] = useState(\"\");\r\n  const handleDischargeStatusChange = (event) =>\r\n    setDischargeStatus(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Get participantId from url\r\n  const { instanceId } = useParams();\r\n  const instance_id = instanceId;\r\n  console.log(\"instance id\", instance_id);\r\n\r\n  //Load participant\r\n  //Make an API Call to get the participant on the participant_id\r\n\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n\r\n      let startDateString = response.start_date.substring(0, 10);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setStartDate(startDateString);\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function creates a reservation based on the user input and then uses changeReservation() api call\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let instance = {\r\n      data: {},\r\n    };\r\n\r\n    instance.data.instance_id = instanceId;\r\n    instance.data.discharge_date = dischargeDate;\r\n    instance.data.discharge_reason = dischargeReason;\r\n    instance.data.got_checking = gotChecking;\r\n    instance.data.got_license = gotLicense;\r\n    instance.data.got_savings = gotSavings;\r\n    instance.data.program_utilization = programUtilization;\r\n    instance.data.housing_transition = housingTransition;\r\n    instance.data.status_at_discharge = dischargeStatus;\r\n\r\n    //Log participant\r\n    console.log(\"instance\", instance);\r\n\r\n    //Make api call to update instance\r\n    async function updateDischargeInfo(updatedInstance) {\r\n      try {\r\n        const response = await updateInstance(updatedInstance);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await updateDischargeInfo(instance);\r\n\r\n    alert(\"Participant Discharged Successfully\");\r\n    //Go back to dashboard page\r\n    //history.push(`/participants/dashboard`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Discharge Participant</h1>\r\n      <DischargeForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        startDate={startDate}\r\n        handleStartDateChange={handleStartDateChange}\r\n        dischargeDate={dischargeDate}\r\n        handleDischargeDateChange={handleDischargeDateChange}\r\n        dischargeReason={dischargeReason}\r\n        handleDischargeReasonChange={handleDischargeReasonChange}\r\n        gotChecking={gotChecking}\r\n        handleGotCheckingChange={handleGotCheckingChange}\r\n        gotLicense={gotLicense}\r\n        handleGotLicenseChange={handleGotLicenseChange}\r\n        gotSavings={gotSavings}\r\n        handleGotSavingsChange={handleGotSavingsChange}\r\n        programUtilization={programUtilization}\r\n        handleProgramUtilizationChange={handleProgramUtilizationChange}\r\n        housingTransition={housingTransition}\r\n        handleHousingTransitionChange={handleHousingTransitionChange}\r\n        dischargeStatus={dischargeStatus}\r\n        handleDischargeStatusChange={handleDischargeStatusChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default DischargeParticipant;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\DischargeForm.js",["434","435"],"//The Seat Button is used to seat a reservation\r\n//The button will appear next to a reservation on the Dashboard\r\n//The two props are visibility and reservationId\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction DischargeForm({\r\n  firstName,\r\n  handleFirstNameChange,\r\n  lastName,\r\n  handleLastNameChange,\r\n  startDate,\r\n  handleStartDateChange,\r\n  dischargeDate,\r\n  handleDischargeDateChange,\r\n  dischargeReason,\r\n  handleDischargeReasonChange,\r\n  gotChecking,\r\n  handleGotCheckingChange,\r\n  gotLicense,\r\n  handleGotLicenseChange,\r\n  gotSavings,\r\n  handleGotSavingsChange,\r\n  programUtilization,\r\n  handleProgramUtilizationChange,\r\n  housingTransition,\r\n  handleHousingTransitionChange,\r\n  dischargeStatus,\r\n  handleDischargeStatusChange,\r\n  handleSubmit,\r\n  handleCancel,\r\n}) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"first_name\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"first_name\"\r\n              className=\"form-control\"\r\n              id=\"first_name\"\r\n              aria-describedby=\"emailHelp\"\r\n              onChange={handleFirstNameChange}\r\n              value={firstName}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"last_name\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"last_name\"\r\n              className=\"form-control\"\r\n              id=\"last_name\"\r\n              onChange={handleLastNameChange}\r\n              value={lastName}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"start_date\">Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"start_date\"\r\n              className=\"form-control\"\r\n              id=\"start_date\"\r\n              onChange={handleStartDateChange}\r\n              value={startDate}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"discharge_date\">Discharge Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"discharge_date\"\r\n              className=\"form-control\"\r\n              id=\"discharge_date\"\r\n              onChange={handleDischargeDateChange}\r\n              value={dischargeDate}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"discharge_reason\">Reason for Discharge</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"discharge_reason\"\r\n              className=\"form-control\"\r\n              id=\"discharge_reason\"\r\n              onChange={handleDischargeReasonChange}\r\n              value={dischargeReason}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"got_checking\">Got Checking Account</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"got_checking\"\r\n              className=\"form-control\"\r\n              id=\"got_checking\"\r\n              onChange={handleGotCheckingChange}\r\n              value={gotChecking}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"got_license\">Got Drivers License</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"got_license\"\r\n              className=\"form-control\"\r\n              id=\"got_license\"\r\n              onChange={handleGotLicenseChange}\r\n              value={gotLicense}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"got_savings\">Got Savings Account</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"got_savings\"\r\n              className=\"form-control\"\r\n              id=\"got_savings\"\r\n              onChange={handleGotSavingsChange}\r\n              value={gotSavings}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"program_utilization\">Program Utilization</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"program_utilization\"\r\n              className=\"form-control\"\r\n              id=\"program_utilization\"\r\n              onChange={handleProgramUtilizationChange}\r\n              value={programUtilization}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"housing_transition\">\r\n              Transitioned to Stable Housing?\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"housing_transition\"\r\n              className=\"form-control\"\r\n              id=\"housing_transition\"\r\n              onChange={handleHousingTransitionChange}\r\n              value={housingTransition}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"discharge_status\">Status at Discharge</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"discharge_status\"\r\n              className=\"form-control\"\r\n              id=\"discharge_status\"\r\n              onChange={handleDischargeStatusChange}\r\n              value={dischargeStatus}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\"></div>\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Submit\r\n      </button>{\" \"}\r\n      <Link to={`/participants/dashboard`}>\r\n        <button type=\"cancel\" className=\"btn btn-primary\">\r\n          Return to Dashboard\r\n        </button>\r\n      </Link>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default DischargeForm;\r\n",{"ruleId":"436","replacedBy":"437"},{"ruleId":"438","replacedBy":"439"},{"ruleId":"440","severity":1,"message":"441","line":17,"column":8,"nodeType":"442","messageId":"443","endLine":17,"endColumn":18},{"ruleId":"440","severity":1,"message":"444","line":28,"column":10,"nodeType":"442","messageId":"443","endLine":28,"endColumn":27},{"ruleId":"440","severity":1,"message":"445","line":30,"column":10,"nodeType":"442","messageId":"443","endLine":30,"endColumn":21},{"ruleId":"440","severity":1,"message":"446","line":34,"column":9,"nodeType":"442","messageId":"443","endLine":34,"endColumn":16},{"ruleId":"447","severity":1,"message":"448","line":38,"column":3,"nodeType":"449","messageId":"450","endLine":42,"endColumn":4},{"ruleId":"440","severity":1,"message":"451","line":122,"column":15,"nodeType":"442","messageId":"443","endLine":122,"endColumn":23},{"ruleId":"440","severity":1,"message":"451","line":166,"column":15,"nodeType":"442","messageId":"443","endLine":166,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":3,"column":8,"nodeType":"442","messageId":"443","endLine":3,"endColumn":18},{"ruleId":"440","severity":1,"message":"444","line":13,"column":10,"nodeType":"442","messageId":"443","endLine":13,"endColumn":27},{"ruleId":"440","severity":1,"message":"441","line":11,"column":8,"nodeType":"442","messageId":"443","endLine":11,"endColumn":18},{"ruleId":"440","severity":1,"message":"445","line":25,"column":10,"nodeType":"442","messageId":"443","endLine":25,"endColumn":21},{"ruleId":"452","severity":1,"message":"453","line":63,"column":25,"nodeType":"454","endLine":63,"endColumn":31,"suggestions":"455"},{"ruleId":"440","severity":1,"message":"451","line":118,"column":15,"nodeType":"442","messageId":"443","endLine":118,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":5,"column":8,"nodeType":"442","messageId":"443","endLine":5,"endColumn":18},{"ruleId":"440","severity":1,"message":"441","line":4,"column":8,"nodeType":"442","messageId":"443","endLine":4,"endColumn":18},{"ruleId":"440","severity":1,"message":"451","line":80,"column":17,"nodeType":"442","messageId":"443","endLine":80,"endColumn":25},{"ruleId":"440","severity":1,"message":"441","line":6,"column":8,"nodeType":"442","messageId":"443","endLine":6,"endColumn":18},{"ruleId":"440","severity":1,"message":"441","line":4,"column":8,"nodeType":"442","messageId":"443","endLine":4,"endColumn":18},{"ruleId":"440","severity":1,"message":"444","line":18,"column":10,"nodeType":"442","messageId":"443","endLine":18,"endColumn":27},{"ruleId":"440","severity":1,"message":"456","line":43,"column":9,"nodeType":"442","messageId":"443","endLine":43,"endColumn":21},{"ruleId":"440","severity":1,"message":"457","line":5,"column":17,"nodeType":"442","messageId":"443","endLine":5,"endColumn":26},{"ruleId":"440","severity":1,"message":"458","line":5,"column":28,"nodeType":"442","messageId":"443","endLine":5,"endColumn":36},{"ruleId":"440","severity":1,"message":"457","line":5,"column":17,"nodeType":"442","messageId":"443","endLine":5,"endColumn":26},{"ruleId":"440","severity":1,"message":"458","line":5,"column":28,"nodeType":"442","messageId":"443","endLine":5,"endColumn":36},{"ruleId":"436","replacedBy":"459"},{"ruleId":"438","replacedBy":"460"},{"ruleId":"440","severity":1,"message":"461","line":3,"column":10,"nodeType":"442","messageId":"443","endLine":3,"endColumn":18},{"ruleId":"440","severity":1,"message":"462","line":3,"column":35,"nodeType":"442","messageId":"443","endLine":3,"endColumn":46},{"ruleId":"440","severity":1,"message":"463","line":5,"column":8,"nodeType":"442","messageId":"443","endLine":5,"endColumn":23},{"ruleId":"440","severity":1,"message":"464","line":22,"column":10,"nodeType":"442","messageId":"443","endLine":22,"endColumn":15},{"ruleId":"440","severity":1,"message":"465","line":4,"column":3,"nodeType":"442","messageId":"443","endLine":4,"endColumn":18},{"ruleId":"440","severity":1,"message":"466","line":5,"column":3,"nodeType":"442","messageId":"443","endLine":5,"endColumn":20},{"ruleId":"440","severity":1,"message":"441","line":11,"column":8,"nodeType":"442","messageId":"443","endLine":11,"endColumn":18},{"ruleId":"440","severity":1,"message":"467","line":32,"column":10,"nodeType":"442","messageId":"443","endLine":32,"endColumn":20},{"ruleId":"440","severity":1,"message":"468","line":33,"column":10,"nodeType":"442","messageId":"443","endLine":33,"endColumn":21},{"ruleId":"440","severity":1,"message":"469","line":33,"column":23,"nodeType":"442","messageId":"443","endLine":33,"endColumn":37},{"ruleId":"440","severity":1,"message":"470","line":3,"column":10,"nodeType":"442","messageId":"443","endLine":3,"endColumn":27},{"ruleId":"440","severity":1,"message":"441","line":4,"column":8,"nodeType":"442","messageId":"443","endLine":4,"endColumn":18},{"ruleId":"440","severity":1,"message":"451","line":59,"column":17,"nodeType":"442","messageId":"443","endLine":59,"endColumn":25},{"ruleId":"440","severity":1,"message":"457","line":5,"column":17,"nodeType":"442","messageId":"443","endLine":5,"endColumn":26},{"ruleId":"440","severity":1,"message":"458","line":5,"column":28,"nodeType":"442","messageId":"443","endLine":5,"endColumn":36},{"ruleId":"436","replacedBy":"471"},{"ruleId":"438","replacedBy":"472"},{"ruleId":"440","severity":1,"message":"473","line":3,"column":27,"nodeType":"442","messageId":"443","endLine":3,"endColumn":37},{"ruleId":"440","severity":1,"message":"474","line":12,"column":20,"nodeType":"442","messageId":"443","endLine":12,"endColumn":31},{"ruleId":"440","severity":1,"message":"475","line":71,"column":23,"nodeType":"442","messageId":"443","endLine":71,"endColumn":37},{"ruleId":"440","severity":1,"message":"468","line":80,"column":10,"nodeType":"442","messageId":"443","endLine":80,"endColumn":21},{"ruleId":"440","severity":1,"message":"469","line":80,"column":23,"nodeType":"442","messageId":"443","endLine":80,"endColumn":37},{"ruleId":"440","severity":1,"message":"467","line":81,"column":10,"nodeType":"442","messageId":"443","endLine":81,"endColumn":20},{"ruleId":"440","severity":1,"message":"476","line":81,"column":22,"nodeType":"442","messageId":"443","endLine":81,"endColumn":35},{"ruleId":"440","severity":1,"message":"477","line":117,"column":13,"nodeType":"442","messageId":"443","endLine":117,"endColumn":22},{"ruleId":"440","severity":1,"message":"478","line":133,"column":13,"nodeType":"442","messageId":"443","endLine":133,"endColumn":22},{"ruleId":"440","severity":1,"message":"479","line":19,"column":10,"nodeType":"442","messageId":"443","endLine":19,"endColumn":24},{"ruleId":"440","severity":1,"message":"469","line":20,"column":23,"nodeType":"442","messageId":"443","endLine":20,"endColumn":37},{"ruleId":"440","severity":1,"message":"476","line":21,"column":22,"nodeType":"442","messageId":"443","endLine":21,"endColumn":35},{"ruleId":"440","severity":1,"message":"446","line":23,"column":9,"nodeType":"442","messageId":"443","endLine":23,"endColumn":16},{"ruleId":"440","severity":1,"message":"480","line":2,"column":10,"nodeType":"442","messageId":"443","endLine":2,"endColumn":22},{"ruleId":"440","severity":1,"message":"473","line":5,"column":21,"nodeType":"442","messageId":"443","endLine":5,"endColumn":31},{"ruleId":"440","severity":1,"message":"481","line":24,"column":10,"nodeType":"442","messageId":"443","endLine":24,"endColumn":20},{"ruleId":"440","severity":1,"message":"482","line":25,"column":9,"nodeType":"442","messageId":"443","endLine":25,"endColumn":31},{"ruleId":"440","severity":1,"message":"468","line":47,"column":10,"nodeType":"442","messageId":"443","endLine":47,"endColumn":21},{"ruleId":"440","severity":1,"message":"469","line":47,"column":23,"nodeType":"442","messageId":"443","endLine":47,"endColumn":37},{"ruleId":"440","severity":1,"message":"467","line":48,"column":10,"nodeType":"442","messageId":"443","endLine":48,"endColumn":20},{"ruleId":"440","severity":1,"message":"476","line":48,"column":22,"nodeType":"442","messageId":"443","endLine":48,"endColumn":35},{"ruleId":"452","severity":1,"message":"483","line":72,"column":6,"nodeType":"454","endLine":72,"endColumn":18,"suggestions":"484"},{"ruleId":"440","severity":1,"message":"479","line":18,"column":10,"nodeType":"442","messageId":"443","endLine":18,"endColumn":24},{"ruleId":"440","severity":1,"message":"468","line":19,"column":10,"nodeType":"442","messageId":"443","endLine":19,"endColumn":21},{"ruleId":"440","severity":1,"message":"469","line":19,"column":23,"nodeType":"442","messageId":"443","endLine":19,"endColumn":37},{"ruleId":"440","severity":1,"message":"467","line":20,"column":10,"nodeType":"442","messageId":"443","endLine":20,"endColumn":20},{"ruleId":"440","severity":1,"message":"476","line":20,"column":22,"nodeType":"442","messageId":"443","endLine":20,"endColumn":35},{"ruleId":"440","severity":1,"message":"446","line":25,"column":9,"nodeType":"442","messageId":"443","endLine":25,"endColumn":16},{"ruleId":"440","severity":1,"message":"485","line":6,"column":10,"nodeType":"442","messageId":"443","endLine":6,"endColumn":14},{"ruleId":"440","severity":1,"message":"486","line":19,"column":10,"nodeType":"442","messageId":"443","endLine":19,"endColumn":23},{"ruleId":"440","severity":1,"message":"468","line":24,"column":10,"nodeType":"442","messageId":"443","endLine":24,"endColumn":21},{"ruleId":"440","severity":1,"message":"469","line":24,"column":23,"nodeType":"442","messageId":"443","endLine":24,"endColumn":37},{"ruleId":"440","severity":1,"message":"467","line":25,"column":10,"nodeType":"442","messageId":"443","endLine":25,"endColumn":20},{"ruleId":"440","severity":1,"message":"476","line":25,"column":22,"nodeType":"442","messageId":"443","endLine":25,"endColumn":35},{"ruleId":"440","severity":1,"message":"446","line":27,"column":9,"nodeType":"442","messageId":"443","endLine":27,"endColumn":16},{"ruleId":"452","severity":1,"message":"487","line":36,"column":27,"nodeType":"454","endLine":36,"endColumn":33,"suggestions":"488"},{"ruleId":"440","severity":1,"message":"457","line":11,"column":17,"nodeType":"442","messageId":"443","endLine":11,"endColumn":26},{"ruleId":"440","severity":1,"message":"458","line":11,"column":28,"nodeType":"442","messageId":"443","endLine":11,"endColumn":36},{"ruleId":"440","severity":1,"message":"485","line":12,"column":10,"nodeType":"442","messageId":"443","endLine":12,"endColumn":14},{"ruleId":"440","severity":1,"message":"441","line":4,"column":8,"nodeType":"442","messageId":"443","endLine":4,"endColumn":18},{"ruleId":"440","severity":1,"message":"479","line":18,"column":10,"nodeType":"442","messageId":"443","endLine":18,"endColumn":24},{"ruleId":"440","severity":1,"message":"456","line":46,"column":9,"nodeType":"442","messageId":"443","endLine":46,"endColumn":21},{"ruleId":"440","severity":1,"message":"457","line":1,"column":17,"nodeType":"442","messageId":"443","endLine":1,"endColumn":26},{"ruleId":"440","severity":1,"message":"489","line":2,"column":10,"nodeType":"442","messageId":"443","endLine":2,"endColumn":19},{"ruleId":"440","severity":1,"message":"490","line":3,"column":10,"nodeType":"442","messageId":"443","endLine":3,"endColumn":25},{"ruleId":"440","severity":1,"message":"441","line":6,"column":8,"nodeType":"442","messageId":"443","endLine":6,"endColumn":18},{"ruleId":"440","severity":1,"message":"467","line":29,"column":10,"nodeType":"442","messageId":"443","endLine":29,"endColumn":20},{"ruleId":"440","severity":1,"message":"468","line":30,"column":10,"nodeType":"442","messageId":"443","endLine":30,"endColumn":21},{"ruleId":"440","severity":1,"message":"469","line":30,"column":23,"nodeType":"442","messageId":"443","endLine":30,"endColumn":37},{"ruleId":"440","severity":1,"message":"457","line":1,"column":17,"nodeType":"442","messageId":"443","endLine":1,"endColumn":26},{"ruleId":"440","severity":1,"message":"489","line":2,"column":10,"nodeType":"442","messageId":"443","endLine":2,"endColumn":19},{"ruleId":"440","severity":1,"message":"465","line":4,"column":3,"nodeType":"442","messageId":"443","endLine":4,"endColumn":18},{"ruleId":"440","severity":1,"message":"466","line":5,"column":3,"nodeType":"442","messageId":"443","endLine":5,"endColumn":20},{"ruleId":"440","severity":1,"message":"490","line":6,"column":3,"nodeType":"442","messageId":"443","endLine":6,"endColumn":18},{"ruleId":"440","severity":1,"message":"441","line":11,"column":8,"nodeType":"442","messageId":"443","endLine":11,"endColumn":18},{"ruleId":"440","severity":1,"message":"467","line":88,"column":10,"nodeType":"442","messageId":"443","endLine":88,"endColumn":20},{"ruleId":"440","severity":1,"message":"468","line":89,"column":10,"nodeType":"442","messageId":"443","endLine":89,"endColumn":21},{"ruleId":"440","severity":1,"message":"469","line":89,"column":23,"nodeType":"442","messageId":"443","endLine":89,"endColumn":37},{"ruleId":"440","severity":1,"message":"457","line":5,"column":17,"nodeType":"442","messageId":"443","endLine":5,"endColumn":26},{"ruleId":"440","severity":1,"message":"458","line":5,"column":28,"nodeType":"442","messageId":"443","endLine":5,"endColumn":36},{"ruleId":"440","severity":1,"message":"457","line":5,"column":17,"nodeType":"442","messageId":"443","endLine":5,"endColumn":26},{"ruleId":"440","severity":1,"message":"458","line":5,"column":28,"nodeType":"442","messageId":"443","endLine":5,"endColumn":36},{"ruleId":"440","severity":1,"message":"473","line":5,"column":16,"nodeType":"442","messageId":"443","endLine":5,"endColumn":26},{"ruleId":"440","severity":1,"message":"473","line":2,"column":21,"nodeType":"442","messageId":"443","endLine":2,"endColumn":31},{"ruleId":"440","severity":1,"message":"441","line":6,"column":8,"nodeType":"442","messageId":"443","endLine":6,"endColumn":18},{"ruleId":"440","severity":1,"message":"491","line":23,"column":9,"nodeType":"442","messageId":"443","endLine":23,"endColumn":34},{"ruleId":"440","severity":1,"message":"467","line":87,"column":10,"nodeType":"442","messageId":"443","endLine":87,"endColumn":20},{"ruleId":"440","severity":1,"message":"468","line":88,"column":10,"nodeType":"442","messageId":"443","endLine":88,"endColumn":21},{"ruleId":"440","severity":1,"message":"469","line":88,"column":23,"nodeType":"442","messageId":"443","endLine":88,"endColumn":37},{"ruleId":"440","severity":1,"message":"473","line":2,"column":21,"nodeType":"442","messageId":"443","endLine":2,"endColumn":31},{"ruleId":"440","severity":1,"message":"465","line":4,"column":3,"nodeType":"442","messageId":"443","endLine":4,"endColumn":18},{"ruleId":"440","severity":1,"message":"466","line":5,"column":3,"nodeType":"442","messageId":"443","endLine":5,"endColumn":20},{"ruleId":"440","severity":1,"message":"490","line":6,"column":3,"nodeType":"442","messageId":"443","endLine":6,"endColumn":18},{"ruleId":"440","severity":1,"message":"492","line":7,"column":3,"nodeType":"442","messageId":"443","endLine":7,"endColumn":20},{"ruleId":"440","severity":1,"message":"441","line":13,"column":8,"nodeType":"442","messageId":"443","endLine":13,"endColumn":18},{"ruleId":"440","severity":1,"message":"467","line":90,"column":10,"nodeType":"442","messageId":"443","endLine":90,"endColumn":20},{"ruleId":"440","severity":1,"message":"468","line":91,"column":10,"nodeType":"442","messageId":"443","endLine":91,"endColumn":21},{"ruleId":"440","severity":1,"message":"469","line":91,"column":23,"nodeType":"442","messageId":"443","endLine":91,"endColumn":37},{"ruleId":"436","replacedBy":"493"},{"ruleId":"438","replacedBy":"494"},{"ruleId":"440","severity":1,"message":"441","line":5,"column":8,"nodeType":"442","messageId":"443","endLine":5,"endColumn":18},{"ruleId":"440","severity":1,"message":"495","line":19,"column":10,"nodeType":"442","messageId":"443","endLine":19,"endColumn":27},{"ruleId":"440","severity":1,"message":"456","line":47,"column":9,"nodeType":"442","messageId":"443","endLine":47,"endColumn":21},{"ruleId":"440","severity":1,"message":"465","line":4,"column":3,"nodeType":"442","messageId":"443","endLine":4,"endColumn":18},{"ruleId":"440","severity":1,"message":"466","line":5,"column":3,"nodeType":"442","messageId":"443","endLine":5,"endColumn":20},{"ruleId":"440","severity":1,"message":"441","line":11,"column":8,"nodeType":"442","messageId":"443","endLine":11,"endColumn":18},{"ruleId":"440","severity":1,"message":"467","line":88,"column":10,"nodeType":"442","messageId":"443","endLine":88,"endColumn":20},{"ruleId":"440","severity":1,"message":"468","line":89,"column":10,"nodeType":"442","messageId":"443","endLine":89,"endColumn":21},{"ruleId":"440","severity":1,"message":"469","line":89,"column":23,"nodeType":"442","messageId":"443","endLine":89,"endColumn":37},{"ruleId":"440","severity":1,"message":"479","line":18,"column":10,"nodeType":"442","messageId":"443","endLine":18,"endColumn":24},{"ruleId":"440","severity":1,"message":"468","line":19,"column":10,"nodeType":"442","messageId":"443","endLine":19,"endColumn":21},{"ruleId":"440","severity":1,"message":"469","line":19,"column":23,"nodeType":"442","messageId":"443","endLine":19,"endColumn":37},{"ruleId":"440","severity":1,"message":"467","line":20,"column":10,"nodeType":"442","messageId":"443","endLine":20,"endColumn":20},{"ruleId":"440","severity":1,"message":"476","line":20,"column":22,"nodeType":"442","messageId":"443","endLine":20,"endColumn":35},{"ruleId":"440","severity":1,"message":"496","line":21,"column":15,"nodeType":"442","messageId":"443","endLine":21,"endColumn":21},{"ruleId":"440","severity":1,"message":"497","line":22,"column":17,"nodeType":"442","messageId":"443","endLine":22,"endColumn":25},{"ruleId":"440","severity":1,"message":"498","line":23,"column":16,"nodeType":"442","messageId":"443","endLine":23,"endColumn":23},{"ruleId":"440","severity":1,"message":"446","line":26,"column":9,"nodeType":"442","messageId":"443","endLine":26,"endColumn":16},{"ruleId":"452","severity":1,"message":"499","line":34,"column":28,"nodeType":"454","endLine":34,"endColumn":46,"suggestions":"500"},{"ruleId":"440","severity":1,"message":"490","line":6,"column":3,"nodeType":"442","messageId":"443","endLine":6,"endColumn":18},{"ruleId":"440","severity":1,"message":"501","line":7,"column":3,"nodeType":"442","messageId":"443","endLine":7,"endColumn":17},{"ruleId":"440","severity":1,"message":"441","line":11,"column":8,"nodeType":"442","messageId":"443","endLine":11,"endColumn":18},{"ruleId":"440","severity":1,"message":"467","line":60,"column":10,"nodeType":"442","messageId":"443","endLine":60,"endColumn":20},{"ruleId":"440","severity":1,"message":"468","line":61,"column":10,"nodeType":"442","messageId":"443","endLine":61,"endColumn":21},{"ruleId":"440","severity":1,"message":"469","line":61,"column":23,"nodeType":"442","messageId":"443","endLine":61,"endColumn":37},{"ruleId":"440","severity":1,"message":"457","line":5,"column":17,"nodeType":"442","messageId":"443","endLine":5,"endColumn":26},{"ruleId":"440","severity":1,"message":"458","line":5,"column":28,"nodeType":"442","messageId":"443","endLine":5,"endColumn":36},"no-native-reassign",["502"],"no-negated-in-lhs",["503"],"no-unused-vars","'ErrorAlert' is defined but never used.","Identifier","unusedVar","'reservationsError' is assigned a value but never used.","'tablesError' is assigned a value but never used.","'history' is assigned a value but never used.","no-extend-native","Date prototype is read only, properties should not be added.","AssignmentExpression","unexpected","'response' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadPeople'. Either include it or remove the dependency array.","ArrayExpression",["504"],"'handleCancel' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.",["502"],["503"],"'Redirect' is defined but never used.","'useLocation' is defined but never used.","'EditParticipant' is defined but never used.","'today' is defined but never used.","'readReservation' is defined but never used.","'updateReservation' is defined but never used.","'errMessage' is assigned a value but never used.","'visibility3' is assigned a value but never used.","'setVisibility3' is assigned a value but never used.","'createReservation' is defined but never used.",["502"],["503"],"'useHistory' is defined but never used.","'setStatuses' is assigned a value but never used.","'setStatusField' is assigned a value but never used.","'setErrMessage' is assigned a value but never used.","'response1' is assigned a value but never used.","'response2' is assigned a value but never used.","'instancesError' is assigned a value but never used.","'createStatus' is defined but never used.","'statusName' is assigned a value but never used.","'handleStatusNameChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dischargeDate' and 'startDate'. Either include them or remove the dependency array.",["505"],"'Link' is defined but never used.","'statusesError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'instance_id'. Either include it or remove the dependency array.",["506"],"'useParams' is defined but never used.","'readParticipant' is defined but never used.","'handleParticipantIdChange' is assigned a value but never used.","'createParticipant' is defined but never used.",["502"],["503"],"'participantsError' is assigned a value but never used.","'setDay' is assigned a value but never used.","'setMonth' is assigned a value but never used.","'setYear' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'participant_id'. Either include it or remove the dependency array.",["507"],"'createInstance' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"508","fix":"509"},{"desc":"510","fix":"511"},{"desc":"512","fix":"513"},{"desc":"514","fix":"515"},"Update the dependencies array to be: [date, loadPeople]",{"range":"516","text":"517"},"Update the dependencies array to be: [dischargeDate, instanceId, startDate]",{"range":"518","text":"519"},"Update the dependencies array to be: [date, instance_id]",{"range":"520","text":"521"},"Update the dependencies array to be: [day, month, participant_id, year]",{"range":"522","text":"523"},[2073,2079],"[date, loadPeople]",[2818,2830],"[dischargeDate, instanceId, startDate]",[1506,1512],"[date, instance_id]",[1332,1350],"[day, month, participant_id, year]"]