[{"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\index.js":"1","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\App.js":"2","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Layout.js":"3","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Menu.js":"4","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Routes.js":"5","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\NotFound.js":"6","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\Dashboard.js":"7","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\date-time.js":"8","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\api.js":"9","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\ErrorAlert.js":"10","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\format-reservation-date.js":"11","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Reservations.js":"12","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Seat.js":"13","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\AddTable.js":"14","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\NewReservation.js":"15","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\EditReservation.js":"16","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Search.js":"17","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\SearchResults.js":"18","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\SeatButton.js":"19","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\FinishButton.js":"20","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\CancelButton.js":"21","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\PastDateError.js":"22","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\TuesdayError.js":"23","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\OccupiedError.js":"24","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\CapacityError.js":"25","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\TimeError.js":"26","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\ResForm.js":"27","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\ErrorCaught.js":"28","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\index.js":"29","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\App.js":"30","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Layout.js":"31","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Menu.js":"32","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Routes.js":"33","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\NotFound.js":"34","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EditParticipant.js":"35","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\NewParticipant.js":"36","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\date-time.js":"37","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\api.js":"38","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ResForm.js":"39","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\ErrorAlert.js":"40","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\format-reservation-date.js":"41","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\AddStatus.js":"42","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\dashboard\\ParticipantsDashboard.js":"43","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\RecCheck.js":"44","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\dashboard\\RecDashboard.js":"45","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ViewParticipant.js":"46","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\DischargeInfo.js":"47","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\TreatmentInfo.js":"48","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\AdmFunding.js":"49","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EmploymentInfo.js":"50","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollParticipant.js":"51","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\ErrorCaught.js":"52","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollForm.js":"53","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenu.js":"54","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\Search.js":"55","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\SearchResults.js":"56","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\Documents.js":"57"},{"size":299,"mtime":1632929090351,"results":"58","hashOfConfig":"59"},{"size":352,"mtime":1632929090348,"results":"60","hashOfConfig":"59"},{"size":579,"mtime":1632929090353,"results":"61","hashOfConfig":"59"},{"size":1879,"mtime":1632929090354,"results":"62","hashOfConfig":"59"},{"size":1878,"mtime":1637426666050,"results":"63","hashOfConfig":"59"},{"size":345,"mtime":1632929090355,"results":"64","hashOfConfig":"59"},{"size":9807,"mtime":1639824012377,"results":"65","hashOfConfig":"59"},{"size":2468,"mtime":1632929090358,"results":"66","hashOfConfig":"59"},{"size":5480,"mtime":1639775206136,"results":"67","hashOfConfig":"59"},{"size":505,"mtime":1632929090352,"results":"68","hashOfConfig":"59"},{"size":647,"mtime":1632929090358,"results":"69","hashOfConfig":"59"},{"size":3380,"mtime":1634328747899,"results":"70","hashOfConfig":"59"},{"size":5825,"mtime":1639822987223,"results":"71","hashOfConfig":"59"},{"size":3207,"mtime":1639825565342,"results":"72","hashOfConfig":"59"},{"size":6037,"mtime":1639826532773,"results":"73","hashOfConfig":"59"},{"size":4762,"mtime":1639825602327,"results":"74","hashOfConfig":"59"},{"size":2486,"mtime":1639422719827,"results":"75","hashOfConfig":"59"},{"size":1457,"mtime":1639775206133,"results":"76","hashOfConfig":"59"},{"size":648,"mtime":1639411982223,"results":"77","hashOfConfig":"59"},{"size":1031,"mtime":1639423154745,"results":"78","hashOfConfig":"59"},{"size":1033,"mtime":1639423167018,"results":"79","hashOfConfig":"59"},{"size":501,"mtime":1639423065348,"results":"80","hashOfConfig":"59"},{"size":491,"mtime":1639423021387,"results":"81","hashOfConfig":"59"},{"size":472,"mtime":1639423073156,"results":"82","hashOfConfig":"59"},{"size":443,"mtime":1639423115815,"results":"83","hashOfConfig":"59"},{"size":511,"mtime":1639423028074,"results":"84","hashOfConfig":"59"},{"size":2887,"mtime":1639775206131,"results":"85","hashOfConfig":"59"},{"size":393,"mtime":1639823323987,"results":"86","hashOfConfig":"59"},{"size":299,"mtime":1632929090351,"results":"87","hashOfConfig":"88"},{"size":352,"mtime":1632929090348,"results":"89","hashOfConfig":"88"},{"size":579,"mtime":1632929090353,"results":"90","hashOfConfig":"88"},{"size":1948,"mtime":1645897093013,"results":"91","hashOfConfig":"88"},{"size":2947,"mtime":1647454566629,"results":"92","hashOfConfig":"88"},{"size":345,"mtime":1632929090355,"results":"93","hashOfConfig":"88"},{"size":3426,"mtime":1644454356863,"results":"94","hashOfConfig":"88"},{"size":3446,"mtime":1643656784584,"results":"95","hashOfConfig":"88"},{"size":2468,"mtime":1632929090358,"results":"96","hashOfConfig":"88"},{"size":4506,"mtime":1645898425604,"results":"97","hashOfConfig":"88"},{"size":1730,"mtime":1642537334373,"results":"98","hashOfConfig":"88"},{"size":505,"mtime":1632929090352,"results":"99","hashOfConfig":"88"},{"size":647,"mtime":1632929090358,"results":"100","hashOfConfig":"88"},{"size":4750,"mtime":1644454315095,"results":"101","hashOfConfig":"88"},{"size":3123,"mtime":1645473679263,"results":"102","hashOfConfig":"88"},{"size":8840,"mtime":1644454459355,"results":"103","hashOfConfig":"88"},{"size":4856,"mtime":1647451637609,"results":"104","hashOfConfig":"88"},{"size":3532,"mtime":1645480510479,"results":"105","hashOfConfig":"88"},{"size":4408,"mtime":1644454343878,"results":"106","hashOfConfig":"88"},{"size":5730,"mtime":1644454469626,"results":"107","hashOfConfig":"88"},{"size":5478,"mtime":1644454329409,"results":"108","hashOfConfig":"88"},{"size":5410,"mtime":1644454369642,"results":"109","hashOfConfig":"88"},{"size":7578,"mtime":1647363459405,"results":"110","hashOfConfig":"88"},{"size":393,"mtime":1643496164453,"results":"111","hashOfConfig":"88"},{"size":10153,"mtime":1645309377270,"results":"112","hashOfConfig":"88"},{"size":1473,"mtime":1647455518651,"results":"113","hashOfConfig":"88"},{"size":2506,"mtime":1645898581674,"results":"114","hashOfConfig":"88"},{"size":1634,"mtime":1645899583630,"results":"115","hashOfConfig":"88"},{"size":5331,"mtime":1647454882386,"results":"116","hashOfConfig":"88"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},"bj93m2",{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"119"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"119"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"119"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"119"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"119"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"119"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"119"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"119"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},"1hl4ygm",{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"185"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"185"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"185"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"213"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"185"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"185"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"185"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"185"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"185"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"185"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"185"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"185"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"185"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"185"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"250","messages":"251","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"185"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\index.js",[],["257","258"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\App.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Layout.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Menu.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Routes.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\NotFound.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\Dashboard.js",["259","260","261","262","263","264","265"],"//The main functions of the Dashboard component are to display all of the reservations\r\n//and allow the user to seat, edit, or cancel reservations and to display all of the\r\n//tables and allow the user to finish the tables\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport {\r\n  listReservations,\r\n  updateReservationStatus,\r\n  updateTableStatus,\r\n} from \"../utils/api\";\r\nimport { listTables } from \"../utils/api\";\r\nimport SeatButton from \"./SeatButton\";\r\nimport FinishButton from \"./FinishButton\";\r\nimport CancelButton from \"./CancelButton\";\r\nimport ErrorCaught from \"../reservations/ErrorCaught\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Dashboard({ date }) {\r\n  //The main state variables are reservations and tables which are arrays to be displayed\r\n  const [reservations, setReservations] = useState([]);\r\n  const [reservationsError, setReservationsError] = useState(null);\r\n  const [tables, setTables] = useState([]);\r\n  const [tablesError, setTablesError] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  //Declare an instance of the useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Create the functionality for the prev, today, and next buttons to toggle dates\r\n  //Function to add a day to a date\r\n  Date.prototype.addDays = function (days) {\r\n    var date = new Date(this.valueOf());\r\n    date.setDate(date.getDate() + days);\r\n    return date;\r\n  };\r\n\r\n  //Extract the year, month, and day from the date passed in and use it to\r\n  //create a date that can be incremented and decremented\r\n  let month = Number(date.substring(5, 7)) - 1;\r\n  let day = Number(date.substring(8, 10));\r\n  let year = Number(date.substring(0, 4));\r\n\r\n  let currDate = new Date(year, month, day);\r\n\r\n  //For the prevDate and nextDate, convert the date to a text string\r\n  //Convert prevDate to a text string\r\n  let prevDate = currDate.addDays(-1);\r\n  let prevDateDay = prevDate.getDate();\r\n  if (prevDateDay < 10) prevDateDay = \"0\" + prevDateDay;\r\n  let prevDateMonth = prevDate.getMonth() + 1;\r\n  if (prevDateMonth < 10) prevDateMonth = \"0\" + prevDateMonth;\r\n  let prevDateString =\r\n    prevDate.getFullYear() + \"-\" + prevDateMonth + \"-\" + prevDateDay;\r\n\r\n  //Convert nextDate to a text string\r\n  let nextDate = currDate.addDays(1);\r\n  let nextDateDay = nextDate.getDate();\r\n  if (nextDateDay < 10) nextDateDay = \"0\" + nextDateDay;\r\n  let nextDateMonth = nextDate.getMonth() + 1;\r\n  if (nextDateMonth < 10) nextDateMonth = \"0\" + nextDateMonth;\r\n  let nextDateString =\r\n    nextDate.getFullYear() + \"-\" + nextDateMonth + \"-\" + nextDateDay;\r\n  console.log(\"nextDateString\", nextDateString);\r\n\r\n  //Use useEffect to load the reservations and the tables\r\n\r\n  //Load reservations\r\n  useEffect(loadDashboard, [date]);\r\n\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setReservationsError(null);\r\n\r\n    listReservations({ date }, abortController.signal)\r\n      .then(setReservations)\r\n      .catch(setReservationsError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //Load tables\r\n  useEffect(loadTables, [date]);\r\n\r\n  function loadTables() {\r\n    const abortController = new AbortController();\r\n    setTablesError(null);\r\n    listTables(abortController.signal).then(setTables).catch(setTablesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //Create the handleFinish function to finish a table\r\n  //This function changes the status of a reservation to 'finished' and the status of table to 'free'\r\n  async function handleFinish(reservationId, tableId) {\r\n    setVisibility3(null);\r\n\r\n    //Create a reservation object with a reservation_id and set the status to 'finished'\r\n    console.log(\"reservationId\", reservationId);\r\n    let reservation = {\r\n      data: {},\r\n    };\r\n\r\n    reservation.data.reservation_id = reservationId;\r\n    reservation.data.status = \"finished\";\r\n\r\n    //Create a table object with a table_id and set the reservation_id to null (which makes it 'free')\r\n    let table = {\r\n      data: {},\r\n    };\r\n\r\n    table.data.table_id = tableId;\r\n    table.data.reservation_id = null;\r\n\r\n    //Make an api call to update the reservation's status\r\n    async function changeReservation(reservation) {\r\n      try {\r\n        const response = await updateReservationStatus(reservation);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservationStatus API call: \", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n\r\n    if (reservationId !== null) changeReservation(reservation);\r\n\r\n    //Make an api call to update the table's status\r\n    async function changeTable(table) {\r\n      try {\r\n        const response = await updateTableStatus(table);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateTableStatus API call: \", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n    await changeTable(table);\r\n\r\n    //Reload reservations and tables\r\n    loadTables();\r\n    loadDashboard();\r\n  }\r\n\r\n  //Create a handleCancel function to cancel a reservation\r\n  //This function sets a reservation's status to cancelled\r\n  async function handleCancel(reservationId) {\r\n    setVisibility3(null);\r\n\r\n    //Create a reservation object with a reservation_id and set the status to cancelled\r\n    let reservation = {\r\n      data: {},\r\n    };\r\n\r\n    reservation.data.reservation_id = reservationId;\r\n    reservation.data.status = \"cancelled\";\r\n\r\n    //Make an api call to update the status of the reservation\r\n    async function changeReservation(reservation) {\r\n      try {\r\n        const response = await updateReservationStatus(reservation);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservationStatus API call: \", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n    await changeReservation(reservation);\r\n    loadDashboard();\r\n  }\r\n\r\n  //Create table rows of reservations using the 'reservations' state array\r\n  const reservationLinks = reservations.map((reservation) => {\r\n    let visible = reservation.status === \"booked\" ? true : null;\r\n    let visible2 = reservation.status !== \"cancelled\" ? true : null;\r\n\r\n    return (\r\n      <tr key={reservation.reservation_id}>\r\n        <td>{reservation.reservation_id}</td>\r\n        <td>{reservation.first_name}</td>\r\n        <td>{reservation.last_name}</td>\r\n        <td>{reservation.mobile_number}</td>\r\n        <td>{reservation.reservation_date}</td>\r\n        <td>{reservation.reservation_time}</td>\r\n        <td>{reservation.people}</td>\r\n        <td data-reservation-id-status={reservation.reservation_id}>\r\n          {reservation.status}\r\n        </td>\r\n        <td>\r\n          <Link to={`/reservations/${reservation.reservation_id}/edit`}>\r\n            <button type=\"button\" class=\"btn btn-outline-primary\">\r\n              Edit\r\n            </button>\r\n          </Link>{\" \"}\r\n        </td>\r\n        <td>\r\n          <CancelButton\r\n            visibility={visible2}\r\n            handleCancel={handleCancel}\r\n            reservationId={reservation.reservation_id}\r\n          />\r\n        </td>\r\n        <SeatButton\r\n          visibility={visible}\r\n          reservationId={reservation.reservation_id}\r\n        />\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  //Create table rows of tables using the 'tables' state array\r\n  const tableLinks = tables.map((table) => {\r\n    let visible = table.reservation_id ? true : null;\r\n\r\n    return (\r\n      <tr key={table.table_id}>\r\n        <td>{table.table_id}</td>\r\n        <td>{table.table_name}</td>\r\n        <td>{table.capacity}</td>\r\n        <td>{table.reservation_id}</td>\r\n        <td data-table-id-status={table.table_id}>\r\n          {table.reservation_id === null ? \"free\" : \"occupied\"}\r\n        </td>\r\n        <FinishButton\r\n          visibility={visible}\r\n          handleFinish={handleFinish}\r\n          reservationId={table.reservation_id}\r\n          tableId={table.table_id}\r\n        />\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  //Return the html code for the reservations and the tables\r\n  return (\r\n    <main>\r\n      <h1>Reservations</h1>\r\n      <table>\r\n        <tr>\r\n          <th>Reservation ID</th>\r\n          <th>First Name</th>\r\n          <th>Last Name</th>\r\n          <th>Mobile Number</th>\r\n          <th>Reservation Date</th>\r\n          <th>Reservation Time</th>\r\n          <th>People</th>\r\n          <th>Status</th>\r\n        </tr>\r\n\r\n        {reservationLinks}\r\n        <tr>\r\n          <td>\r\n            <Link to={`/dashboard?date=${prevDateString}`}>\r\n              <button type=\"button\" class=\"btn btn-primary\">\r\n                Previous\r\n              </button>\r\n            </Link>{\" \"}\r\n          </td>\r\n          <td>\r\n            <Link to={`/dashboard`}>\r\n              <button type=\"button\" class=\"btn btn-primary\">\r\n                Today\r\n              </button>\r\n            </Link>{\" \"}\r\n          </td>\r\n          <td>\r\n            <Link to={`/dashboard?date=${nextDateString}`}>\r\n              <button type=\"button\" class=\"btn btn-primary\">\r\n                Next\r\n              </button>\r\n            </Link>{\" \"}\r\n          </td>\r\n        </tr>\r\n      </table>\r\n      <br />\r\n      <h1>Tables for Seating</h1>\r\n      <table>\r\n        <tr>\r\n          <th>Table ID</th>\r\n          <th>Table Name</th>\r\n          <th>Capacity</th>\r\n          <th>Reservation ID</th>\r\n          <th>Status</th>\r\n        </tr>\r\n        {tableLinks}\r\n      </table>\r\n      <ErrorCaught visibility3={visibility3} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\date-time.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\api.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\ErrorAlert.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\format-reservation-date.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Reservations.js",["266","267"],"import React, { useEffect, useState } from \"react\";\r\nimport { listReservations } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Reservations({ date }) {\r\n  const [reservations, setReservations] = useState([]);\r\n  const [reservationsError, setReservationsError] = useState(null);\r\n\r\n  useEffect(loadDashboard, [date]);\r\n\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setReservationsError(null);\r\n    listReservations({ date }, abortController.signal)\r\n      .then(setReservations)\r\n      .catch(setReservationsError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  const reservationLinks = reservations.map((reservation) => (\r\n    <li key={reservation.reservation_id}>\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{reservation.reservation_id}</h5>\r\n          <p className=\"card-text\">\r\n            <table>\r\n              <tr>\r\n                <td>{reservation.first_name}</td>\r\n                <td>{reservation.last_name}</td>\r\n              </tr>\r\n            </table>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <main>\r\n      <h1>Reservations</h1>\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"first_name\">First Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"first_name\"\r\n            className=\"form-control\"\r\n            id=\"first_name\"\r\n            aria-describedby=\"emailHelp\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"last_name\">Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            className=\"form-control\"\r\n            id=\"last_name\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"mobile_number\">Mobile Number</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"mobile_number\"\r\n            className=\"form-control\"\r\n            id=\"mobile_number\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"reservation_date\">Date of Reservation</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"reservation_date\"\r\n            className=\"form-control\"\r\n            id=\"reservation_date\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"reservation_time\">Time of Reservation</label>\r\n          <input\r\n            type=\"time\"\r\n            name=\"reservation_time\"\r\n            className=\"form-control\"\r\n            id=\"reservation_time\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"people\">People</label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"people\"\r\n            className=\"form-control\"\r\n            id=\"people\"\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Submit\r\n        </button>\r\n        <button type=\"cancel\" className=\"btn btn-primary\">\r\n          Cancel\r\n        </button>\r\n      </form>\r\n      <ul>{reservationLinks}</ul>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Reservations;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Seat.js",["268","269","270","271"],"//The Seat Component is used to assign a reservation to a given table\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  listTables,\r\n  updateTable,\r\n  readReservation,\r\n  readTable,\r\n} from \"../utils/api\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\nimport CapacityError from \"./CapacityError\";\r\nimport OccupiedError from \"./OccupiedError\";\r\nimport ErrorCaught from \"./ErrorCaught\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Seat({ date }) {\r\n  //Create state variables\r\n  const [tables, setTables] = useState([]);\r\n  const [tablesError, setTablesError] = useState(null);\r\n  const [tableId, setTableId] = useState(\"\");\r\n  const [visibility, setVisibility] = useState(null);\r\n  const [visibility2, setVisibility2] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [capacity, setCapacity] = useState(null);\r\n  const [people, setPeople] = useState(null);\r\n  const [occupied, setOccupied] = useState(null);\r\n\r\n  //history hook\r\n  const history = useHistory();\r\n\r\n  //The handleTableIdChange function is called whenever the value for the table drop-down is changed\r\n  //This function sets the table_id, capacity, and occupied status of the table\r\n  function handleTableIdChange(event) {\r\n    setTableId(event.target.value);\r\n    setVisibility3(null);\r\n\r\n    async function getTable(table_id) {\r\n      try {\r\n        const response = await readTable(table_id);\r\n        setCapacity(response.capacity);\r\n        setOccupied(response.reservation_id);\r\n      } catch (err) {\r\n        console.log(\"Error making readTable API call:\", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n\r\n    getTable(event.target.value);\r\n  }\r\n\r\n  //Get ReservationId from url\r\n  const { reservationId } = useParams();\r\n\r\n  //Use useEffect to load the tables\r\n  useEffect(loadTables, [date]);\r\n\r\n  function loadTables() {\r\n    const abortController = new AbortController();\r\n    setTablesError(null);\r\n\r\n    //Reset ErrorCaught visibility\r\n    setVisibility3(null);\r\n\r\n    listTables(abortController.signal).then(setTables).catch(setTablesError);\r\n    loadPeople();\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  function loadPeople() {\r\n    //Make call to get the reservation and check the number of people in the reservation\r\n    async function getReservation(reservationId) {\r\n      try {\r\n        const response = await readReservation(reservationId);\r\n        setPeople(response.people);\r\n      } catch (err) {\r\n        console.log(\"Error Making readReservation API Call\", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n    getReservation(reservationId);\r\n  }\r\n\r\n  //Create table rows from the tables state array and use to populate the drop-down\r\n  const tableLinks = tables.map((table) => (\r\n    <option value={table.table_id}>\r\n      {table.table_name} - {table.capacity}\r\n    </option>\r\n  ));\r\n\r\n  //Create the handleSubmit function to seat a party at a table\r\n  //This function changes the status of a reservation to \"seated\" and it\r\n  //changes the reservation_id on the table to match the party's reservation_id\r\n  //so that the table is \"occupied\"\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n    validate();\r\n\r\n    //Create a table object with a table_id and reservation_id\r\n    let table = {\r\n      data: {},\r\n    };\r\n\r\n    table.data.table_id = tableId;\r\n    table.data.reservation_id = reservationId;\r\n\r\n    //Update the table with the reservation_id\r\n    async function changeTable(table) {\r\n      try {\r\n        const response = await updateTable(table);\r\n        history.push(\"/dashboard\");\r\n      } catch (err) {\r\n        console.log(\"The API Call for updateTable had an error:\", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n    await changeTable(table);\r\n  }\r\n\r\n  //The validate function is used by the handleSubmit function to make sure\r\n  //that the table has sufficient capacity and that it is not occupied.\r\n  const validate = () => {\r\n    //Reset visibility\r\n    setVisibility(null);\r\n    setVisibility2(null);\r\n    setVisibility3(null);\r\n\r\n    //Display an error message if table capacity is less than the size of the party\r\n    if (capacity < people) {\r\n      setVisibility(true);\r\n    }\r\n\r\n    if (occupied !== null) {\r\n      setVisibility2(true);\r\n    }\r\n  };\r\n\r\n  //Create the handleCancel function to return the user to the reservations page\r\n  const handleCancel = (event) => {\r\n    window.history.back();\r\n  };\r\n\r\n  //Return the drop-down and the submit button to allow a user to seat a party at a table\r\n  return (\r\n    <main>\r\n      <h1>Seat the Party</h1>\r\n      <br />\r\n      <div class=\"form-group\">\r\n        <label for=\"exampleFormControlSelect1\">Choose Table</label>\r\n        <select\r\n          class=\"form-control\"\r\n          id=\"table_id\"\r\n          name=\"table_id\"\r\n          onChange={handleTableIdChange}\r\n          value={tableId}\r\n        >\r\n          <option value=\"\">--Select an Option--</option>\r\n          {tableLinks}\r\n        </select>\r\n      </div>\r\n      <form onSubmit={handleSubmit}>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Submit\r\n        </button>\r\n        <button\r\n          type=\"cancel\"\r\n          className=\"btn btn-primary\"\r\n          onClick={handleCancel}\r\n        >\r\n          Cancel\r\n        </button>\r\n      </form>\r\n      <CapacityError visibility={visibility} />\r\n      <OccupiedError visibility2={visibility2} />\r\n      <ErrorCaught visibility3={visibility3} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Seat;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\AddTable.js",["272"],"import React, { useState } from \"react\";\r\nimport { createTable } from \"../utils/api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ErrorCaught from \"./ErrorCaught\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction AddTable({ date }) {\r\n  //Create tableName and capacity state variables and add event listeners\r\n  const [tableName, setTableName] = useState(\"\");\r\n  const handleTableNameChange = (event) => setTableName(event.target.value);\r\n\r\n  const [capacity, setCapacity] = useState(\"\");\r\n  const handleCapacityChange = (event) => setCapacity(event.target.value);\r\n\r\n  //State vars for ErrorCaught\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //The handleSubmit function creates a new table and posts it to the db\r\n  const handleSubmit = (event) => {\r\n    console.log(\"helloThereGuy\");\r\n    event.preventDefault();\r\n\r\n    setVisibility3(null);\r\n\r\n    //Create a table object and set its name and capacity according to the\r\n    //input fields\r\n    let table = {\r\n      data: {},\r\n    };\r\n\r\n    table.data.table_name = tableName;\r\n    table.data.capacity = Number(capacity);\r\n\r\n    //Make an api call to post the new table to the db\r\n    async function newTable(table) {\r\n      try {\r\n        const response = await createTable(table);\r\n        if (response) history.push(\"/dashboard\");\r\n      } catch (err) {\r\n        console.log(\"Error making createTable API call: \", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n\r\n    newTable(table);\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n    window.history.back();\r\n  };\r\n\r\n  //Return the html with inputs for entering the tableName and capacity\r\n  return (\r\n    <main>\r\n      <h1>Add a Table</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"table_name\">Table Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"table_name\"\r\n            className=\"form-control\"\r\n            id=\"table_name\"\r\n            onChange={handleTableNameChange}\r\n            value={tableName}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"capacity\">Capacity</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"capacity\"\r\n            className=\"form-control\"\r\n            id=\"capacity\"\r\n            onChange={handleCapacityChange}\r\n            value={capacity}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Submit\r\n        </button>\r\n        <button\r\n          type=\"cancel\"\r\n          className=\"btn btn-primary\"\r\n          onClick={handleCancel}\r\n        >\r\n          Cancel\r\n        </button>\r\n      </form>\r\n      <ErrorCaught visibility3={visibility3} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default AddTable;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\NewReservation.js",["273","274"],"import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createReservation } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\nimport ResForm from \"./ResForm\";\r\nimport PastDateError from \"./PastDateError\";\r\nimport TuesdayError from \"./TuesdayError\";\r\nimport TimeError from \"./TimeError\";\r\nimport ErrorCaught from \"./ErrorCaught\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction NewReservation({ date }) {\r\n  //Create state variables and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const handleMobileNumberChange = (event) =>\r\n    setMobileNumber(event.target.value);\r\n\r\n  const [reservationDate, setReservationDate] = useState(\"\");\r\n  const handleReservationDateChange = (event) =>\r\n    setReservationDate(event.target.value);\r\n\r\n  const [reservationTime, setReservationTime] = useState(\"\");\r\n  const handleReservationTimeChange = (event) =>\r\n    setReservationTime(event.target.value);\r\n\r\n  const [people, setPeople] = useState(\"\");\r\n  const handlePeopleChange = (event) => setPeople(Number(event.target.value));\r\n\r\n  //Set visibility for the different types of errors that can occur\r\n  const [visibility, setVisibility] = useState(null);\r\n  const [visibility2, setVisibility2] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  const [visibilityError, setVisibilityError] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Create switched\r\n  let switched = null;\r\n\r\n  //Create the handleSubmit function which creates a reservation based on the input and\r\n  //makes an api call to add that reservation to the database\r\n  const handleSubmit = (event) => {\r\n    switched = null;\r\n\r\n    event.preventDefault();\r\n\r\n    //Validate the input\r\n    validate();\r\n\r\n    if (!switched) {\r\n      let reservation = {\r\n        data: {},\r\n      };\r\n\r\n      //Set state variables\r\n      reservation.data.first_name = firstName;\r\n      reservation.data.last_name = lastName;\r\n      reservation.data.mobile_number = mobileNumber;\r\n      reservation.data.reservation_date = reservationDate;\r\n      reservation.data.reservation_time = reservationTime;\r\n      reservation.data.people = people;\r\n\r\n      //Make api call to create a new reservation\r\n      async function newReservation(reservation) {\r\n        try {\r\n          const response = await createReservation(reservation);\r\n        } catch (err) {\r\n          console.log(\"Error making createReservation API call\", err);\r\n          setErrMessage(err);\r\n          setVisibilityError(true);\r\n        }\r\n      }\r\n      newReservation(reservation);\r\n\r\n      history.push(`/dashboard?date=${reservationDate}`);\r\n    }\r\n  };\r\n\r\n  //The validate function ensures that the reservation is not in the past, on a Tuesday,\r\n  //or before 10:00AM or after 9:30PM\r\n  const validate = () => {\r\n    //Reset visibility\r\n    setVisibility(null);\r\n    setVisibility2(null);\r\n    setVisibility3(null);\r\n    setVisibilityError(null);\r\n\r\n    //Create date for reservation date\r\n    let month = Number(reservationDate.substring(5, 7)) - 1;\r\n    let day = Number(reservationDate.substring(8, 10));\r\n    let year = Number(reservationDate.substring(0, 4));\r\n    let hours = Number(reservationTime.substring(0, 2));\r\n    let minutes = Number(reservationTime.substring(3));\r\n\r\n    //Compare the current date with the date of the reservation entered\r\n    let resDate = new Date(year, month, day);\r\n    resDate.setHours(hours);\r\n    resDate.setMinutes(minutes);\r\n\r\n    let today = new Date();\r\n\r\n    //If the current date is greater than the reservation date, throw an error\r\n    if (resDate.valueOf() < today.valueOf()) {\r\n      setVisibility(true);\r\n      switched = true;\r\n    }\r\n\r\n    //If the reservation is made on a Tuesday, throw an error\r\n    if (resDate.getDay() === 2) {\r\n      setVisibility2(true);\r\n      switched = true;\r\n    }\r\n\r\n    //If the reservation is earlier than 10:30am or later than 9:30pm, throw an error\r\n    if (\r\n      resDate.getHours() < 10 ||\r\n      (resDate.getHours() === 10 && resDate.getMinutes() < 30)\r\n    ) {\r\n      setVisibility3(true);\r\n      switched = true;\r\n    }\r\n\r\n    if (\r\n      resDate.getHours() > 21 ||\r\n      (resDate.getHours() === 21 && resDate.getMinutes() > 30)\r\n    ) {\r\n      setVisibility3(true);\r\n      switched = true;\r\n    }\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage1\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n    history.push(\"/dashboard\");\r\n  };\r\n\r\n  //Return the form with inputs to create a new reservation\r\n  return (\r\n    <main>\r\n      <h1>Add a New Reservation</h1>\r\n      <ResForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        mobileNumber={mobileNumber}\r\n        handleMobileNumberChange={handleMobileNumberChange}\r\n        reservationDate={reservationDate}\r\n        handleReservationDateChange={handleReservationDateChange}\r\n        reservationTime={reservationTime}\r\n        handleReservationTimeChange={handleReservationTimeChange}\r\n        people={people}\r\n        handlePeopleChange={handlePeopleChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n      <PastDateError visibility={visibility} />\r\n      <TuesdayError visibility2={visibility2} />\r\n      <TimeError visibility3={visibility3} />\r\n      <ErrorCaught visibility3={visibilityError} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default NewReservation;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\EditReservation.js",["275"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readReservation, updateReservation } from \"../utils/api\";\r\nimport ResForm from \"./ResForm\";\r\nimport ErrorCaught from \"./ErrorCaught\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction EditReservation({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const handleMobileNumberChange = (event) =>\r\n    setMobileNumber(event.target.value);\r\n\r\n  const [reservationDate, setReservationDate] = useState(\"\");\r\n  const handleReservationDateChange = (event) =>\r\n    setReservationDate(event.target.value);\r\n\r\n  const [reservationTime, setReservationTime] = useState(\"\");\r\n  const handleReservationTimeChange = (event) =>\r\n    setReservationTime(event.target.value);\r\n\r\n  const [people, setPeople] = useState(\"\");\r\n  const handlePeopleChange = (event) => setPeople(Number(event.target.value));\r\n\r\n  //State vars for error message\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Get ReservationId from url\r\n  const { reservationId } = useParams();\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Make an API Call to get the reservation based on the reservation_id\r\n  useEffect(() => {\r\n    async function getReservation(reservationId) {\r\n      const response = await readReservation(reservationId);\r\n\r\n      let dateString = response.reservation_date.substring(0, 10);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setMobileNumber(response.mobile_number);\r\n      setReservationDate(dateString);\r\n      setReservationTime(response.reservation_time);\r\n      setPeople(response.people);\r\n    }\r\n    getReservation(reservationId);\r\n  }, [reservationId]);\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function creates a reservation based on the user input and then uses changeReservation() api call\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    setVisibility3(null);\r\n\r\n    let reservation = {\r\n      data: {},\r\n    };\r\n\r\n    reservation.data.reservation_id = reservationId;\r\n    reservation.data.first_name = firstName;\r\n    reservation.data.last_name = lastName;\r\n    reservation.data.mobile_number = mobileNumber;\r\n    reservation.data.reservation_date = reservationDate;\r\n    reservation.data.reservation_time = reservationTime;\r\n    reservation.data.people = people;\r\n\r\n    //Make api call to update reservation\r\n    async function changeReservation(reservation) {\r\n      try {\r\n        const response = await updateReservation(reservation);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n    await changeReservation(reservation);\r\n\r\n    //Reset fields\r\n    setFirstName(\"\");\r\n    setLastName(\"\");\r\n    setMobileNumber(\"\");\r\n    setReservationDate(\"\");\r\n    setReservationTime(\"\");\r\n    setPeople(\"\");\r\n\r\n    //Go back to dashboard page\r\n    history.push(`/dashboard?date=${reservationDate}`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard?date=${reservationDate}`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Edit Reservation</h1>\r\n      <ResForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        mobileNumber={mobileNumber}\r\n        handleMobileNumberChange={handleMobileNumberChange}\r\n        reservationDate={reservationDate}\r\n        handleReservationDateChange={handleReservationDateChange}\r\n        reservationTime={reservationTime}\r\n        handleReservationTimeChange={handleReservationTimeChange}\r\n        people={people}\r\n        handlePeopleChange={handlePeopleChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n      <ErrorCaught visibility3={visibility3} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default EditReservation;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Search.js",["276","277","278"],"import React, { useEffect, useState } from \"react\";\r\nimport SearchResults from \"./SearchResults\";\r\nimport { listReservations } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Search({ date }) {\r\n  //Create the phone nubmer state variable and add event listeners\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  const handlePhoneNumberChange = (event) => setPhoneNumber(event.target.value);\r\n  const [visibilityStatus, setVisibilityStatus] = useState(null);\r\n  const [reservations, setReservations] = useState([]);\r\n  const [reservationsError, setReservationsError] = useState(null);\r\n\r\n  //UseEffect is used to get the reservations\r\n  useEffect(loadDashboard, [phoneNumber]);\r\n\r\n  //Load all of the reservations filtered by phone number\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setReservationsError(null);\r\n    const mobile_number = phoneNumber;\r\n\r\n    listReservations({ mobile_number }, abortController.signal)\r\n      .then(setReservations)\r\n      .catch(setReservationsError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //The handleSubmit function merely shows the search results\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    loadDashboard();\r\n    setVisibilityStatus(true);\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage1\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  //Return the form to enter the phone number and show the results\r\n  return (\r\n    <main>\r\n      <h1>Find Reservations</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"mobile_number\">Enter a Customer Phone Number</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"mobile_number\"\r\n            className=\"form-control\"\r\n            id=\"mobile_number\"\r\n            onChange={handlePhoneNumberChange}\r\n            value={phoneNumber}\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Find\r\n        </button>\r\n      </form>\r\n      <div>\r\n        <SearchResults\r\n          visibility={visibilityStatus}\r\n          phoneNumber={phoneNumber}\r\n          reservations={reservations}\r\n        />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\SearchResults.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\SeatButton.js",["279","280"],"//The Seat Button is used to seat a reservation\r\n//The button will appear next to a reservation on the Dashboard\r\n//The two props are visibility and reservationId\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction SeatButton({ visibility, reservationId }) {\r\n  if (visibility !== null) {\r\n    return (\r\n      <td>\r\n        <Link to={`/reservations/${reservationId}/seat`}>\r\n          <button type=\"button\" class=\"btn btn-outline-primary\">\r\n            Seat\r\n          </button>\r\n        </Link>{\" \"}\r\n      </td>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default SeatButton;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\FinishButton.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\CancelButton.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\PastDateError.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\TuesdayError.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\OccupiedError.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\CapacityError.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\TimeError.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\ResForm.js",["281","282"],"//The Seat Button is used to seat a reservation\r\n//The button will appear next to a reservation on the Dashboard\r\n//The two props are visibility and reservationId\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nfunction ResForm({\r\n  firstName,\r\n  handleFirstNameChange,\r\n  lastName,\r\n  handleLastNameChange,\r\n  mobileNumber,\r\n  handleMobileNumberChange,\r\n  reservationDate,\r\n  handleReservationDateChange,\r\n  reservationTime,\r\n  handleReservationTimeChange,\r\n  people,\r\n  handlePeopleChange,\r\n  handleSubmit,\r\n  handleCancel,\r\n}) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"first_name\">First Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"first_name\"\r\n          className=\"form-control\"\r\n          id=\"first_name\"\r\n          aria-describedby=\"emailHelp\"\r\n          onChange={handleFirstNameChange}\r\n          value={firstName}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"last_name\">Last Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"last_name\"\r\n          className=\"form-control\"\r\n          id=\"last_name\"\r\n          onChange={handleLastNameChange}\r\n          value={lastName}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"mobile_number\">Mobile Number</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"mobile_number\"\r\n          className=\"form-control\"\r\n          id=\"mobile_number\"\r\n          onChange={handleMobileNumberChange}\r\n          value={mobileNumber}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"reservation_date\">Date of Reservation</label>\r\n        <input\r\n          type=\"date\"\r\n          name=\"reservation_date\"\r\n          className=\"form-control\"\r\n          id=\"reservation_date\"\r\n          onChange={handleReservationDateChange}\r\n          value={reservationDate}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"reservation_time\">Time of Reservation</label>\r\n        <input\r\n          type=\"time\"\r\n          name=\"reservation_time\"\r\n          className=\"form-control\"\r\n          id=\"reservation_time\"\r\n          onChange={handleReservationTimeChange}\r\n          value={reservationTime}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"people\">People</label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"people\"\r\n          className=\"form-control\"\r\n          id=\"people\"\r\n          onChange={handlePeopleChange}\r\n          value={people}\r\n        />\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Submit\r\n      </button>\r\n      <button type=\"cancel\" className=\"btn btn-primary\" onClick={handleCancel}>\r\n        Cancel\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ResForm;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\ErrorCaught.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\index.js",[],["283","284"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\App.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Layout.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Menu.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Routes.js",["285","286","287"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\NotFound.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EditParticipant.js",["288","289","290","291","292","293"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport {\r\n  readReservation,\r\n  updateReservation,\r\n  readParticipant,\r\n  updateParticipant,\r\n} from \"../utils/api\";\r\nimport ResForm from \"./ResForm\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction EditParticipant({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const handleMobileNumberChange = (event) =>\r\n    setMobileNumber(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Get ParticipantId from url\r\n  const { participantId } = useParams();\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Make an API Call to get the reservation based on the reservation_id\r\n  useEffect(() => {\r\n    async function getParticipant(participantId) {\r\n      const response = await readParticipant(participantId);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setMobileNumber(response.mobile_number);\r\n    }\r\n    getParticipant(participantId);\r\n  }, [participantId]);\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function creates a reservation based on the user input and then uses changeReservation() api call\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let participant = {\r\n      data: {},\r\n    };\r\n\r\n    participant.data.participant_id = participantId;\r\n    participant.data.first_name = firstName;\r\n    participant.data.last_name = lastName;\r\n    participant.data.mobile_number = mobileNumber;\r\n\r\n    //Make api call to update reservation\r\n    async function changeParticipant(participant) {\r\n      try {\r\n        const response = await updateParticipant(participant);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await changeParticipant(participant);\r\n\r\n    //Reset fields\r\n    setFirstName(\"\");\r\n    setLastName(\"\");\r\n    setMobileNumber(\"\");\r\n\r\n    //Go back to dashboard page\r\n    history.push(`/dashboard`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Edit Participant</h1>\r\n      <ResForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        mobileNumber={mobileNumber}\r\n        handleMobileNumberChange={handleMobileNumberChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default EditParticipant;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\NewParticipant.js",["294","295","296"],"import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createReservation, createParticipant } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\nimport ResForm from \"./ResForm\";\r\nimport ErrorCaught from \"../ErrorCaught\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction NewReservation({ date }) {\r\n  //Create state variables and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const handleMobileNumberChange = (event) =>\r\n    setMobileNumber(event.target.value);\r\n\r\n  //Set visibility for the different types of errors that can occur\r\n  const [visibilityError, setVisibilityError] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Create switched\r\n  let switched = null;\r\n\r\n  //Create the handleSubmit function which creates a reservation based on the input and\r\n  //makes an api call to add that reservation to the database\r\n  const handleSubmit = (event) => {\r\n    switched = null;\r\n\r\n    event.preventDefault();\r\n\r\n    //Validate the input\r\n    validate();\r\n\r\n    if (!switched) {\r\n      let participant = {\r\n        data: {},\r\n      };\r\n\r\n      //Set state variables\r\n      participant.data.first_name = firstName;\r\n      participant.data.last_name = lastName;\r\n      participant.data.mobile_number = mobileNumber;\r\n\r\n      //Make api call to create a new reservation\r\n      async function newParticipant(participant) {\r\n        try {\r\n          const response = await createParticipant(participant);\r\n        } catch (err) {\r\n          console.log(\"Error making createReservation API call\", err);\r\n          setErrMessage(err);\r\n          setVisibilityError(true);\r\n        }\r\n      }\r\n      newParticipant(participant);\r\n\r\n      history.push(`/`);\r\n    }\r\n  };\r\n\r\n  //The validate function ensures that the reservation is not in the past, on a Tuesday,\r\n  //or before 10:00AM or after 9:30PM\r\n  const validate = () => {\r\n    //Reset visibility\r\n    setVisibilityError(null);\r\n\r\n    //If firstName, lastName, or mobileNumber are missing, throw an error\r\n    if (!firstName || !lastName || !mobileNumber) {\r\n      setVisibilityError(true);\r\n      switched = true;\r\n    }\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage1\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  //Return the form with inputs to create a new reservation\r\n  return (\r\n    <main>\r\n      <h1>Add a New Program Participant</h1>\r\n      <ResForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        mobileNumber={mobileNumber}\r\n        handleMobileNumberChange={handleMobileNumberChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n      <ErrorCaught visibility3={visibilityError} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default NewReservation;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\date-time.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\api.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ResForm.js",["297","298"],"//The Seat Button is used to seat a reservation\r\n//The button will appear next to a reservation on the Dashboard\r\n//The two props are visibility and reservationId\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nfunction ResForm({\r\n  firstName,\r\n  handleFirstNameChange,\r\n  lastName,\r\n  handleLastNameChange,\r\n  mobileNumber,\r\n  handleMobileNumberChange,\r\n  handleSubmit,\r\n  handleCancel,\r\n}) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"first_name\">First Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"first_name\"\r\n          className=\"form-control\"\r\n          id=\"first_name\"\r\n          aria-describedby=\"emailHelp\"\r\n          onChange={handleFirstNameChange}\r\n          value={firstName}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"last_name\">Last Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"last_name\"\r\n          className=\"form-control\"\r\n          id=\"last_name\"\r\n          onChange={handleLastNameChange}\r\n          value={lastName}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"mobile_number\">Mobile Number</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"mobile_number\"\r\n          className=\"form-control\"\r\n          id=\"mobile_number\"\r\n          onChange={handleMobileNumberChange}\r\n          value={mobileNumber}\r\n        />\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Submit\r\n      </button>{\" \"}\r\n      <button type=\"cancel\" className=\"btn btn-primary\" onClick={handleCancel}>\r\n        Cancel\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ResForm;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\ErrorAlert.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\format-reservation-date.js",[],["299","300"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\AddStatus.js",["301","302","303","304","305","306","307","308"],"import React, { useEffect, useState } from \"react\";\r\nimport { createStatus } from \"../utils/api\";\r\n\r\nimport { readParticipant } from \"../utils/api\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction AddStatus() {\r\n  const [statuses, setStatuses] = useState([\r\n    { statusId: 1, statusName: \"Had RC\" },\r\n    { statusId: 2, statusName: \"Start MAT\" },\r\n    { statusId: 3, statusName: \"On Restrictions\" },\r\n  ]);\r\n\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [incident, setIncident] = useState(null);\r\n  const handleIncidentChange = (event) => setIncident(event.target.value);\r\n\r\n  const [statusName, setStatusName] = useState(null);\r\n  const handleStatusNameChange = (event) => setStatusName(event.target.value);\r\n\r\n  const [statusDate, setStatusDate] = useState(null);\r\n  const handleStatusDateChange = (event) => setStatusDate(event.target.value);\r\n\r\n  //State vars for ErrorCaught\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Get ParticipantId from url\r\n  const { participantId, incidentId } = useParams();\r\n\r\n  //Make an API Call to get the reservation based on the reservation_id\r\n  useEffect(() => {\r\n    async function getParticipant(participantId) {\r\n      const response = await readParticipant(participantId);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setIncident(incidentId);\r\n    }\r\n    getParticipant(participantId);\r\n  }, [participantId]);\r\n\r\n  async function handleSubmit() {\r\n    //Make an api call to post the new table to the db\r\n    let status = {\r\n      data: {},\r\n    };\r\n\r\n    status.data.participant_id = participantId;\r\n    status.data.instance_id = incidentId;\r\n    status.data.status_name = statusName;\r\n    status.data.date = statusDate;\r\n\r\n    try {\r\n      const response = await createStatus(status);\r\n    } catch (err) {\r\n      console.log(\"Error making createTable API call: \", err);\r\n    }\r\n  }\r\n\r\n  //Create table rows from the statuses state array and use to populate the drop-down\r\n  const statusLinks = statuses.map((status) => (\r\n    <option value={status.statusName}>{status.statusName}</option>\r\n  ));\r\n\r\n  //Return the html with status drop-down\r\n  return (\r\n    <main>\r\n      <h1>Add Status Event</h1>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"first_name\">First Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"first_name\"\r\n          className=\"form-control\"\r\n          id=\"first_name\"\r\n          aria-describedby=\"emailHelp\"\r\n          onChange={handleFirstNameChange}\r\n          value={firstName}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"last_name\">Last Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"last_name\"\r\n          className=\"form-control\"\r\n          id=\"last_name\"\r\n          onChange={handleLastNameChange}\r\n          value={lastName}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"last_name\">Incident</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"last_name\"\r\n          className=\"form-control\"\r\n          id=\"last_name\"\r\n          onChange={handleIncidentChange}\r\n          value={incident}\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <form onSubmit={handleSubmit}>\r\n          <label for=\"exampleFormControlSelect1\">Select Status</label>\r\n          <select\r\n            class=\"form-control\"\r\n            id=\"statusName\"\r\n            name=\"statusName\"\r\n            onChange={handleStatusNameChange}\r\n            value={statusName}\r\n          >\r\n            <option value=\"\">--Select an Option--</option>\r\n            {statusLinks}\r\n          </select>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"status_date\">Date of Reservation</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"status_date\"\r\n              className=\"form-control\"\r\n              id=\"status_date\"\r\n              onChange={handleStatusDateChange}\r\n              value={statusDate}\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default AddStatus;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\dashboard\\ParticipantsDashboard.js",["309","310","311","312"],"//The main functions of the Dashboard component are to display all of the reservations\r\n//and allow the user to seat, edit, or cancel reservations and to display all of the\r\n//tables and allow the user to finish the tables\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { listInstances } from \"../utils/api\";\r\nimport ErrorCaught from \"../ErrorCaught\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction ParticipantsDashboard({ date }) {\r\n  //The main state variables are reservations and tables which are arrays to be displayed\r\n  const [instances, setInstances] = useState([]);\r\n  const [instancesError, setInstancesError] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  //Declare an instance of the useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Use useEffect to load the reservations and the tables\r\n\r\n  //Load reservations\r\n  useEffect(loadDashboard, [date]);\r\n\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setInstancesError(null);\r\n\r\n    listInstances({}, abortController.signal)\r\n      .then(setInstances)\r\n      .catch(setInstancesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //Create table rows of reservations using the 'reservations' state array\r\n  const instanceLinks = instances.map((instance) => {\r\n    let startDateString = instance.start_date.substring(0, 10);\r\n    let dischargeDateString = \"\";\r\n    if (instance.discharge_date)\r\n      dischargeDateString = instance.discharge_date.substring(0, 10);\r\n\r\n    return (\r\n      <tr key={instance.instance_id}>\r\n        <td>{instance.participant_id}</td>\r\n        <td>{instance.first_name}</td>\r\n        <td>{instance.last_name}</td>\r\n        <td>{instance.incident_num}</td>\r\n        <td>{startDateString}</td>\r\n        <td>{dischargeDateString}</td>\r\n        <Link\r\n          to={`/participants/${instance.participant_id}/statuses/${instance.incident_num}`}\r\n        >\r\n          <button type=\"button\" class=\"btn btn-primary\">\r\n            Add Status\r\n          </button>\r\n        </Link>{\" \"}\r\n        <Link to={`/participants/${instance.instance_id}/view`}>\r\n          <button type=\"button\" class=\"btn btn-primary\">\r\n            View\r\n          </button>\r\n        </Link>{\" \"}\r\n        <button type=\"button\" class=\"btn btn-primary\">\r\n          Edit\r\n        </button>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  //Return the html code for the reservations and the tables\r\n  return (\r\n    <main>\r\n      <h1>Active Participants</h1>\r\n      <table class=\"table\">\r\n        <tr>\r\n          <th>Participant ID</th> <th>First Name</th> <th>Last Name</th>{\" \"}\r\n          <th>Incident #</th>\r\n          <th>Start Date</th> <th>Discharge Date</th>\r\n        </tr>\r\n\r\n        {instanceLinks}\r\n      </table>\r\n      <br />\r\n\r\n      <ErrorCaught visibility3={visibility3} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default ParticipantsDashboard;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\RecCheck.js",["313","314","315","316","317","318","319","320","321"],"import React, { useEffect, useState } from \"react\";\r\nimport { createStatus } from \"../utils/api\";\r\n\r\nimport { readInstance, updateInstance } from \"../utils/api\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction RecCheck({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [incident, setIncident] = useState(null);\r\n  const handleIncidentChange = (event) => setIncident(event.target.value);\r\n\r\n  const [statusName, setStatusName] = useState(null);\r\n  const handleStatusNameChange = (event) => setStatusName(event.target.value);\r\n\r\n  const [startDate, setStartDate] = useState(null);\r\n  const handleStartDateChange = (event) => setStartDate(event.target.value);\r\n\r\n  const [dischargeDate, setDischargeDate] = useState(null);\r\n  const handleDischargeDateChange = (event) =>\r\n    setDischargeDate(event.target.value);\r\n\r\n  const [checkDate, setCheckDate] = useState(null);\r\n  const handleCheckDateChange = (event) => setCheckDate(event.target.value);\r\n\r\n  const [timePeriod, setTimePeriod] = useState(null);\r\n  const handleTimePeriodChange = (event) => setTimePeriod(event.target.value);\r\n\r\n  const [fed, setFed] = useState(\"\");\r\n  const handleFedChange = (event) => setFed(event.target.value);\r\n\r\n  const [state, setState] = useState(\"\");\r\n  const handleStateChange = (event) => setState(event.target.value);\r\n\r\n  //State vars for ErrorCaught\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Get InstanceId from url\r\n  const { instanceId } = useParams();\r\n  console.log(\"instanceId\", instanceId);\r\n\r\n  //Make an API Call to get the reservation based on the reservation_id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n\r\n      let startDateString = response.start_date.substring(0, 10);\r\n      let dischargeDateString = response.start_date.substring(0, 10);\r\n      let checkDateString = response.start_date.substring(0, 10);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setIncident(response.incident_num);\r\n      setStartDate(startDateString);\r\n      setDischargeDate(dischargeDateString);\r\n      setCheckDate(checkDateString);\r\n    }\r\n    getInstance(instanceId);\r\n    console.log(\"start date\", startDate, \"discharge date\", dischargeDate);\r\n  }, [instanceId]);\r\n\r\n  async function handleSubmit(event) {\r\n    let instance = {\r\n      data: {},\r\n    };\r\n\r\n    instance.data.instance_id = Number(instanceId);\r\n    if (timePeriod === \"1\" && fed === \"yes\") instance.data[\"1_YR_Fed\"] = \"yes\";\r\n    if (timePeriod === \"1\" && fed === \"no\") instance.data[\"1_YR_Fed\"] = \"no\";\r\n    if (timePeriod === \"1\" && state === \"yes\")\r\n      instance.data[\"1_YR_State\"] = \"yes\";\r\n    if (timePeriod === \"1\" && state === \"no\")\r\n      instance.data[\"1_YR_State\"] = \"no\";\r\n    if (timePeriod === \"2\" && fed === \"yes\") instance.data[\"2_YR_Fed\"] = \"yes\";\r\n    if (timePeriod === \"2\" && fed === \"no\") instance.data[\"2_YR_Fed\"] = \"no\";\r\n    if (timePeriod === \"2\" && state === \"yes\")\r\n      instance.data[\"2_YR_State\"] = \"yes\";\r\n    if (timePeriod === \"2\" && state === \"no\")\r\n      instance.data[\"2_YR_State\"] = \"no\";\r\n    if (timePeriod === \"3\" && fed === \"yes\") instance.data[\"3_YR_Fed\"] = \"yes\";\r\n    if (timePeriod === \"3\" && fed === \"no\") instance.data[\"3_YR_Fed\"] = \"no\";\r\n    if (timePeriod === \"3\" && state === \"yes\")\r\n      instance.data[\"3_YR_State\"] = \"yes\";\r\n    if (timePeriod === \"3\" && state === \"no\")\r\n      instance.data[\"3_YR_State\"] = \"no\";\r\n    if (timePeriod === \"4\" && fed === \"yes\") instance.data[\"4_YR_Fed\"] = \"yes\";\r\n    if (timePeriod === \"4\" && fed === \"no\") instance.data[\"4_YR_Fed\"] = \"no\";\r\n    if (timePeriod === \"4\" && state === \"yes\")\r\n      instance.data[\"4_YR_State\"] = \"yes\";\r\n    if (timePeriod === \"4\" && state === \"no\")\r\n      instance.data[\"4_YR_State\"] = \"no\";\r\n    if (timePeriod === \"5\" && fed === \"yes\") instance.data[\"5_YR_Fed\"] = \"yes\";\r\n    if (timePeriod === \"5\" && fed === \"no\") instance.data[\"5_YR_Fed\"] = \"no\";\r\n    if (timePeriod === \"5\" && state === \"yes\")\r\n      instance.data[\"5_YR_State\"] = \"yes\";\r\n    if (timePeriod === \"5\" && state === \"no\")\r\n      instance.data[\"5_YR_State\"] = \"no\";\r\n\r\n    //Make api call to update instance\r\n    async function changeInstance(instance) {\r\n      const response = await updateInstance(instance);\r\n      console.log(response);\r\n    }\r\n    await changeInstance(instance);\r\n  }\r\n\r\n  //Return the html with status drop-down\r\n  return (\r\n    <main>\r\n      <h1>Recidivism Check</h1>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"first_name\">First Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"first_name\"\r\n          className=\"form-control\"\r\n          id=\"first_name\"\r\n          aria-describedby=\"emailHelp\"\r\n          onChange={handleFirstNameChange}\r\n          value={firstName}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"last_name\">Last Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"last_name\"\r\n          className=\"form-control\"\r\n          id=\"last_name\"\r\n          onChange={handleLastNameChange}\r\n          value={lastName}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"last_name\">Incident</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"last_name\"\r\n          className=\"form-control\"\r\n          id=\"last_name\"\r\n          onChange={handleIncidentChange}\r\n          value={incident}\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"start_date\">Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"start_date\"\r\n              className=\"form-control\"\r\n              id=\"start_date\"\r\n              onChange={handleStartDateChange}\r\n              value={startDate}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"discharge_date\">Discharge Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"discharge_date\"\r\n              className=\"form-control\"\r\n              id=\"discharge_date\"\r\n              onChange={handleDischargeDateChange}\r\n              value={dischargeDate}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"check_date\">Date of Recidivism Check</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"check_date\"\r\n              className=\"form-control\"\r\n              id=\"check_date\"\r\n              onChange={handleCheckDateChange}\r\n              value={checkDate}\r\n            />\r\n          </div>\r\n          <label for=\"exampleFormControlSelect1\">\r\n            Select Time Period of Check\r\n          </label>\r\n          <select\r\n            class=\"form-control\"\r\n            id=\"timePeriod\"\r\n            name=\"timePeriod\"\r\n            onChange={handleTimePeriodChange}\r\n            value={timePeriod}\r\n          >\r\n            <option value=\"\">--Time Period--</option>\r\n            <option value=\"1\"> 1 Year</option>\r\n            <option value=\"2\"> 2 Year</option>\r\n            <option value=\"3\"> 3 Year</option>\r\n            <option value=\"4\"> 4 Year</option>\r\n            <option value=\"5\"> 5 Year</option>\r\n          </select>\r\n          <label for=\"fed\">Federal Check</label>\r\n          <select\r\n            class=\"form-control\"\r\n            id=\"fed\"\r\n            name=\"fed\"\r\n            onChange={handleFedChange}\r\n            value={fed}\r\n          >\r\n            <option value=\"\">--Went Back?--</option>\r\n            <option value=\"yes\"> Yes</option>\r\n            <option value=\"no\"> No</option>\r\n          </select>\r\n          <label for=\"state\">State Check</label>\r\n          <select\r\n            class=\"form-control\"\r\n            id=\"state\"\r\n            name=\"state\"\r\n            onChange={handleStateChange}\r\n            value={state}\r\n          >\r\n            <option value=\"\">--Went Back?--</option>\r\n            <option value=\"yes\"> Yes</option>\r\n            <option value=\"no\"> No</option>\r\n          </select>\r\n          <br />\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default RecCheck;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\dashboard\\RecDashboard.js",["322","323","324","325","326","327"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ViewParticipant.js",["328","329","330","331","332","333","334"],"//The main functions of the Dashboard component are to display all of the reservations\r\n//and allow the user to seat, edit, or cancel reservations and to display all of the\r\n//tables and allow the user to finish the tables\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { readInstance, listStatuses } from \"../utils/api\";\r\nimport ParticipantMenu from \"./ParticipantMenu\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction ParticipantsDashboard({ date }) {\r\n  //The main state variables are reservations and tables which are arrays to be displayed\r\n  const [statuses, setStatuses] = useState([]);\r\n  const [statusesError, setStatusesError] = useState(null);\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [incidentNum, setIncidentNum] = useState(null);\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  //Declare an instance of the useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Get instanceId from url\r\n  const { instanceId } = useParams();\r\n\r\n  //Use useEffect to load the statuses and the instances\r\n  //Load reservations\r\n  useEffect(loadStatuses, [date]);\r\n\r\n  function loadStatuses() {\r\n    const abortController = new AbortController();\r\n    setStatusesError(null);\r\n\r\n    listStatuses({}, abortController.signal)\r\n      .then(setStatuses)\r\n      .catch(setStatusesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //Load instance\r\n  //Make an API Call to get the instance on the instance_id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n\r\n      let instDateString = response.start_date.substring(0, 10);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setIncidentNum(response.incident_num);\r\n      setStartDate(instDateString);\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  //Create table rows of statuses using the 'statuses' state array\r\n  const statusLinks = statuses.map((status) => {\r\n    let dateString = status.date.substring(0, 10);\r\n\r\n    return (\r\n      <tr key={status.status_id}>\r\n        <td>{status.status_name}</td>\r\n        <td>{dateString}</td>\r\n        <td>{status.notes}</td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  //Return the html code for the reservations and the tables\r\n  return (\r\n    <main>\r\n      <h1>\r\n        <center>View Participant</center>\r\n      </h1>\r\n      <center>\r\n        <table>\r\n          <tr>\r\n            <td>First Name: {firstName} </td>\r\n            <td>Last Name: {lastName}</td>\r\n            <td>Incident #: {incidentNum}</td>\r\n            <td>Start Date: {startDate}</td>\r\n          </tr>\r\n        </table>\r\n      </center>\r\n      <br />\r\n\r\n      <div class=\"container\">\r\n        <div class=\"row\">\r\n          <div class=\"col\">\r\n            <ParticipantMenu />\r\n          </div>\r\n          <div class=\"col-9\">\r\n            <h1>Status Updates</h1>\r\n            <table>\r\n              <tr>\r\n                <th>Status Name</th> <th>Date</th> <th>Notes</th>{\" \"}\r\n              </tr>\r\n              {statusLinks}\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <br />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default ParticipantsDashboard;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\DischargeInfo.js",["335","336","337","338","339","340","341","342"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readInstance, readParticipant, updateParticipant } from \"../utils/api\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction DischargeInfo({ date }) {\r\n  //Create state variables for the discharge information\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [dischargeDate, setDischargeDate] = useState(\"\");\r\n  const [housingTransition, setHousingTransition] = useState(\"\");\r\n  const [dischargeReason, setDischargeReason] = useState(\"\");\r\n  const [dischargeStatus, setDischargeStatus] = useState(\"\");\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Get instancetId from url\r\n  let { instanceId } = useParams();\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Make an API Call to get the instance information based on instance id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setStartDate(response.start_date.substring(0, 10));\r\n      setDischargeDate(response.discharge_date.substring(0, 10));\r\n      setDischargeReason(response.discharge_reason);\r\n      setHousingTransition(response.housing_transition);\r\n      setDischargeStatus(response.status_at_discharge);\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  //Return the form to view the discharge details\r\n  return (\r\n    <main>\r\n      <h1>View Discharge Info</h1>\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"first_name\">First Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"first_name\"\r\n            className=\"form-control\"\r\n            id=\"first_name\"\r\n            aria-describedby=\"emailHelp\"\r\n            readonly\r\n            value={firstName}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"last_name\">Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            className=\"form-control\"\r\n            id=\"last_name\"\r\n            readonly\r\n            value={lastName}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"start_date\">Start Date</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"start_date\"\r\n            className=\"form-control\"\r\n            id=\"start_date\"\r\n            readonly\r\n            value={startDate}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"discharge_date\">Discharge Date</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"discharge_date\"\r\n            className=\"form-control\"\r\n            id=\"discharge_date\"\r\n            readonly\r\n            value={dischargeDate}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"discharge_reason\">Discharge Reason</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"discharge_reason\"\r\n            className=\"form-control\"\r\n            id=\"discharge_reason\"\r\n            readonly\r\n            value={dischargeReason}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"housing_transition\">Housing Transition</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"housing_transition\"\r\n            className=\"form-control\"\r\n            id=\"housing_transition\"\r\n            readonly\r\n            value={housingTransition}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"discharge_status\">Discharge Status</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"discharge_status\"\r\n            className=\"form-control\"\r\n            id=\"discharge_status\"\r\n            readonly\r\n            value={dischargeStatus}\r\n          />\r\n        </div>\r\n      </form>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default DischargeInfo;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\TreatmentInfo.js",["343","344","345","346","347","348","349","350","351"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readInstance, readParticipant, updateParticipant } from \"../utils/api\";\r\nimport ResForm from \"./ResForm\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction DischargeInfo({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [iopStart, setIopStart] = useState(\"\");\r\n  const [iopEnd, setIopEnd] = useState(\"\");\r\n  const [iopWeek, setIopWeek] = useState(\"\");\r\n  const [startMat, setStartMat] = useState(\"\");\r\n  const [afterCareStart, setAftercareStart] = useState(\"\");\r\n  const [afterCare8Week, setAftercare8Week] = useState(\"\");\r\n  const [afterCareEnd, setAftercareEnd] = useState(\"\");\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Get ParticipantId from url\r\n  let { instanceId } = useParams();\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Make an API Call to get the reservation based on the reservation_id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setStartDate(response.start_date.substring(0, 10));\r\n      setIopStart(response.iop_start_date.substring(0, 10));\r\n      setIopEnd(response.iop_end_date.substring(0, 10));\r\n      setIopWeek(response.iop_week_date.substring(0, 10));\r\n      setStartMat(response.started_mat_date.substring(0, 10));\r\n      setAftercareStart(response.aftercare_start_date.substring(0, 10));\r\n      setAftercare8Week(response.aftercare_8week_date.substring(0, 10));\r\n      setAftercareEnd(response.aftercare_end_date.substring(0, 10));\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>View Treatment Info</h1>\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"first_name\">First Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"first_name\"\r\n            className=\"form-control\"\r\n            id=\"first_name\"\r\n            aria-describedby=\"emailHelp\"\r\n            readonly\r\n            value={firstName}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"last_name\">Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            className=\"form-control\"\r\n            id=\"last_name\"\r\n            readonly\r\n            value={lastName}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"start_date\">Start Date</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"start_date\"\r\n            className=\"form-control\"\r\n            id=\"start_date\"\r\n            readonly\r\n            value={startDate}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"iop_start\">IOP Start Date</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"iop_start\"\r\n            className=\"form-control\"\r\n            id=\"iop_start\"\r\n            readonly\r\n            value={iopStart}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"iop_end\">IOP End Date</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"iop_end\"\r\n            className=\"form-control\"\r\n            id=\"iop_end\"\r\n            readonly\r\n            value={iopEnd}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"iop_week\">IOP Week Date</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"iop_week\"\r\n            className=\"form-control\"\r\n            id=\"iop_week\"\r\n            readonly\r\n            value={iopWeek}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"started_mat\">Started MAT Date</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"started_mat\"\r\n            className=\"form-control\"\r\n            id=\"started_mat\"\r\n            readonly\r\n            value={startMat}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"aftercare_start\">Started Aftercare</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"aftercare_start\"\r\n            className=\"form-control\"\r\n            id=\"aftercare_start\"\r\n            readonly\r\n            value={afterCareStart}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"aftercare_8week\">Aftercare Eight Week</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"aftercare_8week\"\r\n            className=\"form-control\"\r\n            id=\"aftercare_8week\"\r\n            readonly\r\n            value={afterCare8Week}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"aftercare_end\">Aftercare End Date</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"aftercare_end\"\r\n            className=\"form-control\"\r\n            id=\"aftercare_end\"\r\n            readonly\r\n            value={afterCareEnd}\r\n          />\r\n        </div>\r\n      </form>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default DischargeInfo;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\AdmFunding.js",["352","353","354","355","356","357","358","359"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readInstance, readParticipant, updateParticipant } from \"../utils/api\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction AdmFunding({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [admStart, setAdmStart] = useState(\"\");\r\n  const [admFund, setAdmFund] = useState(\"\");\r\n  const [admDays, setAdmDays] = useState(null);\r\n  const [admStatusTU, setAdmStatusTU] = useState(\"\");\r\n  const [adm90, setAdm90] = useState(\"\");\r\n  const [adm180, setAdm180] = useState(\"\");\r\n  const [lastAdmDate, setLastAdmDate] = useState(\"\");\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Get ParticipantId from url\r\n  let { instanceId } = useParams();\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Make an API Call to get the reservation based on the reservation_id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setStartDate(response.start_date.substring(0, 10));\r\n      setAdmStart(response.adm_start_date.substring(0, 10));\r\n      setAdmFund(response.adm_fund);\r\n      setAdmDays(response.adm_days);\r\n      setAdmStatusTU(response.tu_status_adm);\r\n      setAdm90(response.adm_90.substring(0, 10));\r\n      setAdm180(response.adm_180.substring(0, 10));\r\n      setLastAdmDate(response.last_adm_date.substring(0, 10));\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>View Treatment Info</h1>\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"first_name\">First Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"first_name\"\r\n            className=\"form-control\"\r\n            id=\"first_name\"\r\n            aria-describedby=\"emailHelp\"\r\n            readonly\r\n            value={firstName}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"last_name\">Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            className=\"form-control\"\r\n            id=\"last_name\"\r\n            readonly\r\n            value={lastName}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"start_date\">Start Date</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"start_date\"\r\n            className=\"form-control\"\r\n            id=\"start_date\"\r\n            readonly\r\n            value={startDate}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"adm_start\">ADM Start Date:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"adm_start\"\r\n            className=\"form-control\"\r\n            id=\"adm_start\"\r\n            readonly\r\n            value={admStart}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"adm_fund\">ADM Funding:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"adm_fund\"\r\n            className=\"form-control\"\r\n            id=\"adm_fund\"\r\n            readonly\r\n            value={admFund}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"adm_days\">ADM Days:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"adm_days\"\r\n            className=\"form-control\"\r\n            id=\"adm_days\"\r\n            readonly\r\n            value={admDays}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"adm_status\">ADM Treatment Update Status:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"adm_status\"\r\n            className=\"form-control\"\r\n            id=\"adm_status\"\r\n            readonly\r\n            value={admStatusTU}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"adm_90\">ADM 90 Days:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"adm_90\"\r\n            className=\"form-control\"\r\n            id=\"adm_90\"\r\n            readonly\r\n            value={adm90}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"adm_180\">ADM 180:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"adm_180\"\r\n            className=\"form-control\"\r\n            id=\"adm_180\"\r\n            readonly\r\n            value={adm180}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"last_adm_date\">Last ADM Date:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_adm_date\"\r\n            className=\"form-control\"\r\n            id=\"last_adm_date\"\r\n            readonly\r\n            value={lastAdmDate}\r\n          />\r\n        </div>\r\n      </form>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default AdmFunding;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EmploymentInfo.js",["360","361","362","363","364","365","366","367","368"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readInstance, readParticipant, updateParticipant } from \"../utils/api\";\r\nimport ResForm from \"./ResForm\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction EmploymentInfo({ date }) {\r\n  //Create state variables for each field of employment info and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [gedStart, setGedStart] = useState(\"\");\r\n  const [gedEnd, setGedEnd] = useState(\"\");\r\n  const [jobSearchStart, setJobSearchStart] = useState(\"\");\r\n  const [leaderDevStart, setLeaderDevStart] = useState(\"\");\r\n  const [lastLD, setLastLD] = useState(\"\");\r\n  const [employDetails, setEmployDetails] = useState(\"\");\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Get instanceId from url\r\n  let { instanceId } = useParams();\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Make an API Call to get the instance based on the instance_id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setStartDate(response.start_date.substring(0, 10));\r\n      setGedStart(response.ged_start_date.substring(0, 10));\r\n      setGedEnd(response.ged_end_date.substring(0, 10));\r\n      setJobSearchStart(response.job_search_start.substring(0, 10));\r\n      setLeaderDevStart(response.leadership_dev_start.substring(0, 10));\r\n      setLastLD(response.last_ld_meeting.substring(0, 10));\r\n      setEmployDetails(response.employment_details);\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  //Return the form to show the employment info\r\n  return (\r\n    <main>\r\n      <h1>View Employment Info</h1>\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"first_name\">First Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"first_name\"\r\n            className=\"form-control\"\r\n            id=\"first_name\"\r\n            aria-describedby=\"emailHelp\"\r\n            readonly\r\n            value={firstName}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"last_name\">Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            className=\"form-control\"\r\n            id=\"last_name\"\r\n            readonly\r\n            value={lastName}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"start_date\">Start Date</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"start_date\"\r\n            className=\"form-control\"\r\n            id=\"start_date\"\r\n            readonly\r\n            value={startDate}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"ged_start\">GED Start Date:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"ged_start\"\r\n            className=\"form-control\"\r\n            id=\"ged_start\"\r\n            readonly\r\n            value={gedStart}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"ged_end\">GED End Date:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"ged_end\"\r\n            className=\"form-control\"\r\n            id=\"ged_end\"\r\n            readonly\r\n            value={gedEnd}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"job_search_start\">Job Search Start Date:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"job_search_start\"\r\n            className=\"form-control\"\r\n            id=\"job_search_start\"\r\n            readonly\r\n            value={jobSearchStart}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"leadership_dev_start\">\r\n            Leadership Development Start Date:\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"leadership_dev_start\"\r\n            className=\"form-control\"\r\n            id=\"leadership_dev_start\"\r\n            readonly\r\n            value={leaderDevStart}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"last_ld_meeting\">\r\n            Last Leadership Development Meeting:\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_ld_meeting\"\r\n            className=\"form-control\"\r\n            id=\"last_ld_meeting\"\r\n            readonly\r\n            value={lastLD}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"employment_details\">Employment Details:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"employment_details\"\r\n            className=\"form-control\"\r\n            id=\"employment_details\"\r\n            readonly\r\n            value={employDetails}\r\n          />\r\n        </div>\r\n      </form>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default EmploymentInfo;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollParticipant.js",["369","370","371","372","373","374","375","376","377"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport {\r\n  readReservation,\r\n  updateReservation,\r\n  readParticipant,\r\n  createParticipant,\r\n} from \"../utils/api\";\r\nimport EnrollForm from \"./EnrollForm\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction EnrollParticipant({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [gender, setGender] = useState(\"\");\r\n  const handleGenderChange = (event) => setGender(event.target.value);\r\n\r\n  const [dob, setDob] = useState(\"\");\r\n  const handleDobChange = (event) => setDob(event.target.value);\r\n\r\n  const [homeCounty, setHomeCounty] = useState(\"\");\r\n  const handleHomeCountyChange = (event) => setHomeCounty(event.target.value);\r\n\r\n  const [incidentNum, setIncidentNum] = useState(null);\r\n  const handleIncidentNumChange = (event) => setIncidentNum(event.target.value);\r\n\r\n  const [incomeBefore, setIncomeBefore] = useState(\"\");\r\n  const handleIncomeBeforeChange = (event) =>\r\n    setIncomeBefore(event.target.value);\r\n\r\n  const [accountsPrior, setAccountsPrior] = useState(\"\");\r\n  const handleAccountsPriorChange = (event) =>\r\n    setAccountsPrior(event.target.value);\r\n\r\n  const [lastUseDate, setLastUseDate] = useState(\"\");\r\n  const handleLastUseChange = (event) => setLastUseDate(event.target.value);\r\n\r\n  const [yearsInside, setYearsInside] = useState(null);\r\n  const handleYearsInsideChange = (event) => setYearsInside(event.target.value);\r\n\r\n  const [sexOff, setSexOff] = useState(\"\");\r\n  const handleSexOffChange = (event) => setSexOff(event.target.value);\r\n\r\n  const [recentStayLength, setRecentStayLength] = useState(\"\");\r\n  const handleRecentStayLengthChange = (event) =>\r\n    setRecentStayLength(event.target.value);\r\n\r\n  const [drugChoice, setDrugChoice] = useState(\"\");\r\n  const handleDrugChoiceChange = (event) => setDrugChoice(event.target.value);\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const handleStartDateChange = (event) => setStartDate(event.target.value);\r\n\r\n  const [mat, setMat] = useState(\"\");\r\n  const handleMatChange = (event) => setMat(event.target.value);\r\n\r\n  const [tanf, setTanf] = useState(\"\");\r\n  const handleTanfChange = (event) => setTanf(event.target.value);\r\n\r\n  const [chargesDescr, setChargesDescr] = useState(\"\");\r\n  const handleChargesDescrChange = (event) =>\r\n    setChargesDescr(event.target.value);\r\n\r\n  const [copingLength, setCopingLength] = useState(\"\");\r\n  const handleCopingLengthChange = (event) =>\r\n    setCopingLength(event.target.value);\r\n\r\n  const [needsGed, setNeedsGed] = useState(\"\");\r\n  const handleNeedsGedChange = (event) => setNeedsGed(event.target.value);\r\n\r\n  const [employmentDetails, setEmploymentDetails] = useState(\"\");\r\n  const handleEmploymentDetailsChange = (event) =>\r\n    setEmploymentDetails(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function creates a reservation based on the user input and then uses changeReservation() api call\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let participant = {\r\n      data: {},\r\n    };\r\n\r\n    participant.data.first_name = firstName;\r\n    participant.data.last_name = lastName;\r\n    participant.data.gender = gender;\r\n    participant.data.birth_date = dob;\r\n    participant.data.home_county = homeCounty;\r\n    participant.data.incident_num = incidentNum;\r\n    participant.data.income_before_try = incomeBefore;\r\n    participant.data.accounts_before_try = accountsPrior;\r\n    participant.data.last_use_date = lastUseDate;\r\n    participant.data.years_inside = yearsInside;\r\n    participant.data.sex_offender = sexOff;\r\n    participant.data.recent_stay_length = recentStayLength;\r\n    participant.data.drug_of_choice = drugChoice;\r\n    participant.data.start_date = startDate;\r\n    participant.data.mat_entering_try = mat;\r\n    participant.data.tanf = tanf;\r\n    participant.data.charges = chargesDescr;\r\n    participant.data.coping_period_length = copingLength;\r\n    participant.data.needs_ged = needsGed;\r\n    participant.data.employment_status_entering = employmentDetails;\r\n\r\n    //Log participant\r\n    console.log(\"participant\", participant);\r\n\r\n    //Make api call to update reservation\r\n    async function newParticipant(participant) {\r\n      try {\r\n        const response = await createParticipant(participant);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await newParticipant(participant);\r\n\r\n    //Reset fields\r\n    setFirstName(\"\");\r\n    setLastName(\"\");\r\n\r\n    //Go back to dashboard page\r\n    //history.push(`/participants/dashboard`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Enroll Participant</h1>\r\n      <EnrollForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        gender={gender}\r\n        handleGenderChange={handleGenderChange}\r\n        dob={dob}\r\n        handleDobChange={handleDobChange}\r\n        homeCounty={homeCounty}\r\n        handleHomeCountyChange={handleHomeCountyChange}\r\n        incidentNum={incidentNum}\r\n        handleIncidentNumChange={handleIncidentNumChange}\r\n        incomeBefore={incomeBefore}\r\n        handleIncomeBeforeChange={handleIncomeBeforeChange}\r\n        accountsPrior={accountsPrior}\r\n        handleAccountsPriorChange={handleAccountsPriorChange}\r\n        lastUseDate={lastUseDate}\r\n        handleLastUseChange={handleLastUseChange}\r\n        yearsInside={yearsInside}\r\n        handleYearsInsideChange={handleYearsInsideChange}\r\n        sexOff={sexOff}\r\n        handleSexOffChange={handleSexOffChange}\r\n        recentStayLength={recentStayLength}\r\n        handleRecentStayLengthChange={handleRecentStayLengthChange}\r\n        drugChoice={drugChoice}\r\n        handleDrugChoiceChange={handleDrugChoiceChange}\r\n        startDate={startDate}\r\n        handleStartDateChange={handleStartDateChange}\r\n        mat={mat}\r\n        handleMatChange={handleMatChange}\r\n        tanf={tanf}\r\n        handleTanfChange={handleTanfChange}\r\n        chargesDescr={chargesDescr}\r\n        handleChargesDescrChange={handleChargesDescrChange}\r\n        copingLength={copingLength}\r\n        handleCopingLengthChange={handleCopingLengthChange}\r\n        needsGed={needsGed}\r\n        handleNeedsGedChange={handleNeedsGedChange}\r\n        employmentDetails={employmentDetails}\r\n        handleEmploymentDetailsChange={handleEmploymentDetailsChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default EnrollParticipant;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\ErrorCaught.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollForm.js",["378","379"],"//The Seat Button is used to seat a reservation\r\n//The button will appear next to a reservation on the Dashboard\r\n//The two props are visibility and reservationId\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nfunction EnrollForm({\r\n  firstName,\r\n  handleFirstNameChange,\r\n  lastName,\r\n  handleLastNameChange,\r\n  gender,\r\n  handleGenderChange,\r\n  dob,\r\n  handleDobChange,\r\n  homeCounty,\r\n  handleHomeCountyChange,\r\n  incidentNum,\r\n  handleIncidentNumChange,\r\n  incomeBefore,\r\n  handleIncomeBeforeChange,\r\n  accountsPrior,\r\n  handleAccountsPriorChange,\r\n  lastUseDate,\r\n  handleLastUseChange,\r\n  yearsInside,\r\n  handleYearsInsideChange,\r\n  sexOff,\r\n  handleSexOffChange,\r\n  recentStayLength,\r\n  handleRecentStayLengthChange,\r\n  drugChoice,\r\n  handleDrugChoiceChange,\r\n  startDate,\r\n  handleStartDateChange,\r\n  mat,\r\n  handleMatChange,\r\n  tanf,\r\n  handleTanfChange,\r\n  chargesDescr,\r\n  handleChargesDescrChange,\r\n  copingLength,\r\n  handleCopingLengthChange,\r\n  needsGed,\r\n  handleNeedsGedChange,\r\n  employmentDetails,\r\n  handleEmploymentDetailsChange,\r\n  handleSubmit,\r\n  handleCancel,\r\n}) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"first_name\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"first_name\"\r\n              className=\"form-control\"\r\n              id=\"first_name\"\r\n              aria-describedby=\"emailHelp\"\r\n              onChange={handleFirstNameChange}\r\n              value={firstName}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"last_name\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"last_name\"\r\n              className=\"form-control\"\r\n              id=\"last_name\"\r\n              onChange={handleLastNameChange}\r\n              value={lastName}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"gender\">Gender</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"gender\"\r\n              className=\"form-control\"\r\n              id=\"gender\"\r\n              onChange={handleGenderChange}\r\n              value={gender}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"dob\">Date of Birth</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"dob\"\r\n              className=\"form-control\"\r\n              id=\"dob\"\r\n              onChange={handleDobChange}\r\n              value={dob}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"home_county\">Home County</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"home_county\"\r\n              className=\"form-control\"\r\n              id=\"home_county\"\r\n              onChange={handleHomeCountyChange}\r\n              value={homeCounty}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"incident_num\">Incident Number</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"incident_num\"\r\n              className=\"form-control\"\r\n              id=\"incident_num\"\r\n              onChange={handleIncidentNumChange}\r\n              value={incidentNum}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"income_before\">Income Before Entering TRY</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"income_before\"\r\n              className=\"form-control\"\r\n              id=\"income_before\"\r\n              onChange={handleIncomeBeforeChange}\r\n              value={incomeBefore}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"accounts_prior\">Had Accounts Before TRY?</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"accounts_prior\"\r\n              className=\"form-control\"\r\n              id=\"accounts_prior\"\r\n              onChange={handleAccountsPriorChange}\r\n              value={accountsPrior}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"last_use_date\">Last Use Date</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"last_use_date\"\r\n              className=\"form-control\"\r\n              id=\"last_use_date\"\r\n              onChange={handleLastUseChange}\r\n              value={lastUseDate}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"years_inside\">Years on the Inside</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"years_inside\"\r\n              className=\"form-control\"\r\n              id=\"years_inside\"\r\n              onChange={handleYearsInsideChange}\r\n              value={yearsInside}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"sex_offender\">Sex Offender?</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"sex_offender\"\r\n              className=\"form-control\"\r\n              id=\"sex_offender\"\r\n              onChange={handleSexOffChange}\r\n              value={sexOff}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"recent_length\">Recent Stay Length</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"recent_length\"\r\n              className=\"form-control\"\r\n              id=\"recent_length\"\r\n              onChange={handleRecentStayLengthChange}\r\n              value={recentStayLength}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"drug_of_choice\">Drug of Choice?</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"drug_of_choice\"\r\n              className=\"form-control\"\r\n              id=\"drug_of_choice\"\r\n              onChange={handleDrugChoiceChange}\r\n              value={drugChoice}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"start_date\">Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"start_date\"\r\n              className=\"form-control\"\r\n              id=\"start_date\"\r\n              onChange={handleStartDateChange}\r\n              value={startDate}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"mat\">MAT</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"mat\"\r\n              className=\"form-control\"\r\n              id=\"mat\"\r\n              onChange={handleMatChange}\r\n              value={mat}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"tanf\">TANF</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"tanf\"\r\n              className=\"form-control\"\r\n              id=\"tanf\"\r\n              onChange={handleTanfChange}\r\n              value={tanf}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"charges_descr\">Charges Description:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"charges_descr\"\r\n              className=\"form-control\"\r\n              id=\"charges_descr\"\r\n              onChange={handleChargesDescrChange}\r\n              value={chargesDescr}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"coping_length\">Coping Length:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"coping_length\"\r\n              className=\"form-control\"\r\n              id=\"coping_length\"\r\n              onChange={handleCopingLengthChange}\r\n              value={copingLength}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"needs_ged\">Needs GED?:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"needs_ged\"\r\n              className=\"form-control\"\r\n              id=\"needs_ged\"\r\n              onChange={handleNeedsGedChange}\r\n              value={needsGed}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"employment_details\">Employment Details:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"employment_details\"\r\n              className=\"form-control\"\r\n              id=\"employment_details\"\r\n              onChange={handleEmploymentDetailsChange}\r\n              value={employmentDetails}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Submit\r\n      </button>{\" \"}\r\n      <button type=\"cancel\" className=\"btn btn-primary\" onClick={handleCancel}>\r\n        Cancel\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default EnrollForm;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenu.js",["380","381"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\Search.js",["382","383","384"],"import React, { useEffect, useState } from \"react\";\r\nimport SearchResults from \"./SearchResults\";\r\nimport { listInstances } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Search({ date }) {\r\n  //Create the phone nubmer state variable and add event listeners\r\n  const [last_name, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n  const [visibilityStatus, setVisibilityStatus] = useState(null);\r\n  const [instances, setInstances] = useState([]);\r\n  const [instancesError, setInstancesError] = useState(null);\r\n\r\n  //UseEffect is used to get the reservations\r\n  useEffect(loadDashboard, [last_name]);\r\n\r\n  //Load all of the reservations filtered by phone number\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setInstancesError(null);\r\n    console.log(\"last_name\", last_name);\r\n\r\n    listInstances({ last_name }, abortController.signal)\r\n      .then((response) => {\r\n        setInstances(response);\r\n        console.log(\"instances\", response);\r\n      })\r\n      .catch(setInstancesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //The handleSubmit function merely shows the search results\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    loadDashboard();\r\n    setVisibilityStatus(true);\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage1\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  //Return the form to enter the phone number and show the results\r\n  return (\r\n    <main>\r\n      <h1>Find Instances</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"last_name\">Enter a Participant's Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            className=\"form-control\"\r\n            id=\"last_name\"\r\n            onChange={handleLastNameChange}\r\n            value={last_name}\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Find\r\n        </button>\r\n      </form>\r\n      <div>\r\n        <SearchResults\r\n          visibility={visibilityStatus}\r\n          last_name={last_name}\r\n          instances={instances}\r\n        />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\SearchResults.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\Documents.js",["385","386","387","388","389","390","391","392","393"],{"ruleId":"394","replacedBy":"395"},{"ruleId":"396","replacedBy":"397"},{"ruleId":"398","severity":1,"message":"399","line":17,"column":8,"nodeType":"400","messageId":"401","endLine":17,"endColumn":18},{"ruleId":"398","severity":1,"message":"402","line":28,"column":10,"nodeType":"400","messageId":"401","endLine":28,"endColumn":27},{"ruleId":"398","severity":1,"message":"403","line":30,"column":10,"nodeType":"400","messageId":"401","endLine":30,"endColumn":21},{"ruleId":"398","severity":1,"message":"404","line":34,"column":9,"nodeType":"400","messageId":"401","endLine":34,"endColumn":16},{"ruleId":"405","severity":1,"message":"406","line":38,"column":3,"nodeType":"407","messageId":"408","endLine":42,"endColumn":4},{"ruleId":"398","severity":1,"message":"409","line":122,"column":15,"nodeType":"400","messageId":"401","endLine":122,"endColumn":23},{"ruleId":"398","severity":1,"message":"409","line":166,"column":15,"nodeType":"400","messageId":"401","endLine":166,"endColumn":23},{"ruleId":"398","severity":1,"message":"399","line":3,"column":8,"nodeType":"400","messageId":"401","endLine":3,"endColumn":18},{"ruleId":"398","severity":1,"message":"402","line":13,"column":10,"nodeType":"400","messageId":"401","endLine":13,"endColumn":27},{"ruleId":"398","severity":1,"message":"399","line":11,"column":8,"nodeType":"400","messageId":"401","endLine":11,"endColumn":18},{"ruleId":"398","severity":1,"message":"403","line":25,"column":10,"nodeType":"400","messageId":"401","endLine":25,"endColumn":21},{"ruleId":"410","severity":1,"message":"411","line":63,"column":25,"nodeType":"412","endLine":63,"endColumn":31,"suggestions":"413"},{"ruleId":"398","severity":1,"message":"409","line":118,"column":15,"nodeType":"400","messageId":"401","endLine":118,"endColumn":23},{"ruleId":"398","severity":1,"message":"399","line":5,"column":8,"nodeType":"400","messageId":"401","endLine":5,"endColumn":18},{"ruleId":"398","severity":1,"message":"399","line":4,"column":8,"nodeType":"400","messageId":"401","endLine":4,"endColumn":18},{"ruleId":"398","severity":1,"message":"409","line":80,"column":17,"nodeType":"400","messageId":"401","endLine":80,"endColumn":25},{"ruleId":"398","severity":1,"message":"399","line":6,"column":8,"nodeType":"400","messageId":"401","endLine":6,"endColumn":18},{"ruleId":"398","severity":1,"message":"399","line":4,"column":8,"nodeType":"400","messageId":"401","endLine":4,"endColumn":18},{"ruleId":"398","severity":1,"message":"402","line":18,"column":10,"nodeType":"400","messageId":"401","endLine":18,"endColumn":27},{"ruleId":"398","severity":1,"message":"414","line":43,"column":9,"nodeType":"400","messageId":"401","endLine":43,"endColumn":21},{"ruleId":"398","severity":1,"message":"415","line":5,"column":17,"nodeType":"400","messageId":"401","endLine":5,"endColumn":26},{"ruleId":"398","severity":1,"message":"416","line":5,"column":28,"nodeType":"400","messageId":"401","endLine":5,"endColumn":36},{"ruleId":"398","severity":1,"message":"415","line":5,"column":17,"nodeType":"400","messageId":"401","endLine":5,"endColumn":26},{"ruleId":"398","severity":1,"message":"416","line":5,"column":28,"nodeType":"400","messageId":"401","endLine":5,"endColumn":36},{"ruleId":"394","replacedBy":"417"},{"ruleId":"396","replacedBy":"418"},{"ruleId":"398","severity":1,"message":"419","line":3,"column":10,"nodeType":"400","messageId":"401","endLine":3,"endColumn":18},{"ruleId":"398","severity":1,"message":"420","line":3,"column":35,"nodeType":"400","messageId":"401","endLine":3,"endColumn":46},{"ruleId":"398","severity":1,"message":"421","line":20,"column":10,"nodeType":"400","messageId":"401","endLine":20,"endColumn":15},{"ruleId":"398","severity":1,"message":"422","line":4,"column":3,"nodeType":"400","messageId":"401","endLine":4,"endColumn":18},{"ruleId":"398","severity":1,"message":"423","line":5,"column":3,"nodeType":"400","messageId":"401","endLine":5,"endColumn":20},{"ruleId":"398","severity":1,"message":"399","line":11,"column":8,"nodeType":"400","messageId":"401","endLine":11,"endColumn":18},{"ruleId":"398","severity":1,"message":"424","line":32,"column":10,"nodeType":"400","messageId":"401","endLine":32,"endColumn":20},{"ruleId":"398","severity":1,"message":"425","line":33,"column":10,"nodeType":"400","messageId":"401","endLine":33,"endColumn":21},{"ruleId":"398","severity":1,"message":"426","line":33,"column":23,"nodeType":"400","messageId":"401","endLine":33,"endColumn":37},{"ruleId":"398","severity":1,"message":"427","line":3,"column":10,"nodeType":"400","messageId":"401","endLine":3,"endColumn":27},{"ruleId":"398","severity":1,"message":"399","line":4,"column":8,"nodeType":"400","messageId":"401","endLine":4,"endColumn":18},{"ruleId":"398","severity":1,"message":"409","line":59,"column":17,"nodeType":"400","messageId":"401","endLine":59,"endColumn":25},{"ruleId":"398","severity":1,"message":"415","line":5,"column":17,"nodeType":"400","messageId":"401","endLine":5,"endColumn":26},{"ruleId":"398","severity":1,"message":"416","line":5,"column":28,"nodeType":"400","messageId":"401","endLine":5,"endColumn":36},{"ruleId":"394","replacedBy":"428"},{"ruleId":"396","replacedBy":"429"},{"ruleId":"398","severity":1,"message":"430","line":5,"column":21,"nodeType":"400","messageId":"401","endLine":5,"endColumn":31},{"ruleId":"398","severity":1,"message":"431","line":14,"column":20,"nodeType":"400","messageId":"401","endLine":14,"endColumn":31},{"ruleId":"398","severity":1,"message":"425","line":37,"column":10,"nodeType":"400","messageId":"401","endLine":37,"endColumn":21},{"ruleId":"398","severity":1,"message":"426","line":37,"column":23,"nodeType":"400","messageId":"401","endLine":37,"endColumn":37},{"ruleId":"398","severity":1,"message":"424","line":38,"column":10,"nodeType":"400","messageId":"401","endLine":38,"endColumn":20},{"ruleId":"398","severity":1,"message":"432","line":38,"column":22,"nodeType":"400","messageId":"401","endLine":38,"endColumn":35},{"ruleId":"410","severity":1,"message":"433","line":53,"column":6,"nodeType":"412","endLine":53,"endColumn":21,"suggestions":"434"},{"ruleId":"398","severity":1,"message":"409","line":67,"column":13,"nodeType":"400","messageId":"401","endLine":67,"endColumn":21},{"ruleId":"398","severity":1,"message":"435","line":19,"column":10,"nodeType":"400","messageId":"401","endLine":19,"endColumn":24},{"ruleId":"398","severity":1,"message":"426","line":20,"column":23,"nodeType":"400","messageId":"401","endLine":20,"endColumn":37},{"ruleId":"398","severity":1,"message":"432","line":21,"column":22,"nodeType":"400","messageId":"401","endLine":21,"endColumn":35},{"ruleId":"398","severity":1,"message":"404","line":23,"column":9,"nodeType":"400","messageId":"401","endLine":23,"endColumn":16},{"ruleId":"398","severity":1,"message":"436","line":2,"column":10,"nodeType":"400","messageId":"401","endLine":2,"endColumn":22},{"ruleId":"398","severity":1,"message":"430","line":5,"column":21,"nodeType":"400","messageId":"401","endLine":5,"endColumn":31},{"ruleId":"398","severity":1,"message":"437","line":24,"column":10,"nodeType":"400","messageId":"401","endLine":24,"endColumn":20},{"ruleId":"398","severity":1,"message":"438","line":25,"column":9,"nodeType":"400","messageId":"401","endLine":25,"endColumn":31},{"ruleId":"398","severity":1,"message":"425","line":47,"column":10,"nodeType":"400","messageId":"401","endLine":47,"endColumn":21},{"ruleId":"398","severity":1,"message":"426","line":47,"column":23,"nodeType":"400","messageId":"401","endLine":47,"endColumn":37},{"ruleId":"398","severity":1,"message":"424","line":48,"column":10,"nodeType":"400","messageId":"401","endLine":48,"endColumn":20},{"ruleId":"398","severity":1,"message":"432","line":48,"column":22,"nodeType":"400","messageId":"401","endLine":48,"endColumn":35},{"ruleId":"410","severity":1,"message":"439","line":72,"column":6,"nodeType":"412","endLine":72,"endColumn":18,"suggestions":"440"},{"ruleId":"398","severity":1,"message":"435","line":18,"column":10,"nodeType":"400","messageId":"401","endLine":18,"endColumn":24},{"ruleId":"398","severity":1,"message":"425","line":19,"column":10,"nodeType":"400","messageId":"401","endLine":19,"endColumn":21},{"ruleId":"398","severity":1,"message":"426","line":19,"column":23,"nodeType":"400","messageId":"401","endLine":19,"endColumn":37},{"ruleId":"398","severity":1,"message":"424","line":20,"column":10,"nodeType":"400","messageId":"401","endLine":20,"endColumn":20},{"ruleId":"398","severity":1,"message":"432","line":20,"column":22,"nodeType":"400","messageId":"401","endLine":20,"endColumn":35},{"ruleId":"398","severity":1,"message":"404","line":25,"column":9,"nodeType":"400","messageId":"401","endLine":25,"endColumn":16},{"ruleId":"398","severity":1,"message":"441","line":6,"column":10,"nodeType":"400","messageId":"401","endLine":6,"endColumn":14},{"ruleId":"398","severity":1,"message":"442","line":19,"column":10,"nodeType":"400","messageId":"401","endLine":19,"endColumn":23},{"ruleId":"398","severity":1,"message":"425","line":24,"column":10,"nodeType":"400","messageId":"401","endLine":24,"endColumn":21},{"ruleId":"398","severity":1,"message":"426","line":24,"column":23,"nodeType":"400","messageId":"401","endLine":24,"endColumn":37},{"ruleId":"398","severity":1,"message":"424","line":25,"column":10,"nodeType":"400","messageId":"401","endLine":25,"endColumn":20},{"ruleId":"398","severity":1,"message":"432","line":25,"column":22,"nodeType":"400","messageId":"401","endLine":25,"endColumn":35},{"ruleId":"398","severity":1,"message":"404","line":27,"column":9,"nodeType":"400","messageId":"401","endLine":27,"endColumn":16},{"ruleId":"398","severity":1,"message":"443","line":3,"column":24,"nodeType":"400","messageId":"401","endLine":3,"endColumn":39},{"ruleId":"398","severity":1,"message":"444","line":3,"column":41,"nodeType":"400","messageId":"401","endLine":3,"endColumn":58},{"ruleId":"398","severity":1,"message":"399","line":5,"column":8,"nodeType":"400","messageId":"401","endLine":5,"endColumn":18},{"ruleId":"398","severity":1,"message":"424","line":24,"column":10,"nodeType":"400","messageId":"401","endLine":24,"endColumn":20},{"ruleId":"398","severity":1,"message":"432","line":24,"column":22,"nodeType":"400","messageId":"401","endLine":24,"endColumn":35},{"ruleId":"398","severity":1,"message":"425","line":25,"column":10,"nodeType":"400","messageId":"401","endLine":25,"endColumn":21},{"ruleId":"398","severity":1,"message":"426","line":25,"column":23,"nodeType":"400","messageId":"401","endLine":25,"endColumn":37},{"ruleId":"398","severity":1,"message":"404","line":31,"column":9,"nodeType":"400","messageId":"401","endLine":31,"endColumn":16},{"ruleId":"398","severity":1,"message":"443","line":3,"column":24,"nodeType":"400","messageId":"401","endLine":3,"endColumn":39},{"ruleId":"398","severity":1,"message":"444","line":3,"column":41,"nodeType":"400","messageId":"401","endLine":3,"endColumn":58},{"ruleId":"398","severity":1,"message":"445","line":4,"column":8,"nodeType":"400","messageId":"401","endLine":4,"endColumn":15},{"ruleId":"398","severity":1,"message":"399","line":6,"column":8,"nodeType":"400","messageId":"401","endLine":6,"endColumn":18},{"ruleId":"398","severity":1,"message":"424","line":28,"column":10,"nodeType":"400","messageId":"401","endLine":28,"endColumn":20},{"ruleId":"398","severity":1,"message":"432","line":28,"column":22,"nodeType":"400","messageId":"401","endLine":28,"endColumn":35},{"ruleId":"398","severity":1,"message":"425","line":29,"column":10,"nodeType":"400","messageId":"401","endLine":29,"endColumn":21},{"ruleId":"398","severity":1,"message":"426","line":29,"column":23,"nodeType":"400","messageId":"401","endLine":29,"endColumn":37},{"ruleId":"398","severity":1,"message":"404","line":35,"column":9,"nodeType":"400","messageId":"401","endLine":35,"endColumn":16},{"ruleId":"398","severity":1,"message":"443","line":3,"column":24,"nodeType":"400","messageId":"401","endLine":3,"endColumn":39},{"ruleId":"398","severity":1,"message":"444","line":3,"column":41,"nodeType":"400","messageId":"401","endLine":3,"endColumn":58},{"ruleId":"398","severity":1,"message":"399","line":5,"column":8,"nodeType":"400","messageId":"401","endLine":5,"endColumn":18},{"ruleId":"398","severity":1,"message":"424","line":27,"column":10,"nodeType":"400","messageId":"401","endLine":27,"endColumn":20},{"ruleId":"398","severity":1,"message":"432","line":27,"column":22,"nodeType":"400","messageId":"401","endLine":27,"endColumn":35},{"ruleId":"398","severity":1,"message":"425","line":28,"column":10,"nodeType":"400","messageId":"401","endLine":28,"endColumn":21},{"ruleId":"398","severity":1,"message":"426","line":28,"column":23,"nodeType":"400","messageId":"401","endLine":28,"endColumn":37},{"ruleId":"398","severity":1,"message":"404","line":34,"column":9,"nodeType":"400","messageId":"401","endLine":34,"endColumn":16},{"ruleId":"398","severity":1,"message":"443","line":3,"column":24,"nodeType":"400","messageId":"401","endLine":3,"endColumn":39},{"ruleId":"398","severity":1,"message":"444","line":3,"column":41,"nodeType":"400","messageId":"401","endLine":3,"endColumn":58},{"ruleId":"398","severity":1,"message":"445","line":4,"column":8,"nodeType":"400","messageId":"401","endLine":4,"endColumn":15},{"ruleId":"398","severity":1,"message":"399","line":6,"column":8,"nodeType":"400","messageId":"401","endLine":6,"endColumn":18},{"ruleId":"398","severity":1,"message":"424","line":27,"column":10,"nodeType":"400","messageId":"401","endLine":27,"endColumn":20},{"ruleId":"398","severity":1,"message":"432","line":27,"column":22,"nodeType":"400","messageId":"401","endLine":27,"endColumn":35},{"ruleId":"398","severity":1,"message":"425","line":28,"column":10,"nodeType":"400","messageId":"401","endLine":28,"endColumn":21},{"ruleId":"398","severity":1,"message":"426","line":28,"column":23,"nodeType":"400","messageId":"401","endLine":28,"endColumn":37},{"ruleId":"398","severity":1,"message":"404","line":34,"column":9,"nodeType":"400","messageId":"401","endLine":34,"endColumn":16},{"ruleId":"398","severity":1,"message":"415","line":1,"column":17,"nodeType":"400","messageId":"401","endLine":1,"endColumn":26},{"ruleId":"398","severity":1,"message":"446","line":2,"column":10,"nodeType":"400","messageId":"401","endLine":2,"endColumn":19},{"ruleId":"398","severity":1,"message":"422","line":4,"column":3,"nodeType":"400","messageId":"401","endLine":4,"endColumn":18},{"ruleId":"398","severity":1,"message":"423","line":5,"column":3,"nodeType":"400","messageId":"401","endLine":5,"endColumn":20},{"ruleId":"398","severity":1,"message":"443","line":6,"column":3,"nodeType":"400","messageId":"401","endLine":6,"endColumn":18},{"ruleId":"398","severity":1,"message":"399","line":11,"column":8,"nodeType":"400","messageId":"401","endLine":11,"endColumn":18},{"ruleId":"398","severity":1,"message":"424","line":88,"column":10,"nodeType":"400","messageId":"401","endLine":88,"endColumn":20},{"ruleId":"398","severity":1,"message":"425","line":89,"column":10,"nodeType":"400","messageId":"401","endLine":89,"endColumn":21},{"ruleId":"398","severity":1,"message":"426","line":89,"column":23,"nodeType":"400","messageId":"401","endLine":89,"endColumn":37},{"ruleId":"398","severity":1,"message":"415","line":5,"column":17,"nodeType":"400","messageId":"401","endLine":5,"endColumn":26},{"ruleId":"398","severity":1,"message":"416","line":5,"column":28,"nodeType":"400","messageId":"401","endLine":5,"endColumn":36},{"ruleId":"398","severity":1,"message":"415","line":5,"column":17,"nodeType":"400","messageId":"401","endLine":5,"endColumn":26},{"ruleId":"398","severity":1,"message":"416","line":5,"column":28,"nodeType":"400","messageId":"401","endLine":5,"endColumn":36},{"ruleId":"398","severity":1,"message":"399","line":4,"column":8,"nodeType":"400","messageId":"401","endLine":4,"endColumn":18},{"ruleId":"398","severity":1,"message":"435","line":18,"column":10,"nodeType":"400","messageId":"401","endLine":18,"endColumn":24},{"ruleId":"398","severity":1,"message":"414","line":46,"column":9,"nodeType":"400","messageId":"401","endLine":46,"endColumn":21},{"ruleId":"398","severity":1,"message":"443","line":3,"column":24,"nodeType":"400","messageId":"401","endLine":3,"endColumn":39},{"ruleId":"398","severity":1,"message":"444","line":3,"column":41,"nodeType":"400","messageId":"401","endLine":3,"endColumn":58},{"ruleId":"398","severity":1,"message":"445","line":4,"column":8,"nodeType":"400","messageId":"401","endLine":4,"endColumn":15},{"ruleId":"398","severity":1,"message":"399","line":6,"column":8,"nodeType":"400","messageId":"401","endLine":6,"endColumn":18},{"ruleId":"398","severity":1,"message":"424","line":29,"column":10,"nodeType":"400","messageId":"401","endLine":29,"endColumn":20},{"ruleId":"398","severity":1,"message":"432","line":29,"column":22,"nodeType":"400","messageId":"401","endLine":29,"endColumn":35},{"ruleId":"398","severity":1,"message":"425","line":30,"column":10,"nodeType":"400","messageId":"401","endLine":30,"endColumn":21},{"ruleId":"398","severity":1,"message":"426","line":30,"column":23,"nodeType":"400","messageId":"401","endLine":30,"endColumn":37},{"ruleId":"398","severity":1,"message":"404","line":36,"column":9,"nodeType":"400","messageId":"401","endLine":36,"endColumn":16},"no-native-reassign",["447"],"no-negated-in-lhs",["448"],"no-unused-vars","'ErrorAlert' is defined but never used.","Identifier","unusedVar","'reservationsError' is assigned a value but never used.","'tablesError' is assigned a value but never used.","'history' is assigned a value but never used.","no-extend-native","Date prototype is read only, properties should not be added.","AssignmentExpression","unexpected","'response' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadPeople'. Either include it or remove the dependency array.","ArrayExpression",["449"],"'handleCancel' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.",["447"],["448"],"'Redirect' is defined but never used.","'useLocation' is defined but never used.","'today' is defined but never used.","'readReservation' is defined but never used.","'updateReservation' is defined but never used.","'errMessage' is assigned a value but never used.","'visibility3' is assigned a value but never used.","'setVisibility3' is assigned a value but never used.","'createReservation' is defined but never used.",["447"],["448"],"'useHistory' is defined but never used.","'setStatuses' is assigned a value but never used.","'setErrMessage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'incidentId'. Either include it or remove the dependency array.",["450"],"'instancesError' is assigned a value but never used.","'createStatus' is defined but never used.","'statusName' is assigned a value but never used.","'handleStatusNameChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dischargeDate' and 'startDate'. Either include them or remove the dependency array.",["451"],"'Link' is defined but never used.","'statusesError' is assigned a value but never used.","'readParticipant' is defined but never used.","'updateParticipant' is defined but never used.","'ResForm' is defined but never used.","'useParams' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"452","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},"Update the dependencies array to be: [date, loadPeople]",{"range":"458","text":"459"},"Update the dependencies array to be: [incidentId, participantId]",{"range":"460","text":"461"},"Update the dependencies array to be: [dischargeDate, instanceId, startDate]",{"range":"462","text":"463"},[2073,2079],"[date, loadPeople]",[1927,1942],"[incidentId, participantId]",[2812,2824],"[dischargeDate, instanceId, startDate]"]