[{"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\index.js":"1","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\App.js":"2","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Layout.js":"3","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Menu.js":"4","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Routes.js":"5","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\NotFound.js":"6","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\Dashboard.js":"7","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\date-time.js":"8","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\api.js":"9","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\ErrorAlert.js":"10","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\format-reservation-date.js":"11","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Reservations.js":"12","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Seat.js":"13","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\AddTable.js":"14","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\NewReservation.js":"15","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\EditReservation.js":"16","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Search.js":"17","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\SearchResults.js":"18","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\SeatButton.js":"19","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\FinishButton.js":"20","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\CancelButton.js":"21","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\PastDateError.js":"22","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\TuesdayError.js":"23","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\OccupiedError.js":"24","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\CapacityError.js":"25","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\TimeError.js":"26","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\ResForm.js":"27","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\ErrorCaught.js":"28","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\index.js":"29","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\App.js":"30","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Layout.js":"31","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Menu.js":"32","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Routes.js":"33","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\NotFound.js":"34","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\NewParticipant.js":"35","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\date-time.js":"36","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\api.js":"37","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\ErrorAlert.js":"38","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\format-reservation-date.js":"39","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\AddStatus.js":"40","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\dashboard\\ParticipantsDashboard.js":"41","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\RecCheck.js":"42","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\dashboard\\RecDashboard.js":"43","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ViewParticipant.js":"44","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\ErrorCaught.js":"45","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenu.js":"46","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\Search.js":"47","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\SearchResults.js":"48","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantNew.js":"49","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollFormOld.js":"50","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantNewForm.js":"51","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollSearch.js":"52","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\NewInstance.js":"53","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollHome.js":"54","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollNew.js":"55","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\dashboard\\RecPrevInstances.js":"56","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\DischargeParticipant.js":"57","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\DischargeForm.js":"58","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\Reporting.js":"59","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\data-importer\\Importer.js":"60","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ViewInstance.js":"61","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenu2.js":"62","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\EnrollEdit.js":"63","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\EnrollForm.js":"64","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\StatusEdit.js":"65","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\StatusForm.js":"66","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\DischargeEdit.js":"67","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\DischargeForm.js":"68","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\RecEdit.js":"69","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\RecForm.js":"70","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\View_Edit_Status.js":"71","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\ViewAllStatuses.js":"72","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\View_Edit_Participant.js":"73"},{"size":299,"mtime":1632929090351,"results":"74","hashOfConfig":"75"},{"size":352,"mtime":1632929090348,"results":"76","hashOfConfig":"75"},{"size":579,"mtime":1632929090353,"results":"77","hashOfConfig":"75"},{"size":1879,"mtime":1632929090354,"results":"78","hashOfConfig":"75"},{"size":1878,"mtime":1637426666050,"results":"79","hashOfConfig":"75"},{"size":345,"mtime":1632929090355,"results":"80","hashOfConfig":"75"},{"size":9807,"mtime":1639824012377,"results":"81","hashOfConfig":"75"},{"size":2468,"mtime":1632929090358,"results":"82","hashOfConfig":"75"},{"size":5480,"mtime":1639775206136,"results":"83","hashOfConfig":"75"},{"size":505,"mtime":1632929090352,"results":"84","hashOfConfig":"75"},{"size":647,"mtime":1632929090358,"results":"85","hashOfConfig":"75"},{"size":3380,"mtime":1634328747899,"results":"86","hashOfConfig":"75"},{"size":5825,"mtime":1639822987223,"results":"87","hashOfConfig":"75"},{"size":3207,"mtime":1639825565342,"results":"88","hashOfConfig":"75"},{"size":6037,"mtime":1639826532773,"results":"89","hashOfConfig":"75"},{"size":4762,"mtime":1639825602327,"results":"90","hashOfConfig":"75"},{"size":2486,"mtime":1639422719827,"results":"91","hashOfConfig":"75"},{"size":1457,"mtime":1639775206133,"results":"92","hashOfConfig":"75"},{"size":648,"mtime":1639411982223,"results":"93","hashOfConfig":"75"},{"size":1031,"mtime":1639423154745,"results":"94","hashOfConfig":"75"},{"size":1033,"mtime":1639423167018,"results":"95","hashOfConfig":"75"},{"size":501,"mtime":1639423065348,"results":"96","hashOfConfig":"75"},{"size":491,"mtime":1639423021387,"results":"97","hashOfConfig":"75"},{"size":472,"mtime":1639423073156,"results":"98","hashOfConfig":"75"},{"size":443,"mtime":1639423115815,"results":"99","hashOfConfig":"75"},{"size":511,"mtime":1639423028074,"results":"100","hashOfConfig":"75"},{"size":2887,"mtime":1639775206131,"results":"101","hashOfConfig":"75"},{"size":393,"mtime":1639823323987,"results":"102","hashOfConfig":"75"},{"size":299,"mtime":1632929090351,"results":"103","hashOfConfig":"104"},{"size":352,"mtime":1632929090348,"results":"105","hashOfConfig":"104"},{"size":579,"mtime":1632929090353,"results":"106","hashOfConfig":"104"},{"size":2178,"mtime":1671713659676,"results":"107","hashOfConfig":"104"},{"size":4822,"mtime":1672258182167,"results":"108","hashOfConfig":"104"},{"size":345,"mtime":1632929090355,"results":"109","hashOfConfig":"104"},{"size":3050,"mtime":1671572832898,"results":"110","hashOfConfig":"104"},{"size":2468,"mtime":1632929090358,"results":"111","hashOfConfig":"104"},{"size":6715,"mtime":1672349491173,"results":"112","hashOfConfig":"104"},{"size":505,"mtime":1632929090352,"results":"113","hashOfConfig":"104"},{"size":647,"mtime":1632929090358,"results":"114","hashOfConfig":"104"},{"size":7496,"mtime":1672264690744,"results":"115","hashOfConfig":"104"},{"size":3420,"mtime":1672248338753,"results":"116","hashOfConfig":"104"},{"size":12398,"mtime":1672418695612,"results":"117","hashOfConfig":"104"},{"size":5591,"mtime":1672248627973,"results":"118","hashOfConfig":"104"},{"size":5613,"mtime":1672417500480,"results":"119","hashOfConfig":"104"},{"size":393,"mtime":1643496164453,"results":"120","hashOfConfig":"104"},{"size":1635,"mtime":1671719638511,"results":"121","hashOfConfig":"104"},{"size":4843,"mtime":1671661953219,"results":"122","hashOfConfig":"104"},{"size":2657,"mtime":1671808535479,"results":"123","hashOfConfig":"104"},{"size":2884,"mtime":1672165220084,"results":"124","hashOfConfig":"104"},{"size":10402,"mtime":1671820721684,"results":"125","hashOfConfig":"104"},{"size":2200,"mtime":1671719303628,"results":"126","hashOfConfig":"104"},{"size":1765,"mtime":1655749475248,"results":"127","hashOfConfig":"104"},{"size":8221,"mtime":1664659551686,"results":"128","hashOfConfig":"104"},{"size":2894,"mtime":1655747191081,"results":"129","hashOfConfig":"104"},{"size":9172,"mtime":1672165147328,"results":"130","hashOfConfig":"104"},{"size":4066,"mtime":1672248845973,"results":"131","hashOfConfig":"104"},{"size":6489,"mtime":1672163786304,"results":"132","hashOfConfig":"104"},{"size":7114,"mtime":1671821582089,"results":"133","hashOfConfig":"104"},{"size":6268,"mtime":1671298834956,"results":"134","hashOfConfig":"104"},{"size":2002,"mtime":1671469277972,"results":"135","hashOfConfig":"104"},{"size":5191,"mtime":1671808539482,"results":"136","hashOfConfig":"104"},{"size":1237,"mtime":1671719353880,"results":"137","hashOfConfig":"104"},{"size":9239,"mtime":1672249502556,"results":"138","hashOfConfig":"104"},{"size":10334,"mtime":1672249539726,"results":"139","hashOfConfig":"104"},{"size":11773,"mtime":1672249807310,"results":"140","hashOfConfig":"104"},{"size":12903,"mtime":1672249866290,"results":"141","hashOfConfig":"104"},{"size":6851,"mtime":1672249102033,"results":"142","hashOfConfig":"104"},{"size":6708,"mtime":1672249125436,"results":"143","hashOfConfig":"104"},{"size":8873,"mtime":1672249623810,"results":"144","hashOfConfig":"104"},{"size":10390,"mtime":1672249662563,"results":"145","hashOfConfig":"104"},{"size":7566,"mtime":1672334502040,"results":"146","hashOfConfig":"104"},{"size":4200,"mtime":1672252066523,"results":"147","hashOfConfig":"104"},{"size":3328,"mtime":1672249968336,"results":"148","hashOfConfig":"104"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},"bj93m2",{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"151"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"151"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"151"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"151"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"151"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"151"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"151"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"151"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},"1hl4ygm",{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"217"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"217"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"240"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"217"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"217"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"217"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"217"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"217"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"217"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"217"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"217"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"217"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"217"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"217"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"217"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"217"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"217"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"217"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"217"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"217"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"217"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"217"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"217"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"217"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"217"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"217"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"217"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"217"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"217"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"217"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"217"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"217"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"217"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"217"},"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\index.js",[],["340","341"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\App.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Layout.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Menu.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\Routes.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\NotFound.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\Dashboard.js",["342","343","344","345","346","347","348"],"//The main functions of the Dashboard component are to display all of the reservations\r\n//and allow the user to seat, edit, or cancel reservations and to display all of the\r\n//tables and allow the user to finish the tables\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport {\r\n  listReservations,\r\n  updateReservationStatus,\r\n  updateTableStatus,\r\n} from \"../utils/api\";\r\nimport { listTables } from \"../utils/api\";\r\nimport SeatButton from \"./SeatButton\";\r\nimport FinishButton from \"./FinishButton\";\r\nimport CancelButton from \"./CancelButton\";\r\nimport ErrorCaught from \"../reservations/ErrorCaught\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Dashboard({ date }) {\r\n  //The main state variables are reservations and tables which are arrays to be displayed\r\n  const [reservations, setReservations] = useState([]);\r\n  const [reservationsError, setReservationsError] = useState(null);\r\n  const [tables, setTables] = useState([]);\r\n  const [tablesError, setTablesError] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  //Declare an instance of the useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Create the functionality for the prev, today, and next buttons to toggle dates\r\n  //Function to add a day to a date\r\n  Date.prototype.addDays = function (days) {\r\n    var date = new Date(this.valueOf());\r\n    date.setDate(date.getDate() + days);\r\n    return date;\r\n  };\r\n\r\n  //Extract the year, month, and day from the date passed in and use it to\r\n  //create a date that can be incremented and decremented\r\n  let month = Number(date.substring(5, 7)) - 1;\r\n  let day = Number(date.substring(8, 10));\r\n  let year = Number(date.substring(0, 4));\r\n\r\n  let currDate = new Date(year, month, day);\r\n\r\n  //For the prevDate and nextDate, convert the date to a text string\r\n  //Convert prevDate to a text string\r\n  let prevDate = currDate.addDays(-1);\r\n  let prevDateDay = prevDate.getDate();\r\n  if (prevDateDay < 10) prevDateDay = \"0\" + prevDateDay;\r\n  let prevDateMonth = prevDate.getMonth() + 1;\r\n  if (prevDateMonth < 10) prevDateMonth = \"0\" + prevDateMonth;\r\n  let prevDateString =\r\n    prevDate.getFullYear() + \"-\" + prevDateMonth + \"-\" + prevDateDay;\r\n\r\n  //Convert nextDate to a text string\r\n  let nextDate = currDate.addDays(1);\r\n  let nextDateDay = nextDate.getDate();\r\n  if (nextDateDay < 10) nextDateDay = \"0\" + nextDateDay;\r\n  let nextDateMonth = nextDate.getMonth() + 1;\r\n  if (nextDateMonth < 10) nextDateMonth = \"0\" + nextDateMonth;\r\n  let nextDateString =\r\n    nextDate.getFullYear() + \"-\" + nextDateMonth + \"-\" + nextDateDay;\r\n  console.log(\"nextDateString\", nextDateString);\r\n\r\n  //Use useEffect to load the reservations and the tables\r\n\r\n  //Load reservations\r\n  useEffect(loadDashboard, [date]);\r\n\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setReservationsError(null);\r\n\r\n    listReservations({ date }, abortController.signal)\r\n      .then(setReservations)\r\n      .catch(setReservationsError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //Load tables\r\n  useEffect(loadTables, [date]);\r\n\r\n  function loadTables() {\r\n    const abortController = new AbortController();\r\n    setTablesError(null);\r\n    listTables(abortController.signal).then(setTables).catch(setTablesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //Create the handleFinish function to finish a table\r\n  //This function changes the status of a reservation to 'finished' and the status of table to 'free'\r\n  async function handleFinish(reservationId, tableId) {\r\n    setVisibility3(null);\r\n\r\n    //Create a reservation object with a reservation_id and set the status to 'finished'\r\n    console.log(\"reservationId\", reservationId);\r\n    let reservation = {\r\n      data: {},\r\n    };\r\n\r\n    reservation.data.reservation_id = reservationId;\r\n    reservation.data.status = \"finished\";\r\n\r\n    //Create a table object with a table_id and set the reservation_id to null (which makes it 'free')\r\n    let table = {\r\n      data: {},\r\n    };\r\n\r\n    table.data.table_id = tableId;\r\n    table.data.reservation_id = null;\r\n\r\n    //Make an api call to update the reservation's status\r\n    async function changeReservation(reservation) {\r\n      try {\r\n        const response = await updateReservationStatus(reservation);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservationStatus API call: \", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n\r\n    if (reservationId !== null) changeReservation(reservation);\r\n\r\n    //Make an api call to update the table's status\r\n    async function changeTable(table) {\r\n      try {\r\n        const response = await updateTableStatus(table);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateTableStatus API call: \", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n    await changeTable(table);\r\n\r\n    //Reload reservations and tables\r\n    loadTables();\r\n    loadDashboard();\r\n  }\r\n\r\n  //Create a handleCancel function to cancel a reservation\r\n  //This function sets a reservation's status to cancelled\r\n  async function handleCancel(reservationId) {\r\n    setVisibility3(null);\r\n\r\n    //Create a reservation object with a reservation_id and set the status to cancelled\r\n    let reservation = {\r\n      data: {},\r\n    };\r\n\r\n    reservation.data.reservation_id = reservationId;\r\n    reservation.data.status = \"cancelled\";\r\n\r\n    //Make an api call to update the status of the reservation\r\n    async function changeReservation(reservation) {\r\n      try {\r\n        const response = await updateReservationStatus(reservation);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservationStatus API call: \", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n    await changeReservation(reservation);\r\n    loadDashboard();\r\n  }\r\n\r\n  //Create table rows of reservations using the 'reservations' state array\r\n  const reservationLinks = reservations.map((reservation) => {\r\n    let visible = reservation.status === \"booked\" ? true : null;\r\n    let visible2 = reservation.status !== \"cancelled\" ? true : null;\r\n\r\n    return (\r\n      <tr key={reservation.reservation_id}>\r\n        <td>{reservation.reservation_id}</td>\r\n        <td>{reservation.first_name}</td>\r\n        <td>{reservation.last_name}</td>\r\n        <td>{reservation.mobile_number}</td>\r\n        <td>{reservation.reservation_date}</td>\r\n        <td>{reservation.reservation_time}</td>\r\n        <td>{reservation.people}</td>\r\n        <td data-reservation-id-status={reservation.reservation_id}>\r\n          {reservation.status}\r\n        </td>\r\n        <td>\r\n          <Link to={`/reservations/${reservation.reservation_id}/edit`}>\r\n            <button type=\"button\" class=\"btn btn-outline-primary\">\r\n              Edit\r\n            </button>\r\n          </Link>{\" \"}\r\n        </td>\r\n        <td>\r\n          <CancelButton\r\n            visibility={visible2}\r\n            handleCancel={handleCancel}\r\n            reservationId={reservation.reservation_id}\r\n          />\r\n        </td>\r\n        <SeatButton\r\n          visibility={visible}\r\n          reservationId={reservation.reservation_id}\r\n        />\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  //Create table rows of tables using the 'tables' state array\r\n  const tableLinks = tables.map((table) => {\r\n    let visible = table.reservation_id ? true : null;\r\n\r\n    return (\r\n      <tr key={table.table_id}>\r\n        <td>{table.table_id}</td>\r\n        <td>{table.table_name}</td>\r\n        <td>{table.capacity}</td>\r\n        <td>{table.reservation_id}</td>\r\n        <td data-table-id-status={table.table_id}>\r\n          {table.reservation_id === null ? \"free\" : \"occupied\"}\r\n        </td>\r\n        <FinishButton\r\n          visibility={visible}\r\n          handleFinish={handleFinish}\r\n          reservationId={table.reservation_id}\r\n          tableId={table.table_id}\r\n        />\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  //Return the html code for the reservations and the tables\r\n  return (\r\n    <main>\r\n      <h1>Reservations</h1>\r\n      <table>\r\n        <tr>\r\n          <th>Reservation ID</th>\r\n          <th>First Name</th>\r\n          <th>Last Name</th>\r\n          <th>Mobile Number</th>\r\n          <th>Reservation Date</th>\r\n          <th>Reservation Time</th>\r\n          <th>People</th>\r\n          <th>Status</th>\r\n        </tr>\r\n\r\n        {reservationLinks}\r\n        <tr>\r\n          <td>\r\n            <Link to={`/dashboard?date=${prevDateString}`}>\r\n              <button type=\"button\" class=\"btn btn-primary\">\r\n                Previous\r\n              </button>\r\n            </Link>{\" \"}\r\n          </td>\r\n          <td>\r\n            <Link to={`/dashboard`}>\r\n              <button type=\"button\" class=\"btn btn-primary\">\r\n                Today\r\n              </button>\r\n            </Link>{\" \"}\r\n          </td>\r\n          <td>\r\n            <Link to={`/dashboard?date=${nextDateString}`}>\r\n              <button type=\"button\" class=\"btn btn-primary\">\r\n                Next\r\n              </button>\r\n            </Link>{\" \"}\r\n          </td>\r\n        </tr>\r\n      </table>\r\n      <br />\r\n      <h1>Tables for Seating</h1>\r\n      <table>\r\n        <tr>\r\n          <th>Table ID</th>\r\n          <th>Table Name</th>\r\n          <th>Capacity</th>\r\n          <th>Reservation ID</th>\r\n          <th>Status</th>\r\n        </tr>\r\n        {tableLinks}\r\n      </table>\r\n      <ErrorCaught visibility3={visibility3} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\date-time.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\api.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\layout\\ErrorAlert.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\utils\\format-reservation-date.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Reservations.js",["349","350"],"import React, { useEffect, useState } from \"react\";\r\nimport { listReservations } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Reservations({ date }) {\r\n  const [reservations, setReservations] = useState([]);\r\n  const [reservationsError, setReservationsError] = useState(null);\r\n\r\n  useEffect(loadDashboard, [date]);\r\n\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setReservationsError(null);\r\n    listReservations({ date }, abortController.signal)\r\n      .then(setReservations)\r\n      .catch(setReservationsError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  const reservationLinks = reservations.map((reservation) => (\r\n    <li key={reservation.reservation_id}>\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{reservation.reservation_id}</h5>\r\n          <p className=\"card-text\">\r\n            <table>\r\n              <tr>\r\n                <td>{reservation.first_name}</td>\r\n                <td>{reservation.last_name}</td>\r\n              </tr>\r\n            </table>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <main>\r\n      <h1>Reservations</h1>\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"first_name\">First Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"first_name\"\r\n            className=\"form-control\"\r\n            id=\"first_name\"\r\n            aria-describedby=\"emailHelp\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"last_name\">Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            className=\"form-control\"\r\n            id=\"last_name\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"mobile_number\">Mobile Number</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"mobile_number\"\r\n            className=\"form-control\"\r\n            id=\"mobile_number\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"reservation_date\">Date of Reservation</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"reservation_date\"\r\n            className=\"form-control\"\r\n            id=\"reservation_date\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"reservation_time\">Time of Reservation</label>\r\n          <input\r\n            type=\"time\"\r\n            name=\"reservation_time\"\r\n            className=\"form-control\"\r\n            id=\"reservation_time\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"people\">People</label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"people\"\r\n            className=\"form-control\"\r\n            id=\"people\"\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Submit\r\n        </button>\r\n        <button type=\"cancel\" className=\"btn btn-primary\">\r\n          Cancel\r\n        </button>\r\n      </form>\r\n      <ul>{reservationLinks}</ul>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Reservations;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Seat.js",["351","352","353","354"],"//The Seat Component is used to assign a reservation to a given table\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  listTables,\r\n  updateTable,\r\n  readReservation,\r\n  readTable,\r\n} from \"../utils/api\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\nimport CapacityError from \"./CapacityError\";\r\nimport OccupiedError from \"./OccupiedError\";\r\nimport ErrorCaught from \"./ErrorCaught\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Seat({ date }) {\r\n  //Create state variables\r\n  const [tables, setTables] = useState([]);\r\n  const [tablesError, setTablesError] = useState(null);\r\n  const [tableId, setTableId] = useState(\"\");\r\n  const [visibility, setVisibility] = useState(null);\r\n  const [visibility2, setVisibility2] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [capacity, setCapacity] = useState(null);\r\n  const [people, setPeople] = useState(null);\r\n  const [occupied, setOccupied] = useState(null);\r\n\r\n  //history hook\r\n  const history = useHistory();\r\n\r\n  //The handleTableIdChange function is called whenever the value for the table drop-down is changed\r\n  //This function sets the table_id, capacity, and occupied status of the table\r\n  function handleTableIdChange(event) {\r\n    setTableId(event.target.value);\r\n    setVisibility3(null);\r\n\r\n    async function getTable(table_id) {\r\n      try {\r\n        const response = await readTable(table_id);\r\n        setCapacity(response.capacity);\r\n        setOccupied(response.reservation_id);\r\n      } catch (err) {\r\n        console.log(\"Error making readTable API call:\", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n\r\n    getTable(event.target.value);\r\n  }\r\n\r\n  //Get ReservationId from url\r\n  const { reservationId } = useParams();\r\n\r\n  //Use useEffect to load the tables\r\n  useEffect(loadTables, [date]);\r\n\r\n  function loadTables() {\r\n    const abortController = new AbortController();\r\n    setTablesError(null);\r\n\r\n    //Reset ErrorCaught visibility\r\n    setVisibility3(null);\r\n\r\n    listTables(abortController.signal).then(setTables).catch(setTablesError);\r\n    loadPeople();\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  function loadPeople() {\r\n    //Make call to get the reservation and check the number of people in the reservation\r\n    async function getReservation(reservationId) {\r\n      try {\r\n        const response = await readReservation(reservationId);\r\n        setPeople(response.people);\r\n      } catch (err) {\r\n        console.log(\"Error Making readReservation API Call\", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n    getReservation(reservationId);\r\n  }\r\n\r\n  //Create table rows from the tables state array and use to populate the drop-down\r\n  const tableLinks = tables.map((table) => (\r\n    <option value={table.table_id}>\r\n      {table.table_name} - {table.capacity}\r\n    </option>\r\n  ));\r\n\r\n  //Create the handleSubmit function to seat a party at a table\r\n  //This function changes the status of a reservation to \"seated\" and it\r\n  //changes the reservation_id on the table to match the party's reservation_id\r\n  //so that the table is \"occupied\"\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n    validate();\r\n\r\n    //Create a table object with a table_id and reservation_id\r\n    let table = {\r\n      data: {},\r\n    };\r\n\r\n    table.data.table_id = tableId;\r\n    table.data.reservation_id = reservationId;\r\n\r\n    //Update the table with the reservation_id\r\n    async function changeTable(table) {\r\n      try {\r\n        const response = await updateTable(table);\r\n        history.push(\"/dashboard\");\r\n      } catch (err) {\r\n        console.log(\"The API Call for updateTable had an error:\", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n    await changeTable(table);\r\n  }\r\n\r\n  //The validate function is used by the handleSubmit function to make sure\r\n  //that the table has sufficient capacity and that it is not occupied.\r\n  const validate = () => {\r\n    //Reset visibility\r\n    setVisibility(null);\r\n    setVisibility2(null);\r\n    setVisibility3(null);\r\n\r\n    //Display an error message if table capacity is less than the size of the party\r\n    if (capacity < people) {\r\n      setVisibility(true);\r\n    }\r\n\r\n    if (occupied !== null) {\r\n      setVisibility2(true);\r\n    }\r\n  };\r\n\r\n  //Create the handleCancel function to return the user to the reservations page\r\n  const handleCancel = (event) => {\r\n    window.history.back();\r\n  };\r\n\r\n  //Return the drop-down and the submit button to allow a user to seat a party at a table\r\n  return (\r\n    <main>\r\n      <h1>Seat the Party</h1>\r\n      <br />\r\n      <div class=\"form-group\">\r\n        <label for=\"exampleFormControlSelect1\">Choose Table</label>\r\n        <select\r\n          class=\"form-control\"\r\n          id=\"table_id\"\r\n          name=\"table_id\"\r\n          onChange={handleTableIdChange}\r\n          value={tableId}\r\n        >\r\n          <option value=\"\">--Select an Option--</option>\r\n          {tableLinks}\r\n        </select>\r\n      </div>\r\n      <form onSubmit={handleSubmit}>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Submit\r\n        </button>\r\n        <button\r\n          type=\"cancel\"\r\n          className=\"btn btn-primary\"\r\n          onClick={handleCancel}\r\n        >\r\n          Cancel\r\n        </button>\r\n      </form>\r\n      <CapacityError visibility={visibility} />\r\n      <OccupiedError visibility2={visibility2} />\r\n      <ErrorCaught visibility3={visibility3} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Seat;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\AddTable.js",["355"],"import React, { useState } from \"react\";\r\nimport { createTable } from \"../utils/api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ErrorCaught from \"./ErrorCaught\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction AddTable({ date }) {\r\n  //Create tableName and capacity state variables and add event listeners\r\n  const [tableName, setTableName] = useState(\"\");\r\n  const handleTableNameChange = (event) => setTableName(event.target.value);\r\n\r\n  const [capacity, setCapacity] = useState(\"\");\r\n  const handleCapacityChange = (event) => setCapacity(event.target.value);\r\n\r\n  //State vars for ErrorCaught\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //The handleSubmit function creates a new table and posts it to the db\r\n  const handleSubmit = (event) => {\r\n    console.log(\"helloThereGuy\");\r\n    event.preventDefault();\r\n\r\n    setVisibility3(null);\r\n\r\n    //Create a table object and set its name and capacity according to the\r\n    //input fields\r\n    let table = {\r\n      data: {},\r\n    };\r\n\r\n    table.data.table_name = tableName;\r\n    table.data.capacity = Number(capacity);\r\n\r\n    //Make an api call to post the new table to the db\r\n    async function newTable(table) {\r\n      try {\r\n        const response = await createTable(table);\r\n        if (response) history.push(\"/dashboard\");\r\n      } catch (err) {\r\n        console.log(\"Error making createTable API call: \", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n\r\n    newTable(table);\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n    window.history.back();\r\n  };\r\n\r\n  //Return the html with inputs for entering the tableName and capacity\r\n  return (\r\n    <main>\r\n      <h1>Add a Table</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"table_name\">Table Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"table_name\"\r\n            className=\"form-control\"\r\n            id=\"table_name\"\r\n            onChange={handleTableNameChange}\r\n            value={tableName}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"capacity\">Capacity</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"capacity\"\r\n            className=\"form-control\"\r\n            id=\"capacity\"\r\n            onChange={handleCapacityChange}\r\n            value={capacity}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Submit\r\n        </button>\r\n        <button\r\n          type=\"cancel\"\r\n          className=\"btn btn-primary\"\r\n          onClick={handleCancel}\r\n        >\r\n          Cancel\r\n        </button>\r\n      </form>\r\n      <ErrorCaught visibility3={visibility3} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default AddTable;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\NewReservation.js",["356","357"],"import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createReservation } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\nimport ResForm from \"./ResForm\";\r\nimport PastDateError from \"./PastDateError\";\r\nimport TuesdayError from \"./TuesdayError\";\r\nimport TimeError from \"./TimeError\";\r\nimport ErrorCaught from \"./ErrorCaught\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction NewReservation({ date }) {\r\n  //Create state variables and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const handleMobileNumberChange = (event) =>\r\n    setMobileNumber(event.target.value);\r\n\r\n  const [reservationDate, setReservationDate] = useState(\"\");\r\n  const handleReservationDateChange = (event) =>\r\n    setReservationDate(event.target.value);\r\n\r\n  const [reservationTime, setReservationTime] = useState(\"\");\r\n  const handleReservationTimeChange = (event) =>\r\n    setReservationTime(event.target.value);\r\n\r\n  const [people, setPeople] = useState(\"\");\r\n  const handlePeopleChange = (event) => setPeople(Number(event.target.value));\r\n\r\n  //Set visibility for the different types of errors that can occur\r\n  const [visibility, setVisibility] = useState(null);\r\n  const [visibility2, setVisibility2] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  const [visibilityError, setVisibilityError] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Create switched\r\n  let switched = null;\r\n\r\n  //Create the handleSubmit function which creates a reservation based on the input and\r\n  //makes an api call to add that reservation to the database\r\n  const handleSubmit = (event) => {\r\n    switched = null;\r\n\r\n    event.preventDefault();\r\n\r\n    //Validate the input\r\n    validate();\r\n\r\n    if (!switched) {\r\n      let reservation = {\r\n        data: {},\r\n      };\r\n\r\n      //Set state variables\r\n      reservation.data.first_name = firstName;\r\n      reservation.data.last_name = lastName;\r\n      reservation.data.mobile_number = mobileNumber;\r\n      reservation.data.reservation_date = reservationDate;\r\n      reservation.data.reservation_time = reservationTime;\r\n      reservation.data.people = people;\r\n\r\n      //Make api call to create a new reservation\r\n      async function newReservation(reservation) {\r\n        try {\r\n          const response = await createReservation(reservation);\r\n        } catch (err) {\r\n          console.log(\"Error making createReservation API call\", err);\r\n          setErrMessage(err);\r\n          setVisibilityError(true);\r\n        }\r\n      }\r\n      newReservation(reservation);\r\n\r\n      history.push(`/dashboard?date=${reservationDate}`);\r\n    }\r\n  };\r\n\r\n  //The validate function ensures that the reservation is not in the past, on a Tuesday,\r\n  //or before 10:00AM or after 9:30PM\r\n  const validate = () => {\r\n    //Reset visibility\r\n    setVisibility(null);\r\n    setVisibility2(null);\r\n    setVisibility3(null);\r\n    setVisibilityError(null);\r\n\r\n    //Create date for reservation date\r\n    let month = Number(reservationDate.substring(5, 7)) - 1;\r\n    let day = Number(reservationDate.substring(8, 10));\r\n    let year = Number(reservationDate.substring(0, 4));\r\n    let hours = Number(reservationTime.substring(0, 2));\r\n    let minutes = Number(reservationTime.substring(3));\r\n\r\n    //Compare the current date with the date of the reservation entered\r\n    let resDate = new Date(year, month, day);\r\n    resDate.setHours(hours);\r\n    resDate.setMinutes(minutes);\r\n\r\n    let today = new Date();\r\n\r\n    //If the current date is greater than the reservation date, throw an error\r\n    if (resDate.valueOf() < today.valueOf()) {\r\n      setVisibility(true);\r\n      switched = true;\r\n    }\r\n\r\n    //If the reservation is made on a Tuesday, throw an error\r\n    if (resDate.getDay() === 2) {\r\n      setVisibility2(true);\r\n      switched = true;\r\n    }\r\n\r\n    //If the reservation is earlier than 10:30am or later than 9:30pm, throw an error\r\n    if (\r\n      resDate.getHours() < 10 ||\r\n      (resDate.getHours() === 10 && resDate.getMinutes() < 30)\r\n    ) {\r\n      setVisibility3(true);\r\n      switched = true;\r\n    }\r\n\r\n    if (\r\n      resDate.getHours() > 21 ||\r\n      (resDate.getHours() === 21 && resDate.getMinutes() > 30)\r\n    ) {\r\n      setVisibility3(true);\r\n      switched = true;\r\n    }\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage1\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n    history.push(\"/dashboard\");\r\n  };\r\n\r\n  //Return the form with inputs to create a new reservation\r\n  return (\r\n    <main>\r\n      <h1>Add a New Reservation</h1>\r\n      <ResForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        mobileNumber={mobileNumber}\r\n        handleMobileNumberChange={handleMobileNumberChange}\r\n        reservationDate={reservationDate}\r\n        handleReservationDateChange={handleReservationDateChange}\r\n        reservationTime={reservationTime}\r\n        handleReservationTimeChange={handleReservationTimeChange}\r\n        people={people}\r\n        handlePeopleChange={handlePeopleChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n      <PastDateError visibility={visibility} />\r\n      <TuesdayError visibility2={visibility2} />\r\n      <TimeError visibility3={visibility3} />\r\n      <ErrorCaught visibility3={visibilityError} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default NewReservation;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\EditReservation.js",["358"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readReservation, updateReservation } from \"../utils/api\";\r\nimport ResForm from \"./ResForm\";\r\nimport ErrorCaught from \"./ErrorCaught\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction EditReservation({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const handleMobileNumberChange = (event) =>\r\n    setMobileNumber(event.target.value);\r\n\r\n  const [reservationDate, setReservationDate] = useState(\"\");\r\n  const handleReservationDateChange = (event) =>\r\n    setReservationDate(event.target.value);\r\n\r\n  const [reservationTime, setReservationTime] = useState(\"\");\r\n  const handleReservationTimeChange = (event) =>\r\n    setReservationTime(event.target.value);\r\n\r\n  const [people, setPeople] = useState(\"\");\r\n  const handlePeopleChange = (event) => setPeople(Number(event.target.value));\r\n\r\n  //State vars for error message\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Get ReservationId from url\r\n  const { reservationId } = useParams();\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Make an API Call to get the reservation based on the reservation_id\r\n  useEffect(() => {\r\n    async function getReservation(reservationId) {\r\n      const response = await readReservation(reservationId);\r\n\r\n      let dateString = response.reservation_date.substring(0, 10);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setMobileNumber(response.mobile_number);\r\n      setReservationDate(dateString);\r\n      setReservationTime(response.reservation_time);\r\n      setPeople(response.people);\r\n    }\r\n    getReservation(reservationId);\r\n  }, [reservationId]);\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function creates a reservation based on the user input and then uses changeReservation() api call\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    setVisibility3(null);\r\n\r\n    let reservation = {\r\n      data: {},\r\n    };\r\n\r\n    reservation.data.reservation_id = reservationId;\r\n    reservation.data.first_name = firstName;\r\n    reservation.data.last_name = lastName;\r\n    reservation.data.mobile_number = mobileNumber;\r\n    reservation.data.reservation_date = reservationDate;\r\n    reservation.data.reservation_time = reservationTime;\r\n    reservation.data.people = people;\r\n\r\n    //Make api call to update reservation\r\n    async function changeReservation(reservation) {\r\n      try {\r\n        const response = await updateReservation(reservation);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n        setVisibility3(true);\r\n      }\r\n    }\r\n    await changeReservation(reservation);\r\n\r\n    //Reset fields\r\n    setFirstName(\"\");\r\n    setLastName(\"\");\r\n    setMobileNumber(\"\");\r\n    setReservationDate(\"\");\r\n    setReservationTime(\"\");\r\n    setPeople(\"\");\r\n\r\n    //Go back to dashboard page\r\n    history.push(`/dashboard?date=${reservationDate}`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard?date=${reservationDate}`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Edit Reservation</h1>\r\n      <ResForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        mobileNumber={mobileNumber}\r\n        handleMobileNumberChange={handleMobileNumberChange}\r\n        reservationDate={reservationDate}\r\n        handleReservationDateChange={handleReservationDateChange}\r\n        reservationTime={reservationTime}\r\n        handleReservationTimeChange={handleReservationTimeChange}\r\n        people={people}\r\n        handlePeopleChange={handlePeopleChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n      <ErrorCaught visibility3={visibility3} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default EditReservation;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\Search.js",["359","360","361"],"import React, { useEffect, useState } from \"react\";\r\nimport SearchResults from \"./SearchResults\";\r\nimport { listReservations } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Search({ date }) {\r\n  //Create the phone nubmer state variable and add event listeners\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  const handlePhoneNumberChange = (event) => setPhoneNumber(event.target.value);\r\n  const [visibilityStatus, setVisibilityStatus] = useState(null);\r\n  const [reservations, setReservations] = useState([]);\r\n  const [reservationsError, setReservationsError] = useState(null);\r\n\r\n  //UseEffect is used to get the reservations\r\n  useEffect(loadDashboard, [phoneNumber]);\r\n\r\n  //Load all of the reservations filtered by phone number\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setReservationsError(null);\r\n    const mobile_number = phoneNumber;\r\n\r\n    listReservations({ mobile_number }, abortController.signal)\r\n      .then(setReservations)\r\n      .catch(setReservationsError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //The handleSubmit function merely shows the search results\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    loadDashboard();\r\n    setVisibilityStatus(true);\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage1\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  //Return the form to enter the phone number and show the results\r\n  return (\r\n    <main>\r\n      <h1>Find Reservations</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"mobile_number\">Enter a Customer Phone Number</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"mobile_number\"\r\n            className=\"form-control\"\r\n            id=\"mobile_number\"\r\n            onChange={handlePhoneNumberChange}\r\n            value={phoneNumber}\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Find\r\n        </button>\r\n      </form>\r\n      <div>\r\n        <SearchResults\r\n          visibility={visibilityStatus}\r\n          phoneNumber={phoneNumber}\r\n          reservations={reservations}\r\n        />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\SearchResults.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\SeatButton.js",["362","363"],"//The Seat Button is used to seat a reservation\r\n//The button will appear next to a reservation on the Dashboard\r\n//The two props are visibility and reservationId\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction SeatButton({ visibility, reservationId }) {\r\n  if (visibility !== null) {\r\n    return (\r\n      <td>\r\n        <Link to={`/reservations/${reservationId}/seat`}>\r\n          <button type=\"button\" class=\"btn btn-outline-primary\">\r\n            Seat\r\n          </button>\r\n        </Link>{\" \"}\r\n      </td>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default SeatButton;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\FinishButton.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\dashboard\\CancelButton.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\PastDateError.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\TuesdayError.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\OccupiedError.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\CapacityError.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\TimeError.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\ResForm.js",["364","365"],"//The Seat Button is used to seat a reservation\r\n//The button will appear next to a reservation on the Dashboard\r\n//The two props are visibility and reservationId\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nfunction ResForm({\r\n  firstName,\r\n  handleFirstNameChange,\r\n  lastName,\r\n  handleLastNameChange,\r\n  mobileNumber,\r\n  handleMobileNumberChange,\r\n  reservationDate,\r\n  handleReservationDateChange,\r\n  reservationTime,\r\n  handleReservationTimeChange,\r\n  people,\r\n  handlePeopleChange,\r\n  handleSubmit,\r\n  handleCancel,\r\n}) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"first_name\">First Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"first_name\"\r\n          className=\"form-control\"\r\n          id=\"first_name\"\r\n          aria-describedby=\"emailHelp\"\r\n          onChange={handleFirstNameChange}\r\n          value={firstName}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"last_name\">Last Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"last_name\"\r\n          className=\"form-control\"\r\n          id=\"last_name\"\r\n          onChange={handleLastNameChange}\r\n          value={lastName}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"mobile_number\">Mobile Number</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"mobile_number\"\r\n          className=\"form-control\"\r\n          id=\"mobile_number\"\r\n          onChange={handleMobileNumberChange}\r\n          value={mobileNumber}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"reservation_date\">Date of Reservation</label>\r\n        <input\r\n          type=\"date\"\r\n          name=\"reservation_date\"\r\n          className=\"form-control\"\r\n          id=\"reservation_date\"\r\n          onChange={handleReservationDateChange}\r\n          value={reservationDate}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"reservation_time\">Time of Reservation</label>\r\n        <input\r\n          type=\"time\"\r\n          name=\"reservation_time\"\r\n          className=\"form-control\"\r\n          id=\"reservation_time\"\r\n          onChange={handleReservationTimeChange}\r\n          value={reservationTime}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"people\">People</label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"people\"\r\n          className=\"form-control\"\r\n          id=\"people\"\r\n          onChange={handlePeopleChange}\r\n          value={people}\r\n        />\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Submit\r\n      </button>\r\n      <button type=\"cancel\" className=\"btn btn-primary\" onClick={handleCancel}>\r\n        Cancel\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ResForm;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\Professional\\CS Bootcamp Project\\Thinkful Bootcamp\\module-52\\starter-restaurant-reservation\\front-end\\src\\reservations\\ErrorCaught.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\index.js",[],["366","367"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\App.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Layout.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Menu.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\Routes.js",["368","369","370","371","372"],"import React from \"react\";\r\n\r\nimport { Redirect, Route, Switch, useLocation } from \"react-router-dom\";\r\nimport ParticipantsDashboard from \"../dashboard/ParticipantsDashboard\";\r\n\r\nimport EnrollNew from \"../reservations/EnrollNew\";\r\nimport EnrollHome from \"../reservations/EnrollHome\";\r\nimport EnrollEdit from \"../reservations/ParticipantMenuComponents/EnrollEdit\";\r\nimport StatusEdit from \"../reservations/ParticipantMenuComponents/StatusEdit\";\r\nimport RecEdit from \"../reservations/ParticipantMenuComponents/RecEdit\";\r\nimport View_Edit_Status from \"../reservations/ParticipantMenuComponents/View_Edit_Status\";\r\nimport View_Edit_Participant from \"../reservations/ParticipantMenuComponents/View_Edit_Participant\";\r\nimport DischargeEdit from \"../reservations/ParticipantMenuComponents/DischargeEdit\";\r\nimport NewParticipant from \"../reservations/NewParticipant\";\r\nimport ParticipantMenu from \"../reservations/ParticipantMenu\";\r\nimport NewInstance from \"../reservations/NewInstance\";\r\nimport Search from \"../reservations/Search\";\r\nimport SearchParticipants from \"../reservations/EnrollHome\";\r\nimport ParticipantNew from \"../reservations/ParticipantNew\";\r\nimport Reporting from \"../reservations/Reporting\";\r\nimport ViewParticipant from \"../reservations/ViewParticipant\";\r\nimport ViewInstance from \"../reservations/ViewInstance\";\r\nimport ViewAllStatuses from \"../reservations/ParticipantMenuComponents/ViewAllStatuses\";\r\nimport DischargeParticipant from \"../reservations/DischargeParticipant\";\r\nimport RecCheck from \"../reservations/RecCheck\";\r\nimport RecDashboard from \"../dashboard/RecDashboard\";\r\nimport RecPrevInstances from \"../dashboard/RecPrevInstances\";\r\nimport AddStatus from \"../reservations/AddStatus\";\r\nimport Importer from \"../reservations/data-importer/Importer\";\r\nimport NotFound from \"./NotFound\";\r\nimport { today } from \"../utils/date-time\";\r\n\r\n/**\r\n * Defines all the routes for the application.\r\n *\r\n * You will need to make changes to this file.\r\n *\r\n * @returns {JSX.Element}\r\n */\r\nfunction Routes() {\r\n  return (\r\n    <Switch>\r\n      <Route exact={true} path=\"/participants/new\">\r\n        <NewParticipant />\r\n      </Route>\r\n      <Route exact={true} path=\"/participants/search\">\r\n        <Search />\r\n      </Route>\r\n      <Route exact={true} path=\"/participants/searchParticipants\">\r\n        <SearchParticipants />\r\n      </Route>\r\n      <Route exact={true} path=\"/participants/createParticipant\">\r\n        <ParticipantNew />\r\n      </Route>\r\n      <Route exact={true} path=\"/participant_menu\">\r\n        <ParticipantMenu />\r\n      </Route>\r\n      <Route exact={true} path=\"/participants/rec_dashboard\">\r\n        <RecDashboard />\r\n      </Route>\r\n      <Route exact={true} path=\"/participants/:participant_id/rec_prev\">\r\n        <RecPrevInstances />\r\n      </Route>\r\n      <Route exact={true} path=\"/participants/:instanceId/rec_check\">\r\n        <RecCheck />\r\n      </Route>\r\n      <Route exact={true} path=\"/participants/:participantId/view\">\r\n        <ViewParticipant />\r\n      </Route>\r\n      <Route exact={true} path=\"/instances/:instanceId/view\">\r\n        <ViewInstance />\r\n      </Route>\r\n      <Route exact={true} path=\"/participants/:participantId/all_statuses\">\r\n        <ViewAllStatuses />\r\n      </Route>\r\n      <Route exact={true} path=\"/participants/:instanceId/create\">\r\n        <NewInstance />\r\n      </Route>\r\n\r\n      <Route\r\n        exact={true}\r\n        path=\"/participants/:instanceId/discharge_participant\"\r\n      >\r\n        <DischargeParticipant />\r\n      </Route>\r\n\r\n      <Route path=\"/participants/:instanceId/statuses\">\r\n        <AddStatus />\r\n      </Route>\r\n      <Route path=\"/participants/dashboard\">\r\n        <ParticipantsDashboard />\r\n      </Route>\r\n\r\n      <Route path=\"/participants/enroll\">\r\n        <EnrollHome />\r\n      </Route>\r\n\r\n      <Route path=\"/participants/:participantId/enrollNew\">\r\n        <EnrollNew />\r\n      </Route>\r\n      <Route path=\"/participants/reporting\">\r\n        <Reporting />\r\n      </Route>\r\n      <Route path=\"/data-importer\">\r\n        <Importer />\r\n      </Route>\r\n      <Route path=\"/instances/:instanceId/enrollEdit\">\r\n        <EnrollEdit />\r\n      </Route>\r\n      <Route path=\"/instances/:instanceId/statusEdit\">\r\n        <StatusEdit />\r\n      </Route>\r\n      <Route path=\"/instances/:instanceId/dischargeEdit\">\r\n        <DischargeEdit />\r\n      </Route>\r\n      <Route path=\"/instances/:instanceId/recEdit\">\r\n        <RecEdit />\r\n      </Route>\r\n      <Route path=\"/statuses/:statusId/edit\">\r\n        <View_Edit_Status />\r\n      </Route>\r\n      <Route path=\"/participants/:participantId/viewEditParticipant\">\r\n        <View_Edit_Participant />\r\n      </Route>\r\n      <Route path=\"/\">\r\n        <ParticipantsDashboard />\r\n      </Route>\r\n      <Route>\r\n        <NotFound />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default Routes;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\NotFound.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\NewParticipant.js",["373","374","375","376","377","378","379","380"],"import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createReservation, createParticipant } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\nimport ErrorCaught from \"../ErrorCaught\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction NewReservation({ date }) {\r\n  //Create state variables and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const handleMobileNumberChange = (event) =>\r\n    setMobileNumber(event.target.value);\r\n\r\n  //Set visibility for the different types of errors that can occur\r\n  const [visibilityError, setVisibilityError] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Create switched\r\n  let switched = null;\r\n\r\n  //Create the handleSubmit function which creates a reservation based on the input and\r\n  //makes an api call to add that reservation to the database\r\n  const handleSubmit = (event) => {\r\n    switched = null;\r\n\r\n    event.preventDefault();\r\n\r\n    //Validate the input\r\n    validate();\r\n\r\n    if (!switched) {\r\n      let participant = {\r\n        data: {},\r\n      };\r\n\r\n      //Set state variables\r\n      participant.data.first_name = firstName;\r\n      participant.data.last_name = lastName;\r\n      participant.data.mobile_number = mobileNumber;\r\n\r\n      //Make api call to create a new reservation\r\n      async function newParticipant(participant) {\r\n        try {\r\n          const response = await createParticipant(participant);\r\n        } catch (err) {\r\n          console.log(\"Error making createReservation API call\", err);\r\n          setErrMessage(err);\r\n          setVisibilityError(true);\r\n        }\r\n      }\r\n      newParticipant(participant);\r\n\r\n      history.push(`/`);\r\n    }\r\n  };\r\n\r\n  //The validate function ensures that the reservation is not in the past, on a Tuesday,\r\n  //or before 10:00AM or after 9:30PM\r\n  const validate = () => {\r\n    //Reset visibility\r\n    setVisibilityError(null);\r\n\r\n    //If firstName, lastName, or mobileNumber are missing, throw an error\r\n    if (!firstName || !lastName || !mobileNumber) {\r\n      setVisibilityError(true);\r\n      switched = true;\r\n    }\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage1\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  //Return the form with inputs to create a new reservation\r\n  return (\r\n    <main>\r\n      <h1>Add a New Program Participant</h1>\r\n\r\n      <ErrorCaught visibility3={visibilityError} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default NewReservation;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\date-time.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\api.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\layout\\ErrorAlert.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\utils\\format-reservation-date.js",[],["381","382"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\AddStatus.js",["383","384","385","386","387","388","389","390"],"import React, { useEffect, useState } from \"react\";\r\nimport { createStatus, readInstance, updateInstance } from \"../utils/api\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction AddStatus() {\r\n  const [statuses, setStatuses] = useState([\r\n    { statusField: \"off_coping_date\", statusDescr: \"Off Coping Date\" },\r\n    { statusField: \"off_coping60_date\", statusDescr: \"Off Coping +60\" },\r\n    {\r\n      statusField: \"on_restrictions_date\",\r\n      statusDescr: \"On Restrictions Date\",\r\n    },\r\n    {\r\n      statusField: \"off_restrictions_date\",\r\n      statusDescr: \"Off Restrictions Date\",\r\n    },\r\n    {\r\n      statusField: \"employment_start_date\",\r\n      statusDescr: \"Employment Start Date\",\r\n    },\r\n    {\r\n      statusField: \"leadership_dev_start_date\",\r\n      statusDescr: \"Leadership Development Start Date\",\r\n    },\r\n    {\r\n      statusField: \"job_search_start_date\",\r\n      statusDescr: \"Job Search Start Date\",\r\n    },\r\n    { statusField: \"iop_start_date\", statusDescr: \"IOP Start Date\" },\r\n    { statusField: \"iop_end_date\", statusDescr: \"IOP End Date\" },\r\n    {\r\n      statusField: \"aftercare_start_date\",\r\n      statusDescr: \"Aftercare Start Date\",\r\n    },\r\n    { statusField: \"aftercare_end_date\", statusDescr: \"Aftercare End Date\" },\r\n    { statusField: \"ged_start_date\", statusDescr: \"GED Start Date\" },\r\n    { statusField: \"ged_end_date\", statusDescr: \"GED End Date\" },\r\n    { statusField: \"cpt_start_date\", statusDescr: \"CPT Start Date\" },\r\n    { statusField: \"cpt_end_date\", statusDescr: \"CPT End Date\" },\r\n    {\r\n      statusField: \"rec_treatment_update\",\r\n      statusDescr: \"Received Treatment Update\",\r\n    },\r\n    { statusField: \"had_counseling\", statusDescr: \"Had Individual Counseling\" },\r\n    { statusField: \"relapse_date\", statusDescr: \"Relapse Date\" },\r\n    { statusField: \"drug_test_date\", statusDescr: \"Drug Test Date\" },\r\n    { statusField: \"started_mat_date\", statusDescr: \"Started MAT\" },\r\n  ]);\r\n\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => {\r\n    setLastName(event.target.value);\r\n    console.log(statusField);\r\n  };\r\n\r\n  const [incident, setIncident] = useState(null);\r\n  const handleIncidentChange = (event) => setIncident(event.target.value);\r\n\r\n  const [participantId, setParticipantId] = useState(null);\r\n\r\n  const [statusName, setStatusName] = useState(\"Started MAT\");\r\n  const handleStatusNameChange = (event) => setStatusName(event.target.value);\r\n\r\n  const [statusField, setStatusField] = useState(null);\r\n\r\n  const [statusDate, setStatusDate] = useState(null);\r\n  const handleStatusDateChange = (event) => setStatusDate(event.target.value);\r\n\r\n  const [statusNotes, setStatusNotes] = useState(null);\r\n  const handleStatusNotesChange = (event) => setStatusNotes(event.target.value);\r\n\r\n  //State vars for ErrorCaught\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Get ParticipantId from url\r\n  const { instanceId } = useParams();\r\n\r\n  //Make an API Call to get the reservation based on the reservation_id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setIncident(response.incident_num);\r\n      setParticipantId(response.participant_id);\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  async function handleSubmit() {\r\n    let status = {\r\n      data: {},\r\n    };\r\n\r\n    status.data.instance_id = instanceId;\r\n    status.data.participant_id = participantId;\r\n    status.data.first_name = firstName;\r\n    status.data.last_name = lastName;\r\n    status.data.incident_num = incident;\r\n    status.data.status_name = statusName;\r\n    status.data.date = statusDate;\r\n    status.data.notes = statusNotes;\r\n\r\n    try {\r\n      const response2 = await createStatus(status);\r\n      if (response2) alert(\"Status Update Added\");\r\n    } catch (err) {\r\n      console.log(\"Error making createTable API call: \", err);\r\n    }\r\n  }\r\n\r\n  //Create table rows from the statuses state array and use to populate the drop-down\r\n  const statusLinks = statuses.map((status) => (\r\n    <option value={status.statusDescr}>{status.statusDescr}</option>\r\n  ));\r\n\r\n  //Return the html with status drop-down\r\n  return (\r\n    <main>\r\n      <h1>Add Status Event</h1>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"first_name\">First Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"first_name\"\r\n          className=\"form-control\"\r\n          id=\"first_name\"\r\n          aria-describedby=\"emailHelp\"\r\n          onChange={handleFirstNameChange}\r\n          value={firstName}\r\n          readOnly\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"last_name\">Last Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"last_name\"\r\n          className=\"form-control\"\r\n          id=\"last_name\"\r\n          onChange={handleLastNameChange}\r\n          value={lastName}\r\n          readOnly\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"last_name\">Incident</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"last_name\"\r\n          className=\"form-control\"\r\n          id=\"last_name\"\r\n          onChange={handleIncidentChange}\r\n          value={incident}\r\n          readOnly\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <form onSubmit={handleSubmit}>\r\n          <label for=\"exampleFormControlSelect1\">Select Status</label>\r\n          <select\r\n            class=\"form-control\"\r\n            id=\"statusName\"\r\n            name=\"statusName\"\r\n            onChange={handleStatusNameChange}\r\n            value={statusName}\r\n          >\r\n            <option value=\"\">--Select an Option--</option>\r\n            {statusLinks}\r\n          </select>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"status_date\">Date of Status Update</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"status_date\"\r\n              className=\"form-control\"\r\n              id=\"status_date\"\r\n              onChange={handleStatusDateChange}\r\n              value={statusDate}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"status_notes\">Status Notes</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"status_notes\"\r\n              className=\"form-control\"\r\n              id=\"status_notes\"\r\n              onChange={handleStatusNotesChange}\r\n              value={statusNotes}\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Submit Status Update\r\n          </button>\r\n          <Link to={`/participants/dashboard`}>\r\n            <button\r\n              type=\"button\"\r\n              class=\"btn btn-primary\"\r\n              style={{ margin: \"5px\" }}\r\n            >\r\n              Return to Dashboard\r\n            </button>\r\n          </Link>\r\n        </form>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default AddStatus;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\dashboard\\ParticipantsDashboard.js",["391","392","393","394"],"//The main functions of the Dashboard component are to display all of the active participants\r\n//and allow the user to add a status, view, or discharge the participant\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { listInstances } from \"../utils/api\";\r\nimport ErrorCaught from \"../ErrorCaught\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction ParticipantsDashboard({ date }) {\r\n  //The main state variabe is instances which is an instance of an active particpant to be displayed\r\n  const [instances, setInstances] = useState([]);\r\n  const [instancesError, setInstancesError] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  //Declare an instance of the useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Use useEffect to load the participants that are currently_in_program\r\n  //Load isntances\r\n  useEffect(loadDashboard, [date]);\r\n\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setInstancesError(null);\r\n\r\n    listInstances({ currently_in_program: \"yes\" }, abortController.signal)\r\n      .then(setInstances)\r\n      .catch(setInstancesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //Create table rows of instances using the 'instances' state array\r\n  const instanceLinks = instances.map((instance) => {\r\n    let startDateString = instance.start_date.substring(0, 10);\r\n    let dischargeDateString = \"\";\r\n    if (instance.discharge_date)\r\n      dischargeDateString = instance.discharge_date.substring(0, 10);\r\n\r\n    return (\r\n      <tr key={instance.instance_id}>\r\n        <td>{instance.instance_id}</td>\r\n        <td>{instance.first_name}</td>\r\n        <td>{instance.last_name}</td>\r\n        <td>{instance.incident_num}</td>\r\n        <td>{startDateString}</td>\r\n        <td>{dischargeDateString}</td>\r\n        <Link to={`/participants/${instance.instance_id}/statuses`}>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            style={{ margin: \"5px\" }}\r\n          >\r\n            Add Status\r\n          </button>\r\n        </Link>{\" \"}\r\n        <Link to={`/instances/${instance.instance_id}/view`}>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            style={{ margin: \"5px\" }}\r\n          >\r\n            View/Edit\r\n          </button>\r\n        </Link>{\" \"}\r\n        <Link\r\n          to={`/participants/${instance.instance_id}/discharge_participant`}\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            style={{ margin: \"5px\" }}\r\n          >\r\n            Discharge\r\n          </button>\r\n        </Link>{\" \"}\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  //Return the html code for the display of instances\r\n  return (\r\n    <main>\r\n      <h1>Active Participants</h1>\r\n      <table class=\"table\">\r\n        <tr>\r\n          <th>Instance ID</th> <th>First Name</th> <th>Last Name</th>{\" \"}\r\n          <th>Incident #</th>\r\n          <th>Start Date</th> <th>Discharge Date</th>\r\n        </tr>\r\n\r\n        {instanceLinks}\r\n      </table>\r\n      <br />\r\n\r\n      <ErrorCaught visibility3={visibility3} msg={errMessage} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default ParticipantsDashboard;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\RecCheck.js",["395","396","397","398","399","400","401","402","403"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\dashboard\\RecDashboard.js",["404","405","406","407","408","409","410","411","412"],"//The main functions of the Recidivism Dashboard component are to display all of the participants that are\r\n//active in the program. From there, you can perform a Recidivism check on a given participant.\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { listInstances } from \"../utils/api\";\r\n\r\nfunction RecDashboard({}) {\r\n  //The main state variables are instances to be displayed in the dashboard\r\n  let [instances, setInstances] = useState([]);\r\n  let [instancesFiltered, setInstancesFiltered] = useState([]);\r\n  const [instancesError, setInstancesError] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [day, setDay] = useState(\"\");\r\n  const [month, setMonth] = useState(\"\");\r\n  const [year, setYear] = useState(\"\");\r\n  //Declare an instance of the useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Use useEffect to load instances where participants are not currently in the program\r\n  //Load instances\r\n  useEffect(loadDashboard, [day, month, year]);\r\n\r\n  function loadDashboard() {\r\n    console.log(\"trying\");\r\n\r\n    const abortController = new AbortController();\r\n    setInstancesError(null);\r\n\r\n    listInstances({ day, month, year }, abortController.signal)\r\n      .then(setInstances)\r\n      .catch(setInstancesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  function pastDue() {\r\n    const currDate = new Date();\r\n    setMonth(currDate.getMonth());\r\n    setDay(currDate.getDate());\r\n    setYear(currDate.getFullYear());\r\n    console.log(\"dateString\", month, day, year);\r\n  }\r\n\r\n  function dueWithin30() {\r\n    const currDate = new Date();\r\n    currDate.setDate(currDate.getDate() + 30);\r\n    setMonth(currDate.getMonth());\r\n    setDay(currDate.getDate());\r\n    setYear(currDate.getFullYear());\r\n    console.log(\"dateString\", month, day, year);\r\n  }\r\n\r\n  function dueWithin90() {\r\n    const currDate = new Date();\r\n    currDate.setDate(currDate.getDate() + 90);\r\n    setMonth(currDate.getMonth());\r\n    setDay(currDate.getDate());\r\n    setYear(currDate.getFullYear());\r\n    console.log(\"dateString\", month, day, year);\r\n  }\r\n\r\n  //Create table rows of instances only for participants that are not currently_in_program\r\n  const instanceLinks = instances\r\n    .filter((instance) => instance.currently_in_program === \"no\")\r\n    .map((instance) => {\r\n      let programUtilization = instance.program_utilization;\r\n      let startDateString = instance.start_date.substring(0, 10);\r\n      let dischargeDateString = \"\";\r\n      if (instance.discharge_date)\r\n        dischargeDateString = instance.discharge_date.substring(0, 10);\r\n      let checkDateString = null;\r\n      if (instance.next_check_date)\r\n        checkDateString = instance.next_check_date.substring(0, 10);\r\n\r\n      return (\r\n        <tr key={instance.instance_id} style={{ padding: \"15px\" }}>\r\n          <td>{instance.instance_id}</td>\r\n          <td>{instance.first_name}</td>\r\n          <td>{instance.last_name}</td>\r\n          <td>{startDateString}</td>\r\n          <td>{dischargeDateString}</td>\r\n          <td>{programUtilization}</td>\r\n          <td>{checkDateString}</td>\r\n          <td>{instance[\"1_YR_Fed\"]}</td>\r\n          <td>{instance[\"1_YR_State\"]}</td>\r\n          <td>{instance[\"2_YR_Fed\"]}</td>\r\n          <td>{instance[\"2_YR_State\"]}</td>\r\n          <td>{instance[\"3_YR_Fed\"]}</td>\r\n          <td>{instance[\"3_YR_State\"]}</td>\r\n          <td>{instance[\"4_YR_Fed\"]}</td>\r\n          <td>{instance[\"4_YR_State\"]}</td>\r\n          <td>{instance[\"5_YR_Fed\"]}</td>\r\n          <td>{instance[\"5_YR_State\"]}</td>\r\n          <td>\r\n            <Link to={`/participants/${instance.instance_id}/rec_check`}>\r\n              <button\r\n                type=\"button\"\r\n                class=\"btn btn-primary\"\r\n                style={{ margin: \"5px\" }}\r\n              >\r\n                Perform Check\r\n              </button>\r\n            </Link>{\" \"}\r\n          </td>\r\n          <td>\r\n            <Link to={`/participants/${instance.participant_id}/rec_prev`}>\r\n              <button\r\n                type=\"button\"\r\n                class=\"btn btn-primary\"\r\n                style={{ margin: \"5px\" }}\r\n              >\r\n                View All\r\n              </button>\r\n            </Link>{\" \"}\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n\r\n  //Return the html code for the dashboard\r\n  return (\r\n    <main>\r\n      <h1>Recidivism Dashboard</h1>\r\n      <br />\r\n      <button type=\"button\" class=\"btn btn-primary\" onClick={pastDue}>\r\n        Past Due\r\n      </button>{\" \"}\r\n      <button type=\"button\" class=\"btn btn-primary\" onClick={dueWithin30}>\r\n        Due within 30 Days\r\n      </button>{\" \"}\r\n      <button type=\"button\" class=\"btn btn-primary\" onClick={dueWithin90}>\r\n        Due within 90 Days\r\n      </button>\r\n      <br />\r\n      <br />\r\n      <table class=\"table table-sm\">\r\n        <tr>\r\n          <th>Instance ID</th> <th>First Name</th> <th>Last Name</th>\r\n          <th>Start Date</th> <th>Discharge Date</th>\r\n          <th>Program Utilization</th>\r\n          <th>Next Check Date</th>\r\n          <th>1 YR Fed</th>\r\n          <th>1 YR State</th>\r\n          <th>2 YR Fed</th>\r\n          <th>2 YR State</th>\r\n          <th>3 YR Fed</th>\r\n          <th>3 YR State</th>\r\n          <th>4 YR Fed</th>\r\n          <th>4 YR State</th>\r\n          <th>5 YR Fed</th>\r\n          <th>5 YR State</th>\r\n          <th></th>\r\n        </tr>\r\n\r\n        {instanceLinks}\r\n      </table>\r\n      <br />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default RecDashboard;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ViewParticipant.js",["413","414","415","416","417","418","419","420","421","422","423"],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\ErrorCaught.js",[],"C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenu.js",["424","425"],"//This is the Participant Menu\r\n//Currently the links do not work\r\n/*To restore the links, add the link tags around the buttons with the location such as this:\r\n<Link to={`/participants/${instanceId}/edit`}>\r\n        <button type=\"button\" class=\"btn btn-secondary\">\r\n          Edit Participant Info\r\n        </button>\r\n</Link>\r\n*/\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction ParticipantMenu({ instanceId, participantId }) {\r\n  return (\r\n    <div class=\"btn-group-vertical\">\r\n      <Link to={`/instances/${instanceId}/enrollEdit`}>\r\n        <button type=\"button\" class=\"btn btn-secondary\">\r\n          View/Edit Enrollment Info\r\n        </button>\r\n      </Link>\r\n      <br />\r\n      <Link to={`/instances/${instanceId}/statusEdit`}>\r\n        <button type=\"button\" class=\"btn btn-secondary\">\r\n          View/Edit Statuses of Instance\r\n        </button>\r\n      </Link>\r\n      <br />\r\n      <Link to={`/instances/${instanceId}/dischargeEdit`}>\r\n        <button type=\"button\" class=\"btn btn-secondary\">\r\n          View/Edit Discharge Fields\r\n        </button>\r\n        <br />\r\n        <br />\r\n      </Link>\r\n      <Link to={`/instances/${instanceId}/recEdit`}>\r\n        <button type=\"button\" class=\"btn btn-secondary\">\r\n          View/Edit Recidivism Fields\r\n        </button>\r\n        <br />\r\n        <br />\r\n      </Link>\r\n      <Link to={`/participants/${participantId}/view`}>\r\n        <button type=\"button\" class=\"btn btn-secondary\">\r\n          Return to Previous\r\n        </button>\r\n        <br />\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ParticipantMenu;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\Search.js",["426","427","428","429","430","431","432","433"],"import React, { useEffect, useState } from \"react\";\r\nimport SearchResults from \"./SearchResults\";\r\nimport { listInstances, listParticipants } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Search({ date }) {\r\n  //Create the phone nubmer state variable and add event listeners\r\n  const [last_name, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n  const [visibilityStatus, setVisibilityStatus] = useState(null);\r\n  const [filteredParticipants, setInstances] = useState([]);\r\n  const [instancesError, setInstancesError] = useState(null);\r\n  const [participants, setParticipants] = useState([]);\r\n  const [participantsError, setParticipantsError] = useState(null);\r\n  const [participantId, setParticipantId] = useState(\"\");\r\n  const handleParticipantIdChange = (event) =>\r\n    setParticipantId(event.target.value);\r\n\r\n  //UseEffect is used to get the reservations\r\n  useEffect(loadDashboard, [last_name]);\r\n\r\n  //Load all of the reservations filtered by phone number\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setInstancesError(null);\r\n    console.log(\"last_name\", last_name);\r\n\r\n    listParticipants({ last_name }, abortController.signal)\r\n      .then((response) => {\r\n        setInstances(response);\r\n        console.log(\"filteredParticipants\", response);\r\n      })\r\n      .catch(setInstancesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //UseEffect is used to get the reservations\r\n  useEffect(loadParticipants, []);\r\n\r\n  //Load all of the participants filtered by last_name\r\n  function loadParticipants() {\r\n    const abortController = new AbortController();\r\n    setParticipantsError(null);\r\n\r\n    if (last_name) {\r\n      listParticipants({ last_name }, abortController.signal)\r\n        .then((response) => {\r\n          setParticipants(response);\r\n          console.log(\"participants\", response);\r\n        })\r\n        .catch(setParticipantsError);\r\n      return () => abortController.abort();\r\n    } else {\r\n      listParticipants({}, abortController.signal)\r\n        .then((response) => {\r\n          setParticipants(response);\r\n          console.log(\"participants\", response);\r\n        })\r\n        .catch(setParticipantsError);\r\n      return () => abortController.abort();\r\n    }\r\n  }\r\n\r\n  //Create the rows to fill the participants drop-down\r\n  const participantLinks = participants.map((participant) => {\r\n    return (\r\n      <option value={participant.participant_id}>\r\n        {participant.first_name} {participant.last_name}\r\n      </option>\r\n    );\r\n  });\r\n\r\n  //The handleSubmit function merely shows the search results\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    loadDashboard();\r\n    setVisibilityStatus(true);\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage1\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  //Return the form to enter the phone number and show the results\r\n  return (\r\n    <main>\r\n      <h1>View/Edit Data</h1>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"participants\">Select Participant</label>\r\n          <select\r\n            className=\"form-control\"\r\n            id=\"participants\"\r\n            name=\"participants\"\r\n            value={participantId}\r\n            onChange={handleParticipantIdChange}\r\n          >\r\n            <option value={\"\"}>All Participants</option>\r\n            {participantLinks}\r\n          </select>\r\n        </div>\r\n        <Link to={`/participants/${participantId}/view`}>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            style={{ margin: \"5px\" }}\r\n          >\r\n            Select Participant\r\n          </button>\r\n        </Link>\r\n        <br></br>\r\n\r\n        <div className=\"form-group\">\r\n          <br></br>\r\n          <h3>Look Up Participant</h3>\r\n          <label htmlFor=\"last_name\">Enter Participant's Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            className=\"form-control\"\r\n            id=\"last_name\"\r\n            onChange={handleLastNameChange}\r\n            value={last_name}\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Find\r\n        </button>\r\n      </form>\r\n      <div>\r\n        <SearchResults\r\n          visibility={visibilityStatus}\r\n          last_name={last_name}\r\n          filteredParticipants={filteredParticipants}\r\n        />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\SearchResults.js",["434","435"],"//The SearchResults component is used to show the results from the search for reservations by phone number\r\n//It is used on the Search component\r\n\r\nimport React from \"react\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { deleteParticipant } from \"../utils/api\";\r\n\r\nfunction SearchResults({ visibility, last_name, filteredParticipants }) {\r\n  //Create table rows of the reservations to display in the search results\r\n  //Use the reservations state array to create the arrows.\r\n\r\n  const history = useHistory();\r\n\r\n  //Function to delete participant\r\n  async function handleDelete(participant_id) {\r\n    console.log(\"here is the instance id\", participant_id);\r\n\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure want to delete this participant? (Note: All instances AND statuses associated with this participant must be deleted or this delete will not process.)\"\r\n      ) == true\r\n    ) {\r\n      try {\r\n        await deleteParticipant(participant_id);\r\n      } catch (err) {\r\n        console.log(\"Error making API call: \", err);\r\n      }\r\n\r\n      history.go(0);\r\n    } else {\r\n    }\r\n  }\r\n\r\n  const participantLinks = filteredParticipants.map((participant) => {\r\n    let dobString = \"\";\r\n    if (participant.dob) dobString = participant.dob.substring(0, 10);\r\n    return (\r\n      <tr key={participant.participant_id}>\r\n        <td>{participant.first_name}</td>\r\n        <td>{participant.last_name}</td>\r\n        <td>{dobString}</td>\r\n        <Link to={`/participants/${participant.participant_id}/view`}>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            style={{ margin: \"5px\" }}\r\n          >\r\n            Select Participant\r\n          </button>\r\n        </Link>\r\n\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-primary\"\r\n          style={{ margin: \"5px\" }}\r\n          onClick={() => {\r\n            handleDelete(participant.participant_id);\r\n          }}\r\n        >\r\n          Delete Participant\r\n        </button>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  if (visibility !== null) {\r\n    if (filteredParticipants.length === 0) {\r\n      return (\r\n        <div>\r\n          <h1>No participant instances found</h1>\r\n        </div>\r\n      );\r\n    } else {\r\n      //Return the results as a table\r\n      return (\r\n        <div>\r\n          <h1>Results found for {last_name}</h1>\r\n          <table class=\"table\">\r\n            <th>First Name</th>\r\n            <th>Last Name</th>\r\n            <th>Date of Birth</th>\r\n\r\n            {participantLinks}\r\n          </table>\r\n        </div>\r\n      );\r\n    }\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default SearchResults;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantNew.js",["436","437","438","439","440","441","442"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readParticipant, createParticipant } from \"../utils/api\";\r\nimport ParticipantNewForm from \"./ParticipantNewForm\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction ParticipantNew({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [dob, setDob] = useState(null);\r\n  const handleDobChange = (event) => setDob(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function creates a reservation based on the user input and then uses changeReservation() api call\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let participant_id;\r\n\r\n    let participant = {\r\n      data: {},\r\n    };\r\n\r\n    participant.data.first_name = firstName;\r\n    participant.data.last_name = lastName;\r\n    participant.data.dob = dob;\r\n\r\n    //Make api call to update reservation\r\n    async function newParticipant(participant) {\r\n      try {\r\n        const response = await createParticipant(participant);\r\n        if (response) alert(\"Participant Added Successfully\");\r\n        participant_id = response.participant_id;\r\n        console.log(\"Here is the response\", participant_id);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await newParticipant(participant);\r\n\r\n    //Go back to dashboard page\r\n    history.push(`/participants/${participant_id}/enrollNew`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Enroll New Participant</h1>\r\n      <ParticipantNewForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        dob={dob}\r\n        handleDobChange={handleDobChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default ParticipantNew;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollFormOld.js",["443","444","445"],"//The Seat Button is used to seat a reservation\r\n//The button will appear next to a reservation on the Dashboard\r\n//The two props are visibility and reservationId\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nfunction EnrollFormOld({\r\n  firstName,\r\n  handleFirstNameChange,\r\n  lastName,\r\n  handleLastNameChange,\r\n  gender,\r\n  handleGenderChange,\r\n  dob,\r\n  handleDobChange,\r\n  homeCounty,\r\n  handleHomeCountyChange,\r\n  incidentNum,\r\n  handleIncidentNumChange,\r\n  incomeBefore,\r\n  handleIncomeBeforeChange,\r\n  accountsPrior,\r\n  handleAccountsPriorChange,\r\n  lastUseDate,\r\n  handleLastUseChange,\r\n  yearsInside,\r\n  handleYearsInsideChange,\r\n  sexOff,\r\n  handleSexOffChange,\r\n  recentStayLength,\r\n  handleRecentStayLengthChange,\r\n  drugChoice,\r\n  handleDrugChoiceChange,\r\n  startDate,\r\n  handleStartDateChange,\r\n  mat,\r\n  handleMatChange,\r\n  tanf,\r\n  handleTanfChange,\r\n  chargesDescr,\r\n  handleChargesDescrChange,\r\n  copingLength,\r\n  handleCopingLengthChange,\r\n  needsGed,\r\n  handleNeedsGedChange,\r\n  employmentDetails,\r\n  handleEmploymentDetailsChange,\r\n  handleSubmit,\r\n  handleCancel,\r\n}) {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"first_name\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"first_name\"\r\n              className=\"form-control\"\r\n              id=\"first_name\"\r\n              aria-describedby=\"emailHelp\"\r\n              onChange={handleFirstNameChange}\r\n              value={firstName}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"last_name\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"last_name\"\r\n              className=\"form-control\"\r\n              id=\"last_name\"\r\n              onChange={handleLastNameChange}\r\n              value={lastName}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"gender\">Gender</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"gender\"\r\n              className=\"form-control\"\r\n              id=\"gender\"\r\n              onChange={handleGenderChange}\r\n              value={gender}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"dob\">Date of Birth</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"dob\"\r\n              className=\"form-control\"\r\n              id=\"dob\"\r\n              onChange={handleDobChange}\r\n              value={dob}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"home_county\">Home County</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"home_county\"\r\n              className=\"form-control\"\r\n              id=\"home_county\"\r\n              onChange={handleHomeCountyChange}\r\n              value={homeCounty}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"incident_num\">Incident Number</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"incident_num\"\r\n              className=\"form-control\"\r\n              id=\"incident_num\"\r\n              onChange={handleIncidentNumChange}\r\n              value={incidentNum}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"income_before\">Income Before Entering TRY</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"income_before\"\r\n              className=\"form-control\"\r\n              id=\"income_before\"\r\n              onChange={handleIncomeBeforeChange}\r\n              value={incomeBefore}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"accounts_prior\">Had Accounts Before TRY?</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"accounts_prior\"\r\n              className=\"form-control\"\r\n              id=\"accounts_prior\"\r\n              onChange={handleAccountsPriorChange}\r\n              value={accountsPrior}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"last_use_date\">Last Use Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"last_use_date\"\r\n              className=\"form-control\"\r\n              id=\"last_use_date\"\r\n              onChange={handleLastUseChange}\r\n              value={lastUseDate}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"years_inside\">Years on the Inside</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"years_inside\"\r\n              className=\"form-control\"\r\n              id=\"years_inside\"\r\n              onChange={handleYearsInsideChange}\r\n              value={yearsInside}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"sex_offender\">Sex Offender?</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"sex_offender\"\r\n              className=\"form-control\"\r\n              id=\"sex_offender\"\r\n              onChange={handleSexOffChange}\r\n              value={sexOff}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"recent_length\">Recent Stay Length</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"recent_length\"\r\n              className=\"form-control\"\r\n              id=\"recent_length\"\r\n              onChange={handleRecentStayLengthChange}\r\n              value={recentStayLength}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"drug_of_choice\">Drug of Choice?</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"drug_of_choice\"\r\n              className=\"form-control\"\r\n              id=\"drug_of_choice\"\r\n              onChange={handleDrugChoiceChange}\r\n              value={drugChoice}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"start_date\">Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"start_date\"\r\n              className=\"form-control\"\r\n              id=\"start_date\"\r\n              onChange={handleStartDateChange}\r\n              value={startDate}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"mat\">MAT</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"mat\"\r\n              className=\"form-control\"\r\n              id=\"mat\"\r\n              onChange={handleMatChange}\r\n              value={mat}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"tanf\">TANF</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"tanf\"\r\n              className=\"form-control\"\r\n              id=\"tanf\"\r\n              onChange={handleTanfChange}\r\n              value={tanf}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"charges_descr\">Charges Description:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"charges_descr\"\r\n              className=\"form-control\"\r\n              id=\"charges_descr\"\r\n              onChange={handleChargesDescrChange}\r\n              value={chargesDescr}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"coping_length\">Coping Length:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"coping_length\"\r\n              className=\"form-control\"\r\n              id=\"coping_length\"\r\n              onChange={handleCopingLengthChange}\r\n              value={copingLength}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"needs_ged\">Needs GED?:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"needs_ged\"\r\n              className=\"form-control\"\r\n              id=\"needs_ged\"\r\n              onChange={handleNeedsGedChange}\r\n              value={needsGed}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"employment_details\">Employment Details:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"employment_details\"\r\n              className=\"form-control\"\r\n              id=\"employment_details\"\r\n              onChange={handleEmploymentDetailsChange}\r\n              value={employmentDetails}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Submit\r\n      </button>{\" \"}\r\n      <button\r\n        type=\"cancel\"\r\n        className=\"btn btn-primary\"\r\n        onClick={() => {\r\n          history.goBack();\r\n        }}\r\n      >\r\n        Return to Previous\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default EnrollFormOld;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantNewForm.js",["446","447","448"],"//The Seat Button is used to seat a reservation\r\n//The button will appear next to a reservation on the Dashboard\r\n//The two props are visibility and reservationId\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nfunction ParticipantNewForm({\r\n  firstName,\r\n  handleFirstNameChange,\r\n  lastName,\r\n  handleLastNameChange,\r\n  dob,\r\n  handleDobChange,\r\n  handleSubmit,\r\n  handleCancel,\r\n}) {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"first_name\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"first_name\"\r\n              className=\"form-control\"\r\n              id=\"first_name\"\r\n              aria-describedby=\"emailHelp\"\r\n              onChange={handleFirstNameChange}\r\n              value={firstName}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"last_name\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"last_name\"\r\n              className=\"form-control\"\r\n              id=\"last_name\"\r\n              onChange={handleLastNameChange}\r\n              value={lastName}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"dob\">Date of Birth</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"dob\"\r\n              className=\"form-control\"\r\n              id=\"dob\"\r\n              onChange={handleDobChange}\r\n              value={dob}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Submit\r\n      </button>{\" \"}\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-primary\"\r\n        onClick={() => {\r\n          history.goBack();\r\n        }}\r\n      >\r\n        Return to Previous\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ParticipantNewForm;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollSearch.js",["449"],"//The SearchResults component is used to show the results from the search for reservations by phone number\r\n//It is used on the Search component\r\n\r\nimport React from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nfunction EnrollSearch({ visibility, last_name, participants }) {\r\n  //Create table rows of the reservations to display in the search results\r\n  //Use the reservations state array to create the arrows.\r\n  const participantLinks = participants.map((participant) => {\r\n    let dobString = \"\";\r\n    if (participant.dob) dobString = participant.dob.substring(0, 10);\r\n\r\n    return (\r\n      <tr key={participant.participant_id}>\r\n        <td>{participant.first_name}</td>\r\n        <td>{participant.last_name}</td>\r\n        <td>{dobString}</td>\r\n        <td>{participant.current_participant}</td>\r\n        <Link to={`/participants/${participant.participant_id}/enrollNew`}>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            style={{ margin: \"5px\" }}\r\n          >\r\n            Re-enroll\r\n          </button>\r\n        </Link>{\" \"}\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  if (visibility !== null) {\r\n    if (participants.length === 0) {\r\n      return (\r\n        <div>\r\n          <h1>No participants found</h1>\r\n        </div>\r\n      );\r\n    } else {\r\n      //Return the results as a table\r\n      return (\r\n        <div>\r\n          <h1>Instances found for {last_name}</h1>\r\n          <table class=\"table\">\r\n            <th>First Name</th>\r\n            <th>Last Name</th>\r\n            <th>Date of Birth</th>\r\n            <th>Current Participant</th>\r\n            {participantLinks}\r\n          </table>\r\n        </div>\r\n      );\r\n    }\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default EnrollSearch;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\NewInstance.js",["450","451","452","453","454","455"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readInstance, createInstance } from \"../utils/api\";\r\nimport EnrollFormOld from \"./EnrollFormOld\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction NewInstance({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [participantId, setParticipantId] = useState(\"\");\r\n  const handleParticipantIdChange = (event) =>\r\n    setParticipantId(event.target.value);\r\n\r\n  const [gender, setGender] = useState(\"\");\r\n  const handleGenderChange = (event) => setGender(event.target.value);\r\n\r\n  const [dob, setDob] = useState(\"\");\r\n  const handleDobChange = (event) => setDob(event.target.value);\r\n\r\n  const [homeCounty, setHomeCounty] = useState(\"\");\r\n  const handleHomeCountyChange = (event) => setHomeCounty(event.target.value);\r\n\r\n  const [incidentNum, setIncidentNum] = useState(null);\r\n  const handleIncidentNumChange = (event) => setIncidentNum(event.target.value);\r\n\r\n  const [incomeBefore, setIncomeBefore] = useState(\"\");\r\n  const handleIncomeBeforeChange = (event) =>\r\n    setIncomeBefore(event.target.value);\r\n\r\n  const [accountsPrior, setAccountsPrior] = useState(\"\");\r\n  const handleAccountsPriorChange = (event) =>\r\n    setAccountsPrior(event.target.value);\r\n\r\n  const [lastUseDate, setLastUseDate] = useState(\"\");\r\n  const handleLastUseChange = (event) => setLastUseDate(event.target.value);\r\n\r\n  const [yearsInside, setYearsInside] = useState(null);\r\n  const handleYearsInsideChange = (event) => setYearsInside(event.target.value);\r\n\r\n  const [sexOff, setSexOff] = useState(\"\");\r\n  const handleSexOffChange = (event) => setSexOff(event.target.value);\r\n\r\n  const [recentStayLength, setRecentStayLength] = useState(\"\");\r\n  const handleRecentStayLengthChange = (event) =>\r\n    setRecentStayLength(event.target.value);\r\n\r\n  const [drugChoice, setDrugChoice] = useState(\"\");\r\n  const handleDrugChoiceChange = (event) => setDrugChoice(event.target.value);\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const handleStartDateChange = (event) => setStartDate(event.target.value);\r\n\r\n  const [mat, setMat] = useState(\"\");\r\n  const handleMatChange = (event) => setMat(event.target.value);\r\n\r\n  const [tanf, setTanf] = useState(\"\");\r\n  const handleTanfChange = (event) => setTanf(event.target.value);\r\n\r\n  const [chargesDescr, setChargesDescr] = useState(\"\");\r\n  const handleChargesDescrChange = (event) =>\r\n    setChargesDescr(event.target.value);\r\n\r\n  const [copingLength, setCopingLength] = useState(\"\");\r\n  const handleCopingLengthChange = (event) =>\r\n    setCopingLength(event.target.value);\r\n\r\n  const [needsGed, setNeedsGed] = useState(\"\");\r\n  const handleNeedsGedChange = (event) => setNeedsGed(event.target.value);\r\n\r\n  const [employmentDetails, setEmploymentDetails] = useState(\"\");\r\n  const handleEmploymentDetailsChange = (event) =>\r\n    setEmploymentDetails(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Get instanceId from url\r\n  let { instanceId } = useParams();\r\n\r\n  //Make an API Call to get the instance based on the instance_id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setParticipantId(response.participant_id);\r\n      setGender(response.gender);\r\n      setDob(response.birth_date.substring(0, 10));\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function creates a reservation based on the user input and then uses changeReservation() api call\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let participant = {\r\n      data: {},\r\n    };\r\n\r\n    participant.data.participant_id = participantId;\r\n    participant.data.first_name = firstName;\r\n    participant.data.last_name = lastName;\r\n    participant.data.gender = gender;\r\n    participant.data.birth_date = dob;\r\n    participant.data.home_county = homeCounty;\r\n    participant.data.incident_num = incidentNum;\r\n    participant.data.income_before_try = incomeBefore;\r\n    participant.data.accounts_before_try = accountsPrior;\r\n    participant.data.last_use_date = lastUseDate;\r\n    participant.data.years_inside = yearsInside;\r\n    participant.data.sex_offender = sexOff;\r\n    participant.data.recent_stay_length = recentStayLength;\r\n    participant.data.drug_of_choice = drugChoice;\r\n    participant.data.start_date = startDate;\r\n    participant.data.mat_entering_try = mat;\r\n    participant.data.tanf = tanf;\r\n    participant.data.charges = chargesDescr;\r\n    participant.data.coping_period_length = copingLength;\r\n    participant.data.needs_ged = needsGed;\r\n    participant.data.employment_status_entering = employmentDetails;\r\n    participant.data.currently_in_program = \"yes\";\r\n\r\n    //Log participant\r\n    console.log(\"participant\", participant);\r\n\r\n    //Make api call to update reservation\r\n    async function newParticipant(participant) {\r\n      try {\r\n        const response = await createInstance(participant);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await newParticipant(participant);\r\n\r\n    alert(\"Participant Enrolled Successfully\");\r\n\r\n    //Go back to dashboard page\r\n    //history.push(`/participants/dashboard`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    //history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Edit Participant</h1>\r\n      <EnrollFormOld\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        gender={gender}\r\n        handleGenderChange={handleGenderChange}\r\n        dob={dob}\r\n        handleDobChange={handleDobChange}\r\n        homeCounty={homeCounty}\r\n        handleHomeCountyChange={handleHomeCountyChange}\r\n        incidentNum={incidentNum}\r\n        handleIncidentNumChange={handleIncidentNumChange}\r\n        incomeBefore={incomeBefore}\r\n        handleIncomeBeforeChange={handleIncomeBeforeChange}\r\n        accountsPrior={accountsPrior}\r\n        handleAccountsPriorChange={handleAccountsPriorChange}\r\n        lastUseDate={lastUseDate}\r\n        handleLastUseChange={handleLastUseChange}\r\n        yearsInside={yearsInside}\r\n        handleYearsInsideChange={handleYearsInsideChange}\r\n        sexOff={sexOff}\r\n        handleSexOffChange={handleSexOffChange}\r\n        recentStayLength={recentStayLength}\r\n        handleRecentStayLengthChange={handleRecentStayLengthChange}\r\n        drugChoice={drugChoice}\r\n        handleDrugChoiceChange={handleDrugChoiceChange}\r\n        startDate={startDate}\r\n        handleStartDateChange={handleStartDateChange}\r\n        mat={mat}\r\n        handleMatChange={handleMatChange}\r\n        tanf={tanf}\r\n        handleTanfChange={handleTanfChange}\r\n        chargesDescr={chargesDescr}\r\n        handleChargesDescrChange={handleChargesDescrChange}\r\n        copingLength={copingLength}\r\n        handleCopingLengthChange={handleCopingLengthChange}\r\n        needsGed={needsGed}\r\n        handleNeedsGedChange={handleNeedsGedChange}\r\n        employmentDetails={employmentDetails}\r\n        handleEmploymentDetailsChange={handleEmploymentDetailsChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default NewInstance;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollHome.js",["456","457","458"],"import React, { useEffect, useState } from \"react\";\r\nimport EnrollSearch from \"./EnrollSearch\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { listParticipants } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction EnrollHome({ date }) {\r\n  //Create the phone nubmer state variable and add event listeners\r\n  const [last_name, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n  const [visibilityStatus, setVisibilityStatus] = useState(null);\r\n  const [participants, setParticipants] = useState([]);\r\n  const [participantsError, setParticipantsError] = useState(null);\r\n\r\n  //UseEffect is used to get the reservations\r\n  useEffect(loadDashboard, [last_name]);\r\n\r\n  //Load all of the reservations filtered by phone number\r\n  function loadDashboard() {\r\n    const abortController = new AbortController();\r\n    setParticipantsError(null);\r\n    console.log(\"last_name\", last_name);\r\n\r\n    listParticipants({ last_name }, abortController.signal)\r\n      .then((response) => {\r\n        setParticipants(response);\r\n        console.log(\"participants\", response);\r\n      })\r\n      .catch(setParticipantsError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //The handleSubmit function merely shows the search results\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    loadDashboard();\r\n    setVisibilityStatus(true);\r\n  };\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage1\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  //Return the form to enter the phone number and show the results\r\n  return (\r\n    <main>\r\n      <h1>Enroll Participants</h1>\r\n      <br />\r\n      <h3>Enter New Participant</h3>\r\n      <Link to={`/participants/createParticipant`}>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Create New Participant\r\n        </button>\r\n      </Link>\r\n      <br></br>\r\n      <br />\r\n      <h3>Lookup Participants</h3>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"last_name\">Enter a Participant's Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            className=\"form-control\"\r\n            id=\"last_name\"\r\n            onChange={handleLastNameChange}\r\n            value={last_name}\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Find\r\n        </button>\r\n      </form>\r\n      <div>\r\n        <EnrollSearch\r\n          visibility={visibilityStatus}\r\n          last_name={last_name}\r\n          participants={participants}\r\n        />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default EnrollHome;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\EnrollNew.js",["459","460","461","462"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readParticipant, createInstance, listInstances } from \"../utils/api\";\r\nimport EnrollFormOld from \"./EnrollFormOld\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction EnrollNew({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [gender, setGender] = useState(\"\");\r\n  const handleGenderChange = (event) => setGender(event.target.value);\r\n\r\n  const [dob, setDob] = useState(\"\");\r\n  const handleDobChange = (event) => setDob(event.target.value);\r\n\r\n  const [homeCounty, setHomeCounty] = useState(\"\");\r\n  const handleHomeCountyChange = (event) => setHomeCounty(event.target.value);\r\n\r\n  const [incidentNum, setIncidentNum] = useState(null);\r\n  const handleIncidentNumChange = (event) => setIncidentNum(event.target.value);\r\n\r\n  const [incomeBefore, setIncomeBefore] = useState(\"\");\r\n  const handleIncomeBeforeChange = (event) =>\r\n    setIncomeBefore(event.target.value);\r\n\r\n  const [accountsPrior, setAccountsPrior] = useState(\"\");\r\n  const handleAccountsPriorChange = (event) =>\r\n    setAccountsPrior(event.target.value);\r\n\r\n  const [lastUseDate, setLastUseDate] = useState(\"\");\r\n  const handleLastUseChange = (event) => setLastUseDate(event.target.value);\r\n\r\n  const [yearsInside, setYearsInside] = useState(null);\r\n  const handleYearsInsideChange = (event) => setYearsInside(event.target.value);\r\n\r\n  const [sexOff, setSexOff] = useState(\"\");\r\n  const handleSexOffChange = (event) => setSexOff(event.target.value);\r\n\r\n  const [recentStayLength, setRecentStayLength] = useState(\"\");\r\n  const handleRecentStayLengthChange = (event) =>\r\n    setRecentStayLength(event.target.value);\r\n\r\n  const [drugChoice, setDrugChoice] = useState(\"\");\r\n  const handleDrugChoiceChange = (event) => setDrugChoice(event.target.value);\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const handleStartDateChange = (event) => setStartDate(event.target.value);\r\n\r\n  const [mat, setMat] = useState(\"\");\r\n  const handleMatChange = (event) => setMat(event.target.value);\r\n\r\n  const [tanf, setTanf] = useState(\"\");\r\n  const handleTanfChange = (event) => setTanf(event.target.value);\r\n\r\n  const [chargesDescr, setChargesDescr] = useState(\"\");\r\n  const handleChargesDescrChange = (event) =>\r\n    setChargesDescr(event.target.value);\r\n\r\n  const [copingLength, setCopingLength] = useState(\"\");\r\n  const handleCopingLengthChange = (event) =>\r\n    setCopingLength(event.target.value);\r\n\r\n  const [needsGed, setNeedsGed] = useState(\"\");\r\n  const handleNeedsGedChange = (event) => setNeedsGed(event.target.value);\r\n\r\n  const [employmentDetails, setEmploymentDetails] = useState(\"\");\r\n  const handleEmploymentDetailsChange = (event) =>\r\n    setEmploymentDetails(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Get participantId from url\r\n  const { participantId } = useParams();\r\n  const participant_id = participantId;\r\n  console.log(\"instance id\", participant_id);\r\n\r\n  //Load participant\r\n  //Make an API Call to get the participant on the participant_id\r\n  useEffect(() => {\r\n    async function getParticipant(participantId) {\r\n      const response = await readParticipant(participantId);\r\n\r\n      let dobString = response.dob.substring(0, 10);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setDob(dobString);\r\n    }\r\n    getParticipant(participantId);\r\n\r\n    async function getInstances(participantId) {\r\n      const response = await listInstances({ participant_id: participantId });\r\n      console.log(\"instances retrieved\", response);\r\n      setIncidentNum(response.length + 1);\r\n      if (response.length > 0) {\r\n        //Loop through the array of objects and grab the one with the highest instance_id\r\n        let counter = 0;\r\n        let chosenObject = {};\r\n        for (let i = 0; i < response.length; i++) {\r\n          if (response[i].instance_id > counter) {\r\n            counter = response[i].instance_id;\r\n            chosenObject = response[i];\r\n          }\r\n        }\r\n        setGender(chosenObject.gender);\r\n        setHomeCounty(chosenObject.home_county);\r\n        setDrugChoice(chosenObject.drug_of_choice);\r\n        setSexOff(chosenObject.sex_offender);\r\n        console.log(\"chosenObject\", chosenObject);\r\n      }\r\n    }\r\n    getInstances(participantId);\r\n  }, [participantId]);\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function creates a reservation based on the user input and then uses changeReservation() api call\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let participant = {\r\n      data: {},\r\n    };\r\n\r\n    participant.data.participant_id = participantId;\r\n    participant.data.first_name = firstName;\r\n    participant.data.last_name = lastName;\r\n    participant.data.gender = gender;\r\n    participant.data.birth_date = dob;\r\n    participant.data.home_county = homeCounty;\r\n    participant.data.incident_num = incidentNum;\r\n    participant.data.income_before_try = incomeBefore;\r\n    participant.data.accounts_before_try = accountsPrior;\r\n    participant.data.last_use_date = lastUseDate;\r\n    participant.data.years_inside = yearsInside;\r\n    participant.data.sex_offender = sexOff;\r\n    participant.data.recent_stay_length = recentStayLength;\r\n    participant.data.drug_of_choice = drugChoice;\r\n    participant.data.start_date = startDate;\r\n    participant.data.mat_entering_try = mat;\r\n    participant.data.tanf = tanf;\r\n    participant.data.charges = chargesDescr;\r\n    participant.data.coping_period_length = copingLength;\r\n    participant.data.needs_ged = needsGed;\r\n    participant.data.employment_details = employmentDetails;\r\n    participant.data.currently_in_program = \"yes\";\r\n\r\n    //Log participant\r\n    console.log(\"participant\", participant);\r\n\r\n    //Make api call to update reservation\r\n    async function newParticipant(participant) {\r\n      try {\r\n        const response = await createInstance(participant);\r\n        if (response) alert(\"Participant Enrolled Successfully\");\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await newParticipant(participant);\r\n\r\n    //Go back to dashboard page\r\n    history.push(`/participants/dashboard`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Enroll Participant</h1>\r\n      <EnrollFormOld\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        gender={gender}\r\n        handleGenderChange={handleGenderChange}\r\n        dob={dob}\r\n        handleDobChange={handleDobChange}\r\n        homeCounty={homeCounty}\r\n        handleHomeCountyChange={handleHomeCountyChange}\r\n        incidentNum={incidentNum}\r\n        handleIncidentNumChange={handleIncidentNumChange}\r\n        incomeBefore={incomeBefore}\r\n        handleIncomeBeforeChange={handleIncomeBeforeChange}\r\n        accountsPrior={accountsPrior}\r\n        handleAccountsPriorChange={handleAccountsPriorChange}\r\n        lastUseDate={lastUseDate}\r\n        handleLastUseChange={handleLastUseChange}\r\n        yearsInside={yearsInside}\r\n        handleYearsInsideChange={handleYearsInsideChange}\r\n        sexOff={sexOff}\r\n        handleSexOffChange={handleSexOffChange}\r\n        recentStayLength={recentStayLength}\r\n        handleRecentStayLengthChange={handleRecentStayLengthChange}\r\n        drugChoice={drugChoice}\r\n        handleDrugChoiceChange={handleDrugChoiceChange}\r\n        startDate={startDate}\r\n        handleStartDateChange={handleStartDateChange}\r\n        mat={mat}\r\n        handleMatChange={handleMatChange}\r\n        tanf={tanf}\r\n        handleTanfChange={handleTanfChange}\r\n        chargesDescr={chargesDescr}\r\n        handleChargesDescrChange={handleChargesDescrChange}\r\n        copingLength={copingLength}\r\n        handleCopingLengthChange={handleCopingLengthChange}\r\n        needsGed={needsGed}\r\n        handleNeedsGedChange={handleNeedsGedChange}\r\n        employmentDetails={employmentDetails}\r\n        handleEmploymentDetailsChange={handleEmploymentDetailsChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default EnrollNew;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\dashboard\\RecPrevInstances.js",["463","464","465","466","467","468","469","470","471","472"],"//This code is used to show all of the previous instances of a participant\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { listInstances } from \"../utils/api\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction RecPrevInstances({ date }) {\r\n  //The main state variables are instances of a specific participant\r\n  let [instances, setInstances] = useState([]);\r\n  const [instancesError, setInstancesError] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [day, setDay] = useState(\"\");\r\n  const [month, setMonth] = useState(\"\");\r\n  const [year, setYear] = useState(\"\");\r\n\r\n  //Declare an instance of the useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Get instanceId from url\r\n  const { participant_id } = useParams();\r\n  console.log(\"participant id\", participant_id);\r\n\r\n  //Use useEffect to load instances of a specific particiapnt\r\n  //Load isntances\r\n  useEffect(loadDashboard, [day, month, year]);\r\n  function loadDashboard() {\r\n    console.log(\"trying\");\r\n    const abortController = new AbortController();\r\n    setInstancesError(null);\r\n\r\n    listInstances({ participant_id }, abortController.signal)\r\n      .then(setInstances)\r\n      .catch(setInstancesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //Create table rows of instances using the 'instances' array\r\n  const instanceLinks = instances.map((instance) => {\r\n    let startDateString = instance.start_date.substring(0, 10);\r\n    let dischargeDateString = \"\";\r\n    if (instance.discharge_date)\r\n      dischargeDateString = instance.discharge_date.substring(0, 10);\r\n    let checkDateString = null;\r\n    if (instance.next_check_date)\r\n      checkDateString = instance.next_check_date.substring(0, 10);\r\n\r\n    return (\r\n      <tr key={instance.instance_id} style={{ padding: \"15px\" }}>\r\n        <td>{instance.instance_id}</td>\r\n        <td>{instance.first_name}</td>\r\n        <td>{instance.last_name}</td>\r\n        <td>{startDateString}</td>\r\n        <td>{dischargeDateString}</td>\r\n        <td>{checkDateString}</td>\r\n        <td>{instance[\"1_YR_Fed\"]}</td>\r\n        <td>{instance[\"1_YR_State\"]}</td>\r\n        <td>{instance[\"2_YR_Fed\"]}</td>\r\n        <td>{instance[\"2_YR_State\"]}</td>\r\n        <td>{instance[\"3_YR_Fed\"]}</td>\r\n        <td>{instance[\"3_YR_State\"]}</td>\r\n        <td>{instance[\"4_YR_Fed\"]}</td>\r\n        <td>{instance[\"4_YR_State\"]}</td>\r\n        <td>{instance[\"5_YR_Fed\"]}</td>\r\n        <td>{instance[\"5_YR_State\"]}</td>\r\n        <td>\r\n          <Link to={`/participants/${instance.instance_id}/rec_check`}>\r\n            <button\r\n              type=\"button\"\r\n              class=\"btn btn-primary\"\r\n              style={{ margin: \"5px\" }}\r\n            >\r\n              Perform Check\r\n            </button>\r\n          </Link>{\" \"}\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  //Return the html code for the instances\r\n  return (\r\n    <main>\r\n      <h1>View Previous Instances</h1>\r\n      <br />\r\n      <Link to={`/participants/rec_dashboard`}>\r\n        <button type=\"button\" class=\"btn btn-primary\" style={{ margin: \"5px\" }}>\r\n          Return to Recidivism Dashboard\r\n        </button>{\" \"}\r\n      </Link>\r\n      <br />\r\n      <br />\r\n      <table class=\"table table-sm\">\r\n        <tr>\r\n          <th>Instance ID</th> <th>First Name</th> <th>Last Name</th>\r\n          <th>Start Date</th> <th>Discharge Date</th> <th>Next Check Date</th>\r\n          <th>1 YR Fed</th>\r\n          <th>1 YR State</th>\r\n          <th>2 YR Fed</th>\r\n          <th>2 YR State</th>\r\n          <th>3 YR Fed</th>\r\n          <th>3 YR State</th>\r\n          <th>4 YR Fed</th>\r\n          <th>4 YR State</th>\r\n          <th>5 YR Fed</th>\r\n          <th>5 YR State</th>\r\n          <th></th>\r\n        </tr>\r\n\r\n        {instanceLinks}\r\n      </table>\r\n      <br />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default RecPrevInstances;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\DischargeParticipant.js",["473","474","475","476","477","478"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport {\r\n  readInstance,\r\n  updateInstance,\r\n  readParticipant,\r\n  createInstance,\r\n} from \"../utils/api\";\r\nimport DischargeForm from \"./DischargeForm\";\r\n\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction DischargeParticipant({ date }) {\r\n  //Create state variables for each field of reservation and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const handleStartDateChange = (event) => setStartDate(event.target.value);\r\n\r\n  const [dischargeDate, setDischargeDate] = useState(null);\r\n  const handleDischargeDateChange = (event) =>\r\n    setDischargeDate(event.target.value);\r\n\r\n  const [dischargeReason, setDischargeReason] = useState(\"\");\r\n  const handleDischargeReasonChange = (event) =>\r\n    setDischargeReason(event.target.value);\r\n\r\n  const [gotChecking, setGotChecking] = useState(\"\");\r\n  const handleGotCheckingChange = (event) => setGotChecking(event.target.value);\r\n\r\n  const [gotLicense, setGotLicense] = useState(\"\");\r\n  const handleGotLicenseChange = (event) => setGotLicense(event.target.value);\r\n\r\n  const [gotSavings, setGotSavings] = useState(\"\");\r\n  const handleGotSavingsChange = (event) => setGotSavings(event.target.value);\r\n\r\n  const [programUtilization, setProgramUtilization] = useState(\"Successful\");\r\n  const handleProgramUtilizationChange = (event) => {\r\n    setProgramUtilization(event.target.value);\r\n    console.log(\"programUtilization\", programUtilization);\r\n  };\r\n\r\n  const [housingTransition, setHousingTransition] = useState(\"\");\r\n  const handleHousingTransitionChange = (event) =>\r\n    setHousingTransition(event.target.value);\r\n\r\n  const [dischargeStatus, setDischargeStatus] = useState(\"\");\r\n  const handleDischargeStatusChange = (event) =>\r\n    setDischargeStatus(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Get participantId from url\r\n  const { instanceId } = useParams();\r\n  const instance_id = instanceId;\r\n  console.log(\"instance id\", instance_id);\r\n\r\n  //Load participant\r\n  //Make an API Call to get the participant on the participant_id\r\n\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n\r\n      let startDateString = response.start_date.substring(0, 10);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setStartDate(startDateString);\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function creates a reservation based on the user input and then uses changeReservation() api call\r\n  async function handleSubmit(event) {\r\n    console.log(\"beforeSubmit\", programUtilization);\r\n    console.log(typeof dischargeDate, \"dischargeDate\", dischargeDate);\r\n    event.preventDefault();\r\n\r\n    //To change discharge date into next_check_date\r\n    function addOneYear(input) {\r\n      const year = Number(input.substring(0, 4)) + 1;\r\n      console.log(\"return value\", year + input.substring(4));\r\n      return year + input.substring(4);\r\n    }\r\n\r\n    let instance = {\r\n      data: {},\r\n    };\r\n\r\n    instance.data.instance_id = instanceId;\r\n    instance.data.discharge_date = dischargeDate;\r\n    instance.data.discharge_reason = dischargeReason;\r\n    instance.data.got_checking = gotChecking;\r\n    instance.data.got_license = gotLicense;\r\n    instance.data.got_savings = gotSavings;\r\n    instance.data.program_utilization = programUtilization;\r\n    instance.data.housing_transition = housingTransition;\r\n    instance.data.status_at_discharge = dischargeStatus;\r\n    instance.data.currently_in_program = \"no\";\r\n    instance.data.next_check_date = addOneYear(dischargeDate);\r\n\r\n    //Log participant\r\n    console.log(\"instance\", instance);\r\n\r\n    //Make api call to update instance\r\n    async function updateDischargeInfo(updatedInstance) {\r\n      try {\r\n        const response = await updateInstance(updatedInstance);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await updateDischargeInfo(instance);\r\n\r\n    alert(\"Participant Discharged Successfully\");\r\n    //Go back to dashboard page\r\n    history.push(`/participants/dashboard`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Discharge Participant</h1>\r\n      <DischargeForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        startDate={startDate}\r\n        handleStartDateChange={handleStartDateChange}\r\n        dischargeDate={dischargeDate}\r\n        handleDischargeDateChange={handleDischargeDateChange}\r\n        dischargeReason={dischargeReason}\r\n        handleDischargeReasonChange={handleDischargeReasonChange}\r\n        gotChecking={gotChecking}\r\n        handleGotCheckingChange={handleGotCheckingChange}\r\n        gotLicense={gotLicense}\r\n        handleGotLicenseChange={handleGotLicenseChange}\r\n        gotSavings={gotSavings}\r\n        handleGotSavingsChange={handleGotSavingsChange}\r\n        programUtilization={programUtilization}\r\n        handleProgramUtilizationChange={handleProgramUtilizationChange}\r\n        housingTransition={housingTransition}\r\n        handleHousingTransitionChange={handleHousingTransitionChange}\r\n        dischargeStatus={dischargeStatus}\r\n        handleDischargeStatusChange={handleDischargeStatusChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default DischargeParticipant;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\DischargeForm.js",["479","480"],"//The Seat Button is used to seat a reservation\r\n//The button will appear next to a reservation on the Dashboard\r\n//The two props are visibility and reservationId\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction DischargeForm({\r\n  firstName,\r\n  handleFirstNameChange,\r\n  lastName,\r\n  handleLastNameChange,\r\n  startDate,\r\n  handleStartDateChange,\r\n  dischargeDate,\r\n  handleDischargeDateChange,\r\n  dischargeReason,\r\n  handleDischargeReasonChange,\r\n  gotChecking,\r\n  handleGotCheckingChange,\r\n  gotLicense,\r\n  handleGotLicenseChange,\r\n  gotSavings,\r\n  handleGotSavingsChange,\r\n  programUtilization,\r\n  handleProgramUtilizationChange,\r\n  housingTransition,\r\n  handleHousingTransitionChange,\r\n  dischargeStatus,\r\n  handleDischargeStatusChange,\r\n  handleSubmit,\r\n  handleCancel,\r\n}) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"first_name\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"first_name\"\r\n              className=\"form-control\"\r\n              id=\"first_name\"\r\n              aria-describedby=\"emailHelp\"\r\n              onChange={handleFirstNameChange}\r\n              value={firstName}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"last_name\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"last_name\"\r\n              className=\"form-control\"\r\n              id=\"last_name\"\r\n              onChange={handleLastNameChange}\r\n              value={lastName}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"start_date\">Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"start_date\"\r\n              className=\"form-control\"\r\n              id=\"start_date\"\r\n              onChange={handleStartDateChange}\r\n              value={startDate}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"discharge_date\">Discharge Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"discharge_date\"\r\n              className=\"form-control\"\r\n              id=\"discharge_date\"\r\n              onChange={handleDischargeDateChange}\r\n              value={dischargeDate}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"discharge_reason\">Reason for Discharge</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"discharge_reason\"\r\n              className=\"form-control\"\r\n              id=\"discharge_reason\"\r\n              onChange={handleDischargeReasonChange}\r\n              value={dischargeReason}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"got_checking\">Got Checking Account</label>\r\n            <select\r\n              className=\"form-control\"\r\n              id=\"got_checking\"\r\n              name=\"got_checking\"\r\n              onChange={handleGotCheckingChange}\r\n              value={gotChecking}\r\n            >\r\n              <option value=\"yes\">Yes</option>\r\n              <option value=\"no\">No</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"got_license\">Got Drivers License</label>\r\n            <select\r\n              className=\"form-control\"\r\n              id=\"got_license\"\r\n              name=\"got_license\"\r\n              onChange={handleGotLicenseChange}\r\n              value={gotLicense}\r\n            >\r\n              <option value=\"yes\">Yes</option>\r\n              <option value=\"no\">No</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"got_savings\">Got Savings Account</label>\r\n            <select\r\n              className=\"form-control\"\r\n              id=\"got_savings\"\r\n              name=\"got_savings\"\r\n              onChange={handleGotSavingsChange}\r\n              value={gotSavings}\r\n            >\r\n              <option value=\"yes\">Yes</option>\r\n              <option value=\"no\">No</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"program_utilization\">Program Utilization</label>\r\n            <select\r\n              className=\"form-control\"\r\n              id=\"program_utilization\"\r\n              name=\"program_utilization\"\r\n              onChange={handleProgramUtilizationChange}\r\n              value={programUtilization}\r\n            >\r\n              <option value=\"Successful\">Successful</option>\r\n              <option value=\"Unsuccessful\">Unsuccessful</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"housing_transition\">\r\n              Transitioned to Stable Housing?\r\n            </label>\r\n            <select\r\n              className=\"form-control\"\r\n              id=\"housing_transition\"\r\n              name=\"housing_transition\"\r\n              onChange={handleHousingTransitionChange}\r\n              value={housingTransition}\r\n            >\r\n              <option value=\"yes\">Yes</option>\r\n              <option value=\"no\">No</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"discharge_status\">Status at Discharge</label>\r\n            <select\r\n              className=\"form-control\"\r\n              id=\"discharge_status\"\r\n              name=\"discharge_status\"\r\n              onChange={handleDischargeStatusChange}\r\n              value={dischargeStatus}\r\n            >\r\n              <option value=\"coping\">Coping</option>\r\n              <option value=\"coping +60\">Coping +60</option>\r\n              <option value=\"career development\">Career Development</option>\r\n              <option value=\"employed\">Employed</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\"></div>\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Submit\r\n      </button>{\" \"}\r\n      <Link to={`/participants/dashboard`}>\r\n        <button type=\"cancel\" className=\"btn btn-primary\">\r\n          Return to Dashboard\r\n        </button>\r\n      </Link>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default DischargeForm;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\Reporting.js",["481","482","483","484","485","486","487","488","489","490","491","492"],"import React, { useEffect, useState } from \"react\";\r\nimport SearchResults from \"./SearchResults\";\r\nimport { listInstances, listParticipants, listStatuses } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\nimport { json2csv } from \"json-2-csv\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Reporting({ date }) {\r\n  //Create the phone nubmer state variable and add event listeners\r\n  const [participants, setParticipants] = useState([]);\r\n  const [participantsError, setParticipantsError] = useState(null);\r\n  const [participantId, setParticipantId] = useState(\"\");\r\n  const handleParticipantIdChange = (event) =>\r\n    setParticipantId(event.target.value);\r\n  const [visibilityStatus, setVisibilityStatus] = useState(null);\r\n  const [instances, setInstances] = useState([]);\r\n  const [instancesError, setInstancesError] = useState(null);\r\n  const [instance, setInstance] = useState(\"\");\r\n  const [statuses, setStatuses] = useState([]);\r\n  const [statusesError, setStatusesError] = useState(null);\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  const handleInstanceChange = (event) => setInstance(event.target.value);\r\n\r\n  //UseEffect is used to get the participants\r\n  useEffect(loadParticipants, []);\r\n\r\n  //Load all of the reservations filtered by phone number\r\n  function loadParticipants() {\r\n    const abortController = new AbortController();\r\n    setParticipantsError(null);\r\n\r\n    listParticipants({}, abortController.signal)\r\n      .then((response) => {\r\n        setParticipants(response);\r\n        console.log(\"participants\", response);\r\n      })\r\n      .catch(setParticipantsError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //UseEffect is used to get the instances\r\n  useEffect(loadInstances, [participantId]);\r\n\r\n  //Load all of the instances filtered by participant_id\r\n  function loadInstances() {\r\n    const abortController = new AbortController();\r\n    setInstancesError(null);\r\n    const participant_id = participantId;\r\n    console.log(\"participantId\", participant_id);\r\n    if (participant_id) {\r\n      listInstances({ participant_id }, abortController.signal)\r\n        .then((response) => {\r\n          setInstances(response);\r\n          console.log(\"instances\", response);\r\n        })\r\n        .catch(setInstancesError);\r\n      return () => abortController.abort();\r\n    } else {\r\n      listInstances({}, abortController.signal)\r\n        .then((response) => {\r\n          setInstances(response);\r\n          console.log(\"instances\", response);\r\n        })\r\n        .catch(setInstancesError);\r\n      return () => abortController.abort();\r\n    }\r\n  }\r\n\r\n  //UseEffect is used to get the statuses\r\n  useEffect(loadStatuses, [participantId]);\r\n\r\n  //Load all of the statuses filtered by participant_id\r\n  function loadStatuses() {\r\n    const abortController = new AbortController();\r\n    setInstancesError(null);\r\n    const participant_id = participantId;\r\n    console.log(\"participantId\", participant_id);\r\n    if (participant_id) {\r\n      listStatuses({ participant_id }, abortController.signal)\r\n        .then((response) => {\r\n          setStatuses(response);\r\n          console.log(\"statuses\", response);\r\n        })\r\n        .catch(setStatusesError);\r\n      return () => abortController.abort();\r\n    } else {\r\n      listStatuses({}, abortController.signal)\r\n        .then((response) => {\r\n          setStatuses(response);\r\n          console.log(\"statuses\", response);\r\n        })\r\n        .catch(setStatusesError);\r\n      return () => abortController.abort();\r\n    }\r\n  }\r\n\r\n  function handleExportInstances() {\r\n    json2csv(instances, (err, csv) => {\r\n      if (err) throw err;\r\n      //console.log(typeof csv);\r\n      //console.log(csv.length);\r\n      //console.log(csv);\r\n      const element = document.createElement(\"a\");\r\n      const file = new Blob([csv], {\r\n        type: \"application/csv\",\r\n      });\r\n      element.href = URL.createObjectURL(file);\r\n      element.download = \"instancesExport.csv\";\r\n      document.body.appendChild(element); // Required for this to work in FireFox\r\n      element.click();\r\n    });\r\n  }\r\n\r\n  function handleExportStatuses() {\r\n    json2csv(statuses, (err, csv) => {\r\n      if (err) throw err;\r\n      //console.log(typeof csv);\r\n      //console.log(csv.length);\r\n      //console.log(csv);\r\n      const element = document.createElement(\"a\");\r\n      const file = new Blob([csv], {\r\n        type: \"application/csv\",\r\n      });\r\n      element.href = URL.createObjectURL(file);\r\n      element.download = \"statusesExport.csv\";\r\n      document.body.appendChild(element); // Required for this to work in FireFox\r\n      element.click();\r\n    });\r\n  }\r\n\r\n  //Create the handleCancel function to cancel and return to the homepage1\r\n  const handleCancel = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const participantLinks = participants.map((participant) => {\r\n    return (\r\n      <option value={participant.participant_id}>\r\n        {participant.first_name} {participant.last_name}\r\n      </option>\r\n    );\r\n  });\r\n\r\n  async function handleSubmit(event) {}\r\n\r\n  //Return the form to enter the phone number and show the results\r\n  return (\r\n    <main>\r\n      <h1>Generate Reports</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"participants\">Select Participant</label>\r\n          <select\r\n            className=\"form-control\"\r\n            id=\"participants\"\r\n            name=\"participants\"\r\n            value={participantId}\r\n            onChange={handleParticipantIdChange}\r\n          >\r\n            <option value={\"\"}>All Participants</option>\r\n            {participantLinks}\r\n          </select>\r\n        </div>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={handleExportInstances}\r\n        >\r\n          Report Instances\r\n        </button>\r\n        <br></br>\r\n        <br></br>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={handleExportStatuses}\r\n        >\r\n          Report Statuses\r\n        </button>\r\n      </form>\r\n      <div></div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Reporting;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\data-importer\\Importer.js",["493","494","495","496","497","498","499","500","501"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  createStatus,\r\n  readInstance,\r\n  updateInstance,\r\n  createInstance,\r\n} from \"../../utils/api\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport instances1 from \"./instances.json\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Importer() {\r\n  const [instances, setInstances] = useState(instances1);\r\n  console.log(\"instances\", instances);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n    let newParticipant = instances[0];\r\n    newParticipant.participant_id = 1;\r\n    console.log(\"hey\", newParticipant);\r\n\r\n    //Load tempObj\r\n    let tempObj = {};\r\n\r\n    //Loop through newParticipant and if the key is not blank then load it\r\n    //into tempObj\r\n    for (const key in newParticipant) {\r\n      if (newParticipant[key]) {\r\n        tempObj[key] = newParticipant[key];\r\n      }\r\n    }\r\n\r\n    console.log(\"tempObj\", tempObj);\r\n\r\n    const participant = { data: tempObj };\r\n\r\n    //Make api call to insert temp obj into instances table\r\n    async function newInstance(participant) {\r\n      try {\r\n        const response = await createInstance(participant);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await newInstance(participant);\r\n  }\r\n\r\n  //Return the html with status drop-down\r\n  return (\r\n    <main>\r\n      <h1>Add Status Event</h1>\r\n\r\n      <div class=\"form-group\">\r\n        <form onSubmit={handleSubmit}>\r\n          <button\r\n            type=\"submit\"\r\n            class=\"btn btn-primary\"\r\n            style={{ margin: \"5px\" }}\r\n          >\r\n            Return to View Participant\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Importer;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ViewInstance.js",["502","503","504","505","506","507","508"],"//The main functions of the Dashboard component are to display all of the reservations\r\n//and allow the user to seat, edit, or cancel reservations and to display all of the\r\n//tables and allow the user to finish the tables\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { readInstance, listStatuses, deleteStatus } from \"../utils/api\";\r\nimport ParticipantMenu from \"./ParticipantMenu\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction ViewInstance({ date }) {\r\n  //The main state variables are reservations and tables which are arrays to be displayed\r\n  const [statuses, setStatuses] = useState([]);\r\n  const [statusesError, setStatusesError] = useState(null);\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [incidentNum, setIncidentNum] = useState(null);\r\n  const [participantId, setParticipantId] = useState(null);\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  //Declare an instance of the useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Get instanceId from url\r\n  const { instanceId } = useParams();\r\n  const instance_id = instanceId;\r\n  console.log(\"instance id\", instance_id);\r\n\r\n  //Use useEffect to load the statuses and the instances\r\n  //Load reservations\r\n  useEffect(loadStatuses, [date]);\r\n\r\n  function loadStatuses() {\r\n    const abortController = new AbortController();\r\n    setStatusesError(null);\r\n\r\n    listStatuses({ instance_id }, abortController.signal)\r\n      .then(setStatuses)\r\n      .catch(setStatusesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //Load instance\r\n  //Make an API Call to get the instance on the instance_id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n\r\n      let instDateString = response.start_date.substring(0, 10);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setIncidentNum(response.incident_num);\r\n      setStartDate(instDateString);\r\n      setParticipantId(response.participant_id);\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  //Function to delete a status\r\n  async function handleDelete(status_id) {\r\n    console.log(\"here is the status id\", status_id);\r\n\r\n    if (window.confirm(\"Are you sure want to delete this status?\") == true) {\r\n      try {\r\n        await deleteStatus(status_id);\r\n      } catch (err) {\r\n        console.log(\"Error making API call: \", err);\r\n      }\r\n\r\n      history.go(0);\r\n    } else {\r\n    }\r\n  }\r\n  //Create table rows of statuses using the 'statuses' state array\r\n  const statusLinks = statuses.map((status) => {\r\n    let dateString = status.date.substring(0, 10);\r\n\r\n    return (\r\n      <tr key={status.status_id}>\r\n        <td style={{ padding: \"10px\" }}>{status.status_name}</td>\r\n        <td style={{ padding: \"10px\" }}>{dateString}</td>\r\n        <td style={{ padding: \"10px\" }}>{status.notes}</td>\r\n        <Link to={`/statuses/${status.status_id}/edit`}>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            style={{ margin: \"5px\" }}\r\n          >\r\n            View/Edit Status\r\n          </button>\r\n        </Link>{\" \"}\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-primary\"\r\n          style={{ margin: \"5px\" }}\r\n          onClick={() => {\r\n            handleDelete(status.status_id);\r\n          }}\r\n        >\r\n          Delete Status\r\n        </button>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  //Return the html code for the reservations and the tables\r\n  return (\r\n    <main>\r\n      <h1>\r\n        <center>View Instance</center>\r\n      </h1>\r\n      <center>\r\n        <table\r\n          class=\"table table-sm\"\r\n          style={{ width: \"70%\", fontSize: \"25px\" }}\r\n        >\r\n          <tr style={{ padding: \"5px\" }}>\r\n            <td>\r\n              <strong>First Name: </strong>\r\n              {firstName}{\" \"}\r\n            </td>\r\n            <td>\r\n              <strong>Last Name: </strong> {lastName}\r\n            </td>\r\n            <td>\r\n              <strong>Incident #: </strong> {incidentNum}\r\n            </td>\r\n            <td>\r\n              <strong>Start Date: </strong> {startDate}\r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </center>\r\n      <br />\r\n\r\n      <div class=\"container\">\r\n        <div class=\"row\">\r\n          <div class=\"col\">\r\n            <ParticipantMenu\r\n              instanceId={instanceId}\r\n              participantId={participantId}\r\n            />\r\n          </div>\r\n          <div class=\"col-9\">\r\n            <h1>Status Updates</h1>\r\n            <table class=\"table table-sm\">\r\n              <tr>\r\n                <th>Status Name</th> <th>Date</th> <th>Notes</th>{\" \"}\r\n              </tr>\r\n              {statusLinks}\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <br />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default ViewInstance;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenu2.js",["509","510","511"],"//This is the Participant Menu\r\n//Currently the links do not work\r\n/*To restore the links, add the link tags around the buttons with the location such as this:\r\n<Link to={`/participants/${instanceId}/edit`}>\r\n        <button type=\"button\" class=\"btn btn-secondary\">\r\n          Edit Participant Info\r\n        </button>\r\n</Link>\r\n*/\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nfunction ParticipantMenu2({ participantId }) {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div class=\"btn-group-vertical\">\r\n      <Link to={`/participants/${participantId}/viewEditParticipant`}>\r\n        <button type=\"button\" class=\"btn btn-secondary\">\r\n          View/Edit Participant Info\r\n        </button>\r\n      </Link>\r\n      <br />\r\n      <Link to={`/participants/${participantId}/all_statuses`}>\r\n        <button type=\"button\" class=\"btn btn-secondary\">\r\n          View/Edit All Statuses\r\n        </button>\r\n      </Link>{\" \"}\r\n      <br />\r\n      <Link to={`/participants/search`}>\r\n        <button type=\"button\" class=\"btn btn-secondary\">\r\n          Return to Previous\r\n        </button>\r\n      </Link>\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ParticipantMenu2;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\EnrollEdit.js",["512","513","514","515","516","517","518","519"],"//This component is used to edit the enrollment information for an instance\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport {\r\n  readParticipant,\r\n  readInstance,\r\n  createInstance,\r\n  listInstances,\r\n  updateInstance,\r\n} from \"../../utils/api\";\r\nimport EnrollForm from \"./EnrollForm\";\r\n\r\nfunction EnrollEdit({}) {\r\n  //Create state variables for each instance field and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [gender, setGender] = useState(\"\");\r\n  const handleGenderChange = (event) => setGender(event.target.value);\r\n\r\n  const [dob, setDob] = useState(\"\");\r\n  const handleDobChange = (event) => setDob(event.target.value);\r\n\r\n  const [participantId, setParticipantId] = useState(\"\");\r\n  const handleParticipantIdChange = (event) =>\r\n    setParticipantId(event.target.value);\r\n\r\n  const [homeCounty, setHomeCounty] = useState(\"\");\r\n  const handleHomeCountyChange = (event) => setHomeCounty(event.target.value);\r\n\r\n  const [incidentNum, setIncidentNum] = useState(null);\r\n  const handleIncidentNumChange = (event) => setIncidentNum(event.target.value);\r\n\r\n  const [incomeBefore, setIncomeBefore] = useState(\"\");\r\n  const handleIncomeBeforeChange = (event) =>\r\n    setIncomeBefore(event.target.value);\r\n\r\n  const [accountsPrior, setAccountsPrior] = useState(\"\");\r\n  const handleAccountsPriorChange = (event) =>\r\n    setAccountsPrior(event.target.value);\r\n\r\n  const [lastUseDate, setLastUseDate] = useState(\"\");\r\n  const handleLastUseChange = (event) => setLastUseDate(event.target.value);\r\n\r\n  const [yearsInside, setYearsInside] = useState(null);\r\n  const handleYearsInsideChange = (event) => setYearsInside(event.target.value);\r\n\r\n  const [sexOff, setSexOff] = useState(\"\");\r\n  const handleSexOffChange = (event) => setSexOff(event.target.value);\r\n\r\n  const [recentStayLength, setRecentStayLength] = useState(\"\");\r\n  const handleRecentStayLengthChange = (event) =>\r\n    setRecentStayLength(event.target.value);\r\n\r\n  const [drugChoice, setDrugChoice] = useState(\"\");\r\n  const handleDrugChoiceChange = (event) => setDrugChoice(event.target.value);\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const handleStartDateChange = (event) => setStartDate(event.target.value);\r\n\r\n  const [mat, setMat] = useState(\"\");\r\n  const handleMatChange = (event) => setMat(event.target.value);\r\n\r\n  const [tanf, setTanf] = useState(\"\");\r\n  const handleTanfChange = (event) => setTanf(event.target.value);\r\n\r\n  const [chargesDescr, setChargesDescr] = useState(\"\");\r\n  const handleChargesDescrChange = (event) =>\r\n    setChargesDescr(event.target.value);\r\n\r\n  const [copingLength, setCopingLength] = useState(\"\");\r\n  const handleCopingLengthChange = (event) =>\r\n    setCopingLength(event.target.value);\r\n\r\n  const [needsGed, setNeedsGed] = useState(\"\");\r\n  const handleNeedsGedChange = (event) => setNeedsGed(event.target.value);\r\n\r\n  const [employmentDetails, setEmploymentDetails] = useState(\"\");\r\n  const handleEmploymentDetailsChange = (event) =>\r\n    setEmploymentDetails(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Get participantId from url\r\n  const { instanceId } = useParams();\r\n  const instance_id = instanceId;\r\n  console.log(\"instance id\", instance_id);\r\n\r\n  //Load instance\r\n  //Make an API Call to get the participant on the participant_id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n\r\n      let dobString = response.birth_date.substring(0, 10);\r\n      let startDateString = response.start_date.substring(0, 10);\r\n      let lastUseString = response.last_use_date.substring(0, 10);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setGender(response.gender);\r\n      setDob(dobString);\r\n      setParticipantId(response.participant_id);\r\n      setHomeCounty(response.home_county);\r\n      setIncidentNum(response.incident_num);\r\n      setIncomeBefore(response.income_before_try);\r\n      setAccountsPrior(response.accounts_before_try);\r\n      setLastUseDate(lastUseString);\r\n      setYearsInside(response.years_inside);\r\n      setSexOff(response.sex_offender);\r\n      setRecentStayLength(response.recent_stay_length);\r\n      setDrugChoice(response.drug_of_choice);\r\n      setStartDate(startDateString);\r\n      setMat(response.mat_entering_try);\r\n      setTanf(response.tanf);\r\n      setChargesDescr(response.charges);\r\n      setCopingLength(response.coping_period_length);\r\n      setNeedsGed(response.needs_ged);\r\n      setEmploymentDetails(response.employment_details);\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  //Create the handleSubmit function to update the enrollment info for the instance\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let participant = {\r\n      data: {},\r\n    };\r\n\r\n    participant.data.instance_id = Number(instanceId);\r\n    participant.data.participant_id = Number(participantId);\r\n    participant.data.first_name = firstName;\r\n    participant.data.last_name = lastName;\r\n    participant.data.gender = gender;\r\n    participant.data.birth_date = dob;\r\n    participant.data.home_county = homeCounty;\r\n    participant.data.incident_num = incidentNum;\r\n    participant.data.income_before_try = incomeBefore;\r\n    participant.data.accounts_before_try = accountsPrior;\r\n    participant.data.last_use_date = lastUseDate;\r\n    participant.data.years_inside = yearsInside;\r\n    participant.data.sex_offender = sexOff;\r\n    participant.data.recent_stay_length = recentStayLength;\r\n    participant.data.drug_of_choice = drugChoice;\r\n    participant.data.start_date = startDate;\r\n    participant.data.mat_entering_try = mat;\r\n    participant.data.tanf = tanf;\r\n    participant.data.charges = chargesDescr;\r\n    participant.data.coping_period_length = copingLength;\r\n    participant.data.needs_ged = needsGed;\r\n    participant.data.employment_details = employmentDetails;\r\n    participant.data.currently_in_program = \"yes\";\r\n\r\n    //Log participant\r\n    console.log(\"participant\", participant);\r\n\r\n    //Make api call to update the instance\r\n    async function editInstance(participant) {\r\n      try {\r\n        const response = await updateInstance(participant);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await editInstance(participant);\r\n\r\n    alert(\"Instance Updated Successfully\");\r\n    //Go back to dashboard page\r\n    // history.push(`/participants/dashboard`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the instance details\r\n  return (\r\n    <main>\r\n      <h1>Edit Enrollment Information</h1>\r\n      <EnrollForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        gender={gender}\r\n        handleGenderChange={handleGenderChange}\r\n        dob={dob}\r\n        handleDobChange={handleDobChange}\r\n        instanceId={instanceId}\r\n        homeCounty={homeCounty}\r\n        handleHomeCountyChange={handleHomeCountyChange}\r\n        incidentNum={incidentNum}\r\n        handleIncidentNumChange={handleIncidentNumChange}\r\n        incomeBefore={incomeBefore}\r\n        handleIncomeBeforeChange={handleIncomeBeforeChange}\r\n        accountsPrior={accountsPrior}\r\n        handleAccountsPriorChange={handleAccountsPriorChange}\r\n        lastUseDate={lastUseDate}\r\n        handleLastUseChange={handleLastUseChange}\r\n        yearsInside={yearsInside}\r\n        handleYearsInsideChange={handleYearsInsideChange}\r\n        sexOff={sexOff}\r\n        handleSexOffChange={handleSexOffChange}\r\n        recentStayLength={recentStayLength}\r\n        handleRecentStayLengthChange={handleRecentStayLengthChange}\r\n        drugChoice={drugChoice}\r\n        handleDrugChoiceChange={handleDrugChoiceChange}\r\n        startDate={startDate}\r\n        handleStartDateChange={handleStartDateChange}\r\n        mat={mat}\r\n        handleMatChange={handleMatChange}\r\n        tanf={tanf}\r\n        handleTanfChange={handleTanfChange}\r\n        chargesDescr={chargesDescr}\r\n        handleChargesDescrChange={handleChargesDescrChange}\r\n        copingLength={copingLength}\r\n        handleCopingLengthChange={handleCopingLengthChange}\r\n        needsGed={needsGed}\r\n        handleNeedsGedChange={handleNeedsGedChange}\r\n        employmentDetails={employmentDetails}\r\n        handleEmploymentDetailsChange={handleEmploymentDetailsChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default EnrollEdit;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\EnrollForm.js",["520","521","522"],"//This component is used to create a form where the\r\n//enrollment info for an instance can be edited\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nfunction EnrollForm({\r\n  firstName,\r\n  handleFirstNameChange,\r\n  lastName,\r\n  handleLastNameChange,\r\n  gender,\r\n  handleGenderChange,\r\n  dob,\r\n  instanceId,\r\n  handleDobChange,\r\n  homeCounty,\r\n  handleHomeCountyChange,\r\n  incidentNum,\r\n  handleIncidentNumChange,\r\n  incomeBefore,\r\n  handleIncomeBeforeChange,\r\n  accountsPrior,\r\n  handleAccountsPriorChange,\r\n  lastUseDate,\r\n  handleLastUseChange,\r\n  yearsInside,\r\n  handleYearsInsideChange,\r\n  sexOff,\r\n  handleSexOffChange,\r\n  recentStayLength,\r\n  handleRecentStayLengthChange,\r\n  drugChoice,\r\n  handleDrugChoiceChange,\r\n  startDate,\r\n  handleStartDateChange,\r\n  mat,\r\n  handleMatChange,\r\n  tanf,\r\n  handleTanfChange,\r\n  chargesDescr,\r\n  handleChargesDescrChange,\r\n  copingLength,\r\n  handleCopingLengthChange,\r\n  needsGed,\r\n  handleNeedsGedChange,\r\n  employmentDetails,\r\n  handleEmploymentDetailsChange,\r\n  handleSubmit,\r\n  handleCancel,\r\n}) {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"first_name\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"first_name\"\r\n              className=\"form-control\"\r\n              id=\"first_name\"\r\n              aria-describedby=\"emailHelp\"\r\n              onChange={handleFirstNameChange}\r\n              value={firstName}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"last_name\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"last_name\"\r\n              className=\"form-control\"\r\n              id=\"last_name\"\r\n              onChange={handleLastNameChange}\r\n              value={lastName}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"gender\">Gender</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"gender\"\r\n              className=\"form-control\"\r\n              id=\"gender\"\r\n              onChange={handleGenderChange}\r\n              value={gender}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"dob\">Date of Birth</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"dob\"\r\n              className=\"form-control\"\r\n              id=\"dob\"\r\n              onChange={handleDobChange}\r\n              value={dob}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"home_county\">Home County</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"home_county\"\r\n              className=\"form-control\"\r\n              id=\"home_county\"\r\n              onChange={handleHomeCountyChange}\r\n              value={homeCounty}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"incident_num\">Incident Number</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"incident_num\"\r\n              className=\"form-control\"\r\n              id=\"incident_num\"\r\n              onChange={handleIncidentNumChange}\r\n              value={incidentNum}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"income_before\">Income Before Entering TRY</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"income_before\"\r\n              className=\"form-control\"\r\n              id=\"income_before\"\r\n              onChange={handleIncomeBeforeChange}\r\n              value={incomeBefore}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"accounts_prior\">Had Accounts Before TRY?</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"accounts_prior\"\r\n              className=\"form-control\"\r\n              id=\"accounts_prior\"\r\n              onChange={handleAccountsPriorChange}\r\n              value={accountsPrior}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"last_use_date\">Last Use Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"last_use_date\"\r\n              className=\"form-control\"\r\n              id=\"last_use_date\"\r\n              onChange={handleLastUseChange}\r\n              value={lastUseDate}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"years_inside\">Years on the Inside</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"years_inside\"\r\n              className=\"form-control\"\r\n              id=\"years_inside\"\r\n              onChange={handleYearsInsideChange}\r\n              value={yearsInside}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"sex_offender\">Sex Offender?</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"sex_offender\"\r\n              className=\"form-control\"\r\n              id=\"sex_offender\"\r\n              onChange={handleSexOffChange}\r\n              value={sexOff}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"recent_length\">Recent Stay Length</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"recent_length\"\r\n              className=\"form-control\"\r\n              id=\"recent_length\"\r\n              onChange={handleRecentStayLengthChange}\r\n              value={recentStayLength}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"drug_of_choice\">Drug of Choice?</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"drug_of_choice\"\r\n              className=\"form-control\"\r\n              id=\"drug_of_choice\"\r\n              onChange={handleDrugChoiceChange}\r\n              value={drugChoice}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"start_date\">Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"start_date\"\r\n              className=\"form-control\"\r\n              id=\"start_date\"\r\n              onChange={handleStartDateChange}\r\n              value={startDate}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"mat\">MAT</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"mat\"\r\n              className=\"form-control\"\r\n              id=\"mat\"\r\n              onChange={handleMatChange}\r\n              value={mat}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"tanf\">TANF</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"tanf\"\r\n              className=\"form-control\"\r\n              id=\"tanf\"\r\n              onChange={handleTanfChange}\r\n              value={tanf}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"charges_descr\">Charges Description:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"charges_descr\"\r\n              className=\"form-control\"\r\n              id=\"charges_descr\"\r\n              onChange={handleChargesDescrChange}\r\n              value={chargesDescr}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"coping_length\">Coping Length:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"coping_length\"\r\n              className=\"form-control\"\r\n              id=\"coping_length\"\r\n              onChange={handleCopingLengthChange}\r\n              value={copingLength}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"needs_ged\">Needs GED?:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"needs_ged\"\r\n              className=\"form-control\"\r\n              id=\"needs_ged\"\r\n              onChange={handleNeedsGedChange}\r\n              value={needsGed}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"employment_details\">Employment Details:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"employment_details\"\r\n              className=\"form-control\"\r\n              id=\"employment_details\"\r\n              onChange={handleEmploymentDetailsChange}\r\n              value={employmentDetails}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Save Changes\r\n      </button>{\" \"}\r\n      <Link to={`/instances/${instanceId}/view`}>\r\n        <button type=\"button\" className=\"btn btn-primary\">\r\n          Return to Previous\r\n        </button>\r\n      </Link>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default EnrollForm;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\StatusEdit.js",["523","524","525","526","527","528","529","530"],"//This component is used to update the instance info that pertains\r\n//to statuses. It contains editing ability for both \"one-time statuses\"\r\n//and \"multiple-time statuses\".\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport {\r\n  readParticipant,\r\n  readInstance,\r\n  createInstance,\r\n  listInstances,\r\n  updateInstance,\r\n} from \"../../utils/api\";\r\nimport StatusForm from \"./StatusForm\";\r\n\r\nfunction StatusEdit({}) {\r\n  //Create state variables for each instance add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [participantId, setParticipantId] = useState(\"\");\r\n  const handleParticipantIdChange = (event) =>\r\n    setParticipantId(event.target.value);\r\n\r\n  const [incidentNum, setIncidentNum] = useState(null);\r\n  const handleIncidentNumChange = (event) => setIncidentNum(event.target.value);\r\n\r\n  const [startDate, setStartDate] = useState(null);\r\n  const handleStartDateChange = (event) => setStartDate(event.target.value);\r\n\r\n  const [offCoping, setOffCoping] = useState(null);\r\n  const handleOffCopingChange = (event) => setOffCoping(event.target.value);\r\n\r\n  const [offCoping60, setOffCoping60] = useState(null);\r\n  const handleOffCoping60Change = (event) => setOffCoping60(event.target.value);\r\n\r\n  const [employmentStart, setEmploymentStart] = useState(null);\r\n  const handleEmploymentStartChange = (event) =>\r\n    setEmploymentStart(event.target.value);\r\n\r\n  const [leadershipDev, setLeadershipDev] = useState(null);\r\n  const handleLeadershipDevChange = (event) =>\r\n    setLeadershipDev(event.target.value);\r\n\r\n  const [jobSearch, setJobSearch] = useState(null);\r\n  const handleJobSearchChange = (event) => setJobSearch(event.target.value);\r\n\r\n  const [iopStart, setIopStart] = useState(null);\r\n  const handleIopStartChange = (event) => setIopStart(event.target.value);\r\n\r\n  const [iopEnd, setIopEnd] = useState(null);\r\n  const handleIopEndChange = (event) => setIopEnd(event.target.value);\r\n\r\n  const [aftercareStart, setAftercareStart] = useState(null);\r\n  const handleAftercareStartChange = (event) =>\r\n    setAftercareStart(event.target.value);\r\n\r\n  const [aftercareEnd, setAftercareEnd] = useState(null);\r\n  const handleAftercareEndChange = (event) =>\r\n    setAftercareEnd(event.target.value);\r\n\r\n  const [gedStart, setGedStart] = useState(null);\r\n  const handleGedStartChange = (event) => setGedStart(event.target.value);\r\n\r\n  const [gedEnd, setGedEnd] = useState(null);\r\n  const handleGedEndChange = (event) => setGedEnd(event.target.value);\r\n\r\n  const [cptStart, setCptStart] = useState(null);\r\n  const handleCptStartChange = (event) => setCptStart(event.target.value);\r\n\r\n  const [cptEnd, setCptEnd] = useState(null);\r\n  const handleCptEndChange = (event) => setCptEnd(event.target.value);\r\n\r\n  const [matStart, setMatStart] = useState(null);\r\n  const handleMatStartChange = (event) => setMatStart(event.target.value);\r\n\r\n  const [onRestrictions, setOnRestrictions] = useState(null);\r\n  const handleOnRestrictionsChange = (event) =>\r\n    setOnRestrictions(event.target.value);\r\n\r\n  const [offRestrictions, setOffRestrictions] = useState(null);\r\n  const handleOffRestrictionsChange = (event) =>\r\n    setOffRestrictions(event.target.value);\r\n\r\n  const [drugTest, setDrugTest] = useState(null);\r\n  const handleDrugTestChange = (event) => setDrugTest(event.target.value);\r\n\r\n  const [recTreatmentUpdate, setRecTreatmentUpdate] = useState(null);\r\n  const handleRecTreatmentUpdateChange = (event) =>\r\n    setRecTreatmentUpdate(event.target.value);\r\n\r\n  const [hadCounseling, setHadCounseling] = useState(null);\r\n  const handleHadCounselingChange = (event) =>\r\n    setHadCounseling(event.target.value);\r\n\r\n  const [relapseDate, setRelapseDate] = useState(null);\r\n  const handleRelapseDateChange = (event) => setRelapseDate(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Get participantId from url\r\n  const { instanceId } = useParams();\r\n  const instance_id = instanceId;\r\n  console.log(\"instance id\", instance_id);\r\n\r\n  //Load instance\r\n  //Make an API Call to get the participant on the participant_id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setIncidentNum(response.incident_num);\r\n      setParticipantId(response.participant_id);\r\n      if (response.start_date)\r\n        setStartDate(response.start_date.substring(0, 10));\r\n      if (response.off_coping_date)\r\n        setOffCoping(response.off_coping_date.substring(0, 10));\r\n      if (response.off_coping60_date)\r\n        setOffCoping60(response.off_coping60_date.substring(0, 10));\r\n      if (response.employment_start_date)\r\n        setEmploymentStart(response.employment_start_date.substring(0, 10));\r\n      if (response.leadership_dev_start_date)\r\n        setLeadershipDev(response.leadership_dev_start_date.substring(0, 10));\r\n      if (response.job_search_start_date)\r\n        setJobSearch(response.job_search_start_date.substring(0, 10));\r\n      if (response.iop_start_date)\r\n        setIopStart(response.iop_start_date.substring(0, 10));\r\n      if (response.iop_end_date)\r\n        setIopEnd(response.iop_end_date.substring(0, 10));\r\n      if (response.aftercare_start_date)\r\n        setAftercareStart(response.aftercare_start_date.substring(0, 10));\r\n      if (response.aftercare_end_date)\r\n        setAftercareEnd(response.aftercare_end_date.substring(0, 10));\r\n      if (response.ged_start_date)\r\n        setGedStart(response.ged_start_date.substring(0, 10));\r\n      if (response.ged_end_date)\r\n        setGedEnd(response.ged_end_date.substring(0, 10));\r\n      if (response.cpt_start_date)\r\n        setCptStart(response.cpt_start_date.substring(0, 10));\r\n      if (response.cpt_end_date)\r\n        setCptEnd(response.cpt_end_date.substring(0, 10));\r\n      if (response.started_mat_date)\r\n        setMatStart(response.started_mat_date.substring(0, 10));\r\n      if (response.on_restrictions)\r\n        setOnRestrictions(response.on_restrictions.substring(0, 10));\r\n      if (response.off_restrictions)\r\n        setOffRestrictions(response.off_restrictions.substring(0, 10));\r\n      if (response.drug_test_date)\r\n        setDrugTest(response.drug_test_date.substring(0, 10));\r\n      if (response.rec_treatment_update)\r\n        setRecTreatmentUpdate(response.rec_treatment_update.substring(0, 10));\r\n      if (response.had_counseling)\r\n        setHadCounseling(response.had_counseling.substring(0, 10));\r\n      if (response.relapse_date)\r\n        setRelapseDate(response.relapse_date.substring(0, 10));\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  //Create the handleSubmit function to update the status\r\n  //based on the information input\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let participant = {\r\n      data: {},\r\n    };\r\n\r\n    participant.data.instance_id = Number(instanceId);\r\n    participant.data.participant_id = Number(participantId);\r\n    participant.data.off_coping_date = offCoping;\r\n    participant.data.off_coping60_date = offCoping60;\r\n    participant.data.employment_start_date = employmentStart;\r\n    participant.data.leadership_dev_start_date = leadershipDev;\r\n    participant.data.job_search_start_date = jobSearch;\r\n    participant.data.iop_start_date = iopStart;\r\n    participant.data.iop_end_date = iopEnd;\r\n    participant.data.aftercare_start_date = aftercareStart;\r\n    participant.data.aftercare_end_date = aftercareEnd;\r\n    participant.data.ged_start_date = gedStart;\r\n    participant.data.ged_end_date = gedEnd;\r\n    participant.data.cpt_start_date = cptStart;\r\n    participant.data.cpt_end_date = cptEnd;\r\n    participant.data.started_mat_date = matStart;\r\n    participant.data.on_restrictions_date = onRestrictions;\r\n    participant.data.off_restrictions_date = offRestrictions;\r\n    participant.data.drug_test_date = drugTest;\r\n    participant.data.rec_treatment_update = recTreatmentUpdate;\r\n    participant.data.had_counseling = hadCounseling;\r\n    participant.data.relapse_date = relapseDate;\r\n\r\n    //Log participant\r\n    console.log(\"participant\", participant);\r\n\r\n    //Make api call to update the instance\r\n    async function editInstance(participant) {\r\n      try {\r\n        const response = await updateInstance(participant);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await editInstance(participant);\r\n\r\n    alert(\"Instance Updated Successfully\");\r\n    //Go back to dashboard page\r\n    // history.push(`/participants/dashboard`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the instance\r\n  return (\r\n    <main>\r\n      <h1>Edit Enrollment Information</h1>\r\n      <StatusForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        instanceId={instanceId}\r\n        incidentNum={incidentNum}\r\n        handleIncidentNumChange={handleIncidentNumChange}\r\n        startDate={startDate}\r\n        handleStartDateChange={handleStartDateChange}\r\n        offCoping={offCoping}\r\n        handleOffCopingChange={handleOffCopingChange}\r\n        offCoping60={offCoping60}\r\n        handleOffCoping60Change={handleOffCoping60Change}\r\n        employmentStart={employmentStart}\r\n        handleEmploymentStartChange={handleEmploymentStartChange}\r\n        leadershipDev={leadershipDev}\r\n        handleLeadershipDevChange={handleLeadershipDevChange}\r\n        jobSearch={jobSearch}\r\n        handleJobSearchChange={handleJobSearchChange}\r\n        iopStart={iopStart}\r\n        handleIopStartChange={handleIopStartChange}\r\n        iopEnd={iopEnd}\r\n        handleIopEndChange={handleIopEndChange}\r\n        aftercareStart={aftercareStart}\r\n        handleAftercareStartChange={handleAftercareStartChange}\r\n        aftercareEnd={aftercareEnd}\r\n        handleAftercareEndChange={handleAftercareEndChange}\r\n        gedStart={gedStart}\r\n        handleGedStartChange={handleGedStartChange}\r\n        gedEnd={gedEnd}\r\n        handleGedEndChange={handleGedEndChange}\r\n        cptStart={cptStart}\r\n        handleCptStartChange={handleCptStartChange}\r\n        cptEnd={cptEnd}\r\n        handleCptEndChange={handleCptEndChange}\r\n        matStart={matStart}\r\n        handleMatStartChange={handleMatStartChange}\r\n        onRestrictions={onRestrictions}\r\n        handleOnRestrictionsChange={handleOnRestrictionsChange}\r\n        offRestrictions={offRestrictions}\r\n        handleOffRestrictionsChange={handleOffRestrictionsChange}\r\n        drugTest={drugTest}\r\n        handleDrugTestChange={handleDrugTestChange}\r\n        recTreatementUpdate={recTreatmentUpdate}\r\n        handleRecTreatmentUpdateChange={handleRecTreatmentUpdateChange}\r\n        hadCounseling={hadCounseling}\r\n        handleHadCounselingChange={handleHadCounselingChange}\r\n        relapseDate={relapseDate}\r\n        handleRelapseDateChange={handleRelapseDateChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default StatusEdit;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\StatusForm.js",["531","532"],"//This component is used to create a form where the\r\n//status info for an instance can be edited\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction StatusForm({\r\n  firstName,\r\n  handleFirstNameChange,\r\n  lastName,\r\n  handleLastNameChange,\r\n  instanceId,\r\n  incidentNum,\r\n  handleIncidentNumChange,\r\n  startDate,\r\n  handleStartDateChange,\r\n  offCoping,\r\n  handleOffCopingChange,\r\n  offCoping60,\r\n  handleOffCoping60Change,\r\n  employmentStart,\r\n  handleEmploymentStartChange,\r\n\r\n  leadershipDev,\r\n  handleLeadershipDevChange,\r\n  jobSearch,\r\n  handleJobSearchChange,\r\n  iopStart,\r\n  handleIopStartChange,\r\n  iopEnd,\r\n  handleIopEndChange,\r\n  aftercareStart,\r\n  handleAftercareStartChange,\r\n  aftercareEnd,\r\n  handleAftercareEndChange,\r\n  gedStart,\r\n  handleGedStartChange,\r\n  gedEnd,\r\n  handleGedEndChange,\r\n  cptStart,\r\n  handleCptStartChange,\r\n  cptEnd,\r\n  handleCptEndChange,\r\n  matStart,\r\n  handleMatStartChange,\r\n  onRestrictions,\r\n  handleOnRestrictionsChange,\r\n  offRestrictions,\r\n  handleOffRestrictionsChange,\r\n  drugTest,\r\n  handleDrugTestChange,\r\n  recTreatmentUpdate,\r\n  handleRecTreatmentUpdateChange,\r\n  hadCounseling,\r\n  handleHadCounselingChange,\r\n  relapseDate,\r\n  handleRelapseDateChange,\r\n  handleSubmit,\r\n  handleCancel,\r\n}) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"first_name\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"first_name\"\r\n              className=\"form-control\"\r\n              id=\"first_name\"\r\n              aria-describedby=\"emailHelp\"\r\n              onChange={handleFirstNameChange}\r\n              value={firstName}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"last_name\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"last_name\"\r\n              className=\"form-control\"\r\n              id=\"last_name\"\r\n              onChange={handleLastNameChange}\r\n              value={lastName}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"incident_num\">Incident Number</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"incident_num\"\r\n              className=\"form-control\"\r\n              id=\"incident_num\"\r\n              onChange={handleIncidentNumChange}\r\n              value={incidentNum}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"start_date\">Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"start_date\"\r\n              className=\"form-control\"\r\n              id=\"start_date\"\r\n              onChange={handleStartDateChange}\r\n              value={startDate}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"off_coping_date\">Off Coping Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"off_coping_date\"\r\n              className=\"form-control\"\r\n              id=\"off_coping_date\"\r\n              onChange={handleOffCopingChange}\r\n              value={offCoping}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"off_coping60_date\">Off Coping 60 Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"off_coping60_date\"\r\n              className=\"form-control\"\r\n              id=\"off_coping60_date\"\r\n              onChange={handleOffCoping60Change}\r\n              value={offCoping60}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"employment_start_date\">Employment Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"employment_start_date\"\r\n              className=\"form-control\"\r\n              id=\"employment_start_date\"\r\n              onChange={handleEmploymentStartChange}\r\n              value={employmentStart}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"leadership_dev_start_date\">\r\n              Leadership Development Start Date\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"leadership_dev_start_date\"\r\n              className=\"form-control\"\r\n              id=\"leadership_dev_start_date\"\r\n              onChange={handleLeadershipDevChange}\r\n              value={leadershipDev}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"job_search_start_date\">Job Search Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"job_search_start_date\"\r\n              className=\"form-control\"\r\n              id=\"job_search_start_date\"\r\n              onChange={handleJobSearchChange}\r\n              value={jobSearch}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"iop_start_date\">IOP Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"iop_start_date\"\r\n              className=\"form-control\"\r\n              id=\"iop_start_date\"\r\n              onChange={handleIopStartChange}\r\n              value={iopStart}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"iop_end_date\">IOP End Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"iop_end_date\"\r\n              className=\"form-control\"\r\n              id=\"iop_date_end\"\r\n              onChange={handleIopEndChange}\r\n              value={iopEnd}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"aftercare_start_date\">Aftercare Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"aftercare_start_date\"\r\n              className=\"form-control\"\r\n              id=\"aftercare_start_date\"\r\n              onChange={handleAftercareStartChange}\r\n              value={aftercareStart}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"aftercare_end_date\">Aftercare End Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"aftercare_end_date\"\r\n              className=\"form-control\"\r\n              id=\"aftercare_end_date\"\r\n              onChange={handleAftercareEndChange}\r\n              value={aftercareEnd}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"ged_start_date\">Ged Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"ged_start_date\"\r\n              className=\"form-control\"\r\n              id=\"ged_start_date\"\r\n              onChange={handleGedStartChange}\r\n              value={gedStart}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"ged_end_date\">GED End Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"ged_end_date\"\r\n              className=\"form-control\"\r\n              id=\"ged_end_date\"\r\n              onChange={handleGedEndChange}\r\n              value={gedEnd}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"cpt_start_date\">CPT Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"cpt_start_date\"\r\n              className=\"form-control\"\r\n              id=\"cpt_start_date\"\r\n              onChange={handleCptStartChange}\r\n              value={cptStart}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"cpt_end_date\">CPT End Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"cpt_end_date\"\r\n              className=\"form-control\"\r\n              id=\"cpt_end_date\"\r\n              onChange={handleCptEndChange}\r\n              value={cptEnd}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"started_mat_date\">Started Mat Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"started_mat_date\"\r\n              className=\"form-control\"\r\n              id=\"started_mat_date\"\r\n              onChange={handleMatStartChange}\r\n              value={matStart}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"on_restrictions_date\">\r\n              Most Recent On Restrictions Date\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"on_restrictions_date\"\r\n              className=\"form-control\"\r\n              id=\"on_restrictions_date\"\r\n              onChange={handleOnRestrictionsChange}\r\n              value={onRestrictions}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"off_restrictions_date\">\r\n              Most Recent Off Restrictions Date\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"off_restrictions_date\"\r\n              className=\"form-control\"\r\n              id=\"off_restrictions_date\"\r\n              onChange={handleOffRestrictionsChange}\r\n              value={offRestrictions}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"drug_test_date\">Most Recent Drug Test Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"drug_test_date\"\r\n              className=\"form-control\"\r\n              id=\"drug_test_date\"\r\n              onChange={handleDrugTestChange}\r\n              value={drugTest}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"rec_treatment_update\">\r\n              Most Recent Treatment Update\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"rec_treatment_update\"\r\n              className=\"form-control\"\r\n              id=\"rec_treatment_update\"\r\n              onChange={handleRecTreatmentUpdateChange}\r\n              value={recTreatmentUpdate}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"had_counseling\">Most Recent Counseling Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"had_counseling\"\r\n              className=\"form-control\"\r\n              id=\"had_counseling\"\r\n              onChange={handleHadCounselingChange}\r\n              value={hadCounseling}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"relapse_date\">Most Recent Relapse Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"relapse_date\"\r\n              className=\"form-control\"\r\n              id=\"relapse_date\"\r\n              onChange={handleRelapseDateChange}\r\n              value={relapseDate}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Save Changes\r\n      </button>{\" \"}\r\n      <Link to={`/instances/${instanceId}/view`}>\r\n        <button type=\"button\" className=\"btn btn-primary\">\r\n          Return to Previous\r\n        </button>\r\n      </Link>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default StatusForm;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\DischargeEdit.js",["533","534","535","536","537","538","539","540"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport {\r\n  readParticipant,\r\n  readInstance,\r\n  createInstance,\r\n  listInstances,\r\n  updateInstance,\r\n} from \"../../utils/api\";\r\nimport DischargeForm from \"./DischargeForm\";\r\n\r\nfunction StatusEdit({}) {\r\n  //Create state variables to send to the DischargeForm which will modify discharge info\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [participantId, setParticipantId] = useState(\"\");\r\n  const handleParticipantIdChange = (event) =>\r\n    setParticipantId(event.target.value);\r\n\r\n  const [incidentNum, setIncidentNum] = useState(null);\r\n  const handleIncidentNumChange = (event) => setIncidentNum(event.target.value);\r\n\r\n  const [startDate, setStartDate] = useState(null);\r\n  const handleStartDateChange = (event) => setStartDate(event.target.value);\r\n\r\n  const [gotChecking, setGotChecking] = useState(\"\");\r\n  const handleGotCheckingChange = (event) => setGotChecking(event.target.value);\r\n\r\n  const [gotLicense, setGotLicense] = useState(\"\");\r\n  const handleGotLicenseChange = (event) => setGotLicense(event.target.value);\r\n\r\n  const [gotSavings, setGotSavings] = useState(\"\");\r\n  const handleGotSavingsChange = (event) => setGotSavings(event.target.value);\r\n\r\n  const [programUtilization, setProgramUtilization] = useState(\"\");\r\n  const handleProgramUtilizationChange = (event) =>\r\n    setProgramUtilization(event.target.value);\r\n\r\n  const [dischargeDate, setDischargeDate] = useState(null);\r\n  const handleDischargeDateChange = (event) =>\r\n    setDischargeDate(event.target.value);\r\n\r\n  const [dischargeReason, setDischargeReason] = useState(\"\");\r\n  const handleDischargeReasonChange = (event) =>\r\n    setDischargeReason(event.target.value);\r\n\r\n  const [housingTransition, setHousingTransition] = useState(\"\");\r\n  const handleHousingTransitionChange = (event) =>\r\n    setHousingTransition(event.target.value);\r\n\r\n  const [dischargeStatus, setDischargeStatus] = useState(\"\");\r\n  const handleDischargeStatusChange = (event) =>\r\n    setDischargeStatus(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Get participantId from url\r\n  const { instanceId } = useParams();\r\n  const instance_id = instanceId;\r\n  console.log(\"instance id\", instance_id);\r\n\r\n  //Load instance\r\n  //Make an API Call to get the participant on the participant_id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setIncidentNum(response.incident_num);\r\n      setParticipantId(response.participant_id);\r\n      if (response.start_date)\r\n        setStartDate(response.start_date.substring(0, 10));\r\n      if (response.discharge_date)\r\n        setDischargeDate(response.discharge_date.substring(0, 10));\r\n      setGotChecking(response.got_checking);\r\n      setGotLicense(response.got_license);\r\n      setGotSavings(response.got_savings);\r\n      setProgramUtilization(response.program_utilization);\r\n      setDischargeDate(response.discharge_date);\r\n      setDischargeReason(response.discharge_reason);\r\n      setHousingTransition(response.housing_transition);\r\n      setDischargeStatus(response.status_at_discharge);\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  //Create the handleSubmit function to update the discharge info on that instance\r\n  //This function creates an instance object and then calls an update function to update the instance\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let participant = {\r\n      data: {},\r\n    };\r\n\r\n    participant.data.instance_id = Number(instanceId);\r\n    participant.data.participant_id = Number(participantId);\r\n    participant.data.got_checking = gotChecking;\r\n    participant.data.got_license = gotLicense;\r\n    participant.data.got_savings = gotSavings;\r\n    participant.data.program_utilization = programUtilization;\r\n    participant.data.discharge_date = dischargeDate;\r\n    participant.data.discharge_reason = dischargeReason;\r\n    participant.data.housing_transition = housingTransition;\r\n    participant.data.status_at_discharge = dischargeStatus;\r\n\r\n    //Log participant\r\n    console.log(\"participant\", participant);\r\n\r\n    //Make api call to update instance\r\n    async function editInstance(participant) {\r\n      try {\r\n        const response = await updateInstance(participant);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await editInstance(participant);\r\n\r\n    alert(\"Instance Updated Successfully\");\r\n    //Go back to dashboard page\r\n    // history.push(`/participants/dashboard`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the discharge details\r\n  return (\r\n    <main>\r\n      <h1>Edit Discharge Information</h1>\r\n      <DischargeForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        instanceId={instanceId}\r\n        incidentNum={incidentNum}\r\n        handleIncidentNumChange={handleIncidentNumChange}\r\n        startDate={startDate}\r\n        handleStartDateChange={handleStartDateChange}\r\n        gotChecking={gotChecking}\r\n        handleGotCheckingChange={handleGotCheckingChange}\r\n        gotLicense={gotLicense}\r\n        handleGotLicenseChange={handleGotLicenseChange}\r\n        gotSavings={gotSavings}\r\n        handleGotSavingsChange={handleGotSavingsChange}\r\n        programUtilization={programUtilization}\r\n        handleProgramUtilizationChange={handleProgramUtilizationChange}\r\n        dischargeDate={dischargeDate}\r\n        handleDischargeDateChange={handleDischargeDateChange}\r\n        dischargeReason={dischargeReason}\r\n        handleDischargeReasonChange={handleDischargeReasonChange}\r\n        housingTransition={housingTransition}\r\n        handleHousingTransitionChange={handleHousingTransitionChange}\r\n        dischargeStatus={dischargeStatus}\r\n        handleDischargeStatusChange={handleDischargeStatusChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default StatusEdit;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\DischargeForm.js",["541","542"],"//The DischargeForm is used to modify discharge info for an instance\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction StatusForm({\r\n  firstName,\r\n  handleFirstNameChange,\r\n  lastName,\r\n  handleLastNameChange,\r\n  instanceId,\r\n  incidentNum,\r\n  handleIncidentNumChange,\r\n  startDate,\r\n  handleStartDateChange,\r\n  gotChecking,\r\n  handleGotCheckingChange,\r\n  gotLicense,\r\n  handleGotLicenseChange,\r\n  gotSavings,\r\n  handleGotSavingsChange,\r\n\r\n  programUtilization,\r\n  handleProgramUtilizationChange,\r\n  dischargeDate,\r\n  handleDischargeDateChange,\r\n  dischargeReason,\r\n  handleDischargeReasonChange,\r\n  housingTransition,\r\n  handleHousingTransitionChange,\r\n  dischargeStatus,\r\n  handleDischargeStatusChange,\r\n  handleSubmit,\r\n  handleCancel,\r\n}) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"first_name\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"first_name\"\r\n              className=\"form-control\"\r\n              id=\"first_name\"\r\n              aria-describedby=\"emailHelp\"\r\n              onChange={handleFirstNameChange}\r\n              value={firstName}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"last_name\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"last_name\"\r\n              className=\"form-control\"\r\n              id=\"last_name\"\r\n              onChange={handleLastNameChange}\r\n              value={lastName}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"incident_num\">Incident Number</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"incident_num\"\r\n              className=\"form-control\"\r\n              id=\"incident_num\"\r\n              onChange={handleIncidentNumChange}\r\n              value={incidentNum}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"start_date\">Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"start_date\"\r\n              className=\"form-control\"\r\n              id=\"start_date\"\r\n              onChange={handleStartDateChange}\r\n              value={startDate}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"got_checking\">Got Checking?</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"got_checking\"\r\n              className=\"form-control\"\r\n              id=\"got_checking\"\r\n              onChange={handleGotCheckingChange}\r\n              value={gotChecking}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"got_license\">Got License?</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"got_license\"\r\n              className=\"form-control\"\r\n              id=\"got_license\"\r\n              onChange={handleGotLicenseChange}\r\n              value={gotLicense}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"got_savings\">Got Savings?</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"got_savings\"\r\n              className=\"form-control\"\r\n              id=\"got_savings\"\r\n              onChange={handleGotSavingsChange}\r\n              value={gotSavings}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"program_utilization\">Program Utilization</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"program_utilization\"\r\n              className=\"form-control\"\r\n              id=\"program_utilization\"\r\n              onChange={handleProgramUtilizationChange}\r\n              value={programUtilization}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"discharge_date\">Discharge Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"discharge_date\"\r\n              className=\"form-control\"\r\n              id=\"discharge_date\"\r\n              onChange={handleDischargeDateChange}\r\n              value={dischargeDate}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"discharge_reason\">Discharge Reason</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"discharge_reason\"\r\n              className=\"form-control\"\r\n              id=\"discharge_reason\"\r\n              onChange={handleDischargeReasonChange}\r\n              value={dischargeReason}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"housing_transition\">Housing Transition</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"housing_transition\"\r\n              className=\"form-control\"\r\n              id=\"housing_transition\"\r\n              onChange={handleHousingTransitionChange}\r\n              value={housingTransition}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"status_at_discharge\">Status at Discharge</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"status_at_discharge\"\r\n              className=\"form-control\"\r\n              id=\"status_at_discharge\"\r\n              onChange={handleDischargeStatusChange}\r\n              value={dischargeStatus}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Save Changes\r\n      </button>{\" \"}\r\n      <Link to={`/instances/${instanceId}/view`}>\r\n        <button type=\"button\" className=\"btn btn-primary\">\r\n          Return to Previous\r\n        </button>\r\n      </Link>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default StatusForm;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\RecEdit.js",["543","544","545","546","547","548","549","550","551"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport {\r\n  readParticipant,\r\n  readInstance,\r\n  createInstance,\r\n  listInstances,\r\n  updateInstance,\r\n} from \"../../utils/api\";\r\nimport RecForm from \"./RecForm\";\r\n\r\nfunction StatusEdit({}) {\r\n  //Create state variables for each instance and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [participantId, setParticipantId] = useState(\"\");\r\n  const handleParticipantIdChange = (event) =>\r\n    setParticipantId(event.target.value);\r\n\r\n  const [incidentNum, setIncidentNum] = useState(null);\r\n  const handleIncidentNumChange = (event) => setIncidentNum(event.target.value);\r\n\r\n  const [startDate, setStartDate] = useState(null);\r\n  const handleStartDateChange = (event) => setStartDate(event.target.value);\r\n\r\n  const [dischargeDate, setDischargeDate] = useState(null);\r\n  const handleDischargeDateChange = (event) =>\r\n    setDischargeDate(event.target.value);\r\n\r\n  const [nextCheckDate, setNextCheckDate] = useState(null);\r\n  const handleNextCheckDateChange = (event) =>\r\n    setNextCheckDate(event.target.value);\r\n\r\n  const [Yr1Fed, setYr1Fed] = useState(\"\");\r\n  const handleYr1FedChange = (event) => setYr1Fed(event.target.value);\r\n\r\n  const [Yr1State, setYr1State] = useState(\"\");\r\n  const handleYr1StateChange = (event) => setYr1State(event.target.value);\r\n\r\n  const [Yr1Note, setYr1Note] = useState(\"\");\r\n  const handleYr1NoteChange = (event) => setYr1Note(event.target.value);\r\n\r\n  const [Yr2Fed, setYr2Fed] = useState(\"\");\r\n  const handleYr2FedChange = (event) => setYr2Fed(event.target.value);\r\n\r\n  const [Yr2State, setYr2State] = useState(\"\");\r\n  const handleYr2StateChange = (event) => setYr2State(event.target.value);\r\n\r\n  const [Yr2Note, setYr2Note] = useState(\"\");\r\n  const handleYr2NoteChange = (event) => setYr2Note(event.target.value);\r\n\r\n  const [Yr3Fed, setYr3Fed] = useState(\"\");\r\n  const handleYr3FedChange = (event) => setYr3Fed(event.target.value);\r\n\r\n  const [Yr3State, setYr3State] = useState(\"\");\r\n  const handleYr3StateChange = (event) => setYr3State(event.target.value);\r\n\r\n  const [Yr3Note, setYr3Note] = useState(\"\");\r\n  const handleYr3NoteChange = (event) => setYr3Note(event.target.value);\r\n\r\n  const [Yr4Fed, setYr4Fed] = useState(\"\");\r\n  const handleYr4FedChange = (event) => setYr4Fed(event.target.value);\r\n\r\n  const [Yr4State, setYr4State] = useState(\"\");\r\n  const handleYr4StateChange = (event) => setYr4State(event.target.value);\r\n\r\n  const [Yr4Note, setYr4Note] = useState(\"\");\r\n  const handleYr4NoteChange = (event) => setYr4Note(event.target.value);\r\n\r\n  const [Yr5Fed, setYr5Fed] = useState(\"\");\r\n  const handleYr5FedChange = (event) => setYr5Fed(event.target.value);\r\n\r\n  const [Yr5State, setYr5State] = useState(\"\");\r\n  const handleYr5StateChange = (event) => setYr5State(event.target.value);\r\n\r\n  const [Yr5Note, setYr5Note] = useState(\"\");\r\n  const handleYr5NoteChange = (event) => setYr5Note(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Create instance of useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Get participantId from url\r\n  const { instanceId } = useParams();\r\n  const instance_id = instanceId;\r\n  console.log(\"instance id\", instance_id);\r\n\r\n  //Load instance\r\n  //Make an API Call to get the participant on the participant_id\r\n  useEffect(() => {\r\n    async function getInstance(instanceId) {\r\n      const response = await readInstance(instanceId);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setIncidentNum(response.incident_num);\r\n      setParticipantId(response.participant_id);\r\n      if (response.start_date)\r\n        setStartDate(response.start_date.substring(0, 10));\r\n      if (response.next_check_date)\r\n        setNextCheckDate(response.next_check_date.substring(0, 10));\r\n      if (response.discharge_date)\r\n        setDischargeDate(response.discharge_date.substring(0, 10));\r\n      setYr1Fed(response[\"1_YR_Fed\"]);\r\n      setYr1State(response[\"1_YR_State\"]);\r\n      setYr1Note(response[\"1_YR_Note\"]);\r\n      setYr2Fed(response[\"2_YR_Fed\"]);\r\n      setYr2State(response[\"2_YR_State\"]);\r\n      setYr2Note(response[\"2_YR_Note\"]);\r\n      setYr3Fed(response[\"3_YR_Fed\"]);\r\n      setYr3State(response[\"3_YR_State\"]);\r\n      setYr3Note(response[\"3_YR_Note\"]);\r\n      setYr4Fed(response[\"4_YR_Fed\"]);\r\n      setYr4State(response[\"4_YR_State\"]);\r\n      setYr4Note(response[\"4_YR_Note\"]);\r\n      setYr5Fed(response[\"5_YR_Fed\"]);\r\n      setYr5State(response[\"5_YR_State\"]);\r\n      setYr5Note(response[\"5_YR_Note\"]);\r\n    }\r\n    getInstance(instanceId);\r\n  }, [instanceId]);\r\n\r\n  //Create the handleSubmit function to update the instance\r\n  //This function creates an instance based on the edited\r\n  //recidivism data and then submits it\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let participant = {\r\n      data: {},\r\n    };\r\n\r\n    participant.data.instance_id = Number(instanceId);\r\n    participant.data.participant_id = Number(participantId);\r\n    participant.data.next_check_date = nextCheckDate;\r\n    participant.data.discharge_date = dischargeDate;\r\n    participant.data[\"1_YR_Fed\"] = Yr1Fed;\r\n    participant.data[\"1_YR_State\"] = Yr1State;\r\n    participant.data[\"1_YR_Note\"] = Yr1Note;\r\n    participant.data[\"2_YR_Fed\"] = Yr2Fed;\r\n    participant.data[\"2_YR_State\"] = Yr2State;\r\n    participant.data[\"2_YR_Note\"] = Yr2Note;\r\n    participant.data[\"3_YR_Fed\"] = Yr3Fed;\r\n    participant.data[\"3_YR_State\"] = Yr3State;\r\n    participant.data[\"3_YR_Note\"] = Yr3Note;\r\n    participant.data[\"4_YR_Fed\"] = Yr4Fed;\r\n    participant.data[\"4_YR_State\"] = Yr4State;\r\n    participant.data[\"4_YR_Note\"] = Yr4Note;\r\n    participant.data[\"5_YR_Fed\"] = Yr5Fed;\r\n    participant.data[\"5_YR_State\"] = Yr5State;\r\n    participant.data[\"5_YR_Note\"] = Yr5Note;\r\n\r\n    //Log participant\r\n    console.log(\"participant\", participant);\r\n\r\n    //Make api call to update instnace\r\n    async function editInstance(participant) {\r\n      try {\r\n        const response = await updateInstance(participant);\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await editInstance(participant);\r\n\r\n    alert(\"Instance Updated Successfully\");\r\n    //Go back to dashboard page\r\n    // history.push(`/participants/dashboard`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard`);\r\n  };\r\n\r\n  //Return the form to enter the reservation details\r\n  return (\r\n    <main>\r\n      <h1>Edit Recidivism Information</h1>\r\n      <RecForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        incidentNum={incidentNum}\r\n        handleIncidentNumChange={handleIncidentNumChange}\r\n        startDate={startDate}\r\n        handleStartDateChange={handleStartDateChange}\r\n        dischargeDate={dischargeDate}\r\n        instanceId={instanceId}\r\n        nextCheckDate={nextCheckDate}\r\n        handleNextCheckDateChange={handleNextCheckDateChange}\r\n        Yr1Fed={Yr1Fed}\r\n        handleYr1FedChange={handleYr1FedChange}\r\n        Yr1State={Yr1State}\r\n        handleYr1StateChange={handleYr1StateChange}\r\n        Yr1Note={Yr1Note}\r\n        handleYr1NoteChange={handleYr1NoteChange}\r\n        Yr2Fed={Yr2Fed}\r\n        handleYr2FedChange={handleYr2FedChange}\r\n        Yr2State={Yr2State}\r\n        handleYr2StateChange={handleYr2StateChange}\r\n        Yr2Note={Yr2Note}\r\n        handleYr2NoteChange={handleYr2NoteChange}\r\n        Yr3Fed={Yr3Fed}\r\n        handleYr3FedChange={handleYr3FedChange}\r\n        Yr3State={Yr3State}\r\n        handleYr3StateChange={handleYr3StateChange}\r\n        Yr3Note={Yr3Note}\r\n        handleYr3NoteChange={handleYr3NoteChange}\r\n        Yr4Fed={Yr4Fed}\r\n        handleYr4FedChange={handleYr4FedChange}\r\n        Yr4State={Yr4State}\r\n        handleYr4StateChange={handleYr4StateChange}\r\n        Yr4Note={Yr4Note}\r\n        handleYr4NoteChange={handleYr4NoteChange}\r\n        Yr5Fed={Yr5Fed}\r\n        handleYr5FedChange={handleYr5FedChange}\r\n        Yr5State={Yr5State}\r\n        handleYr5StateChange={handleYr5StateChange}\r\n        Yr5Note={Yr5Note}\r\n        handleYr5NoteChange={handleYr5NoteChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default StatusEdit;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\RecForm.js",["552","553"],"//This component is used to create a form where the\r\n//recidivism info for an instance can be edited\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction StatusForm({\r\n  firstName,\r\n  handleFirstNameChange,\r\n  lastName,\r\n  handleLastNameChange,\r\n  instanceId,\r\n  incidentNum,\r\n  handleIncidentNumChange,\r\n  startDate,\r\n  handleStartDateChange,\r\n  nextCheckDate,\r\n  handleNextCheckDateChange,\r\n  dischargeDate,\r\n\r\n  Yr1Fed,\r\n  handleYr1FedChange,\r\n  Yr1State,\r\n  handleYr1StateChange,\r\n  Yr1Note,\r\n  handleYr1NoteChange,\r\n  Yr2Fed,\r\n  handleYr2FedChange,\r\n  Yr2State,\r\n  handleYr2StateChange,\r\n  Yr2Note,\r\n  handleYr2NoteChange,\r\n  Yr3Fed,\r\n  handleYr3FedChange,\r\n  Yr3State,\r\n  handleYr3StateChange,\r\n  Yr3Note,\r\n  handleYr3NoteChange,\r\n  Yr4Fed,\r\n  handleYr4FedChange,\r\n  Yr4State,\r\n  handleYr4StateChange,\r\n  Yr4Note,\r\n  handleYr4NoteChange,\r\n  Yr5Fed,\r\n  handleYr5FedChange,\r\n  Yr5State,\r\n  handleYr5StateChange,\r\n  Yr5Note,\r\n  handleYr5NoteChange,\r\n  handleSubmit,\r\n  handleCancel,\r\n}) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"first_name\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"first_name\"\r\n              className=\"form-control\"\r\n              id=\"first_name\"\r\n              aria-describedby=\"emailHelp\"\r\n              onChange={handleFirstNameChange}\r\n              value={firstName}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"last_name\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"last_name\"\r\n              className=\"form-control\"\r\n              id=\"last_name\"\r\n              onChange={handleLastNameChange}\r\n              value={lastName}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"incident_num\">Incident Number</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"incident_num\"\r\n              className=\"form-control\"\r\n              id=\"incident_num\"\r\n              onChange={handleIncidentNumChange}\r\n              value={incidentNum}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"start_date\">Discharge Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"start_date\"\r\n              className=\"form-control\"\r\n              id=\"start_date\"\r\n              value={dischargeDate}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"start_date\">Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"start_date\"\r\n              className=\"form-control\"\r\n              id=\"start_date\"\r\n              onChange={handleStartDateChange}\r\n              value={startDate}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"next_check_date\">Next Check Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"next_check_date\"\r\n              className=\"form-control\"\r\n              id=\"next_check_date\"\r\n              onChange={handleNextCheckDateChange}\r\n              value={nextCheckDate}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"1_YR_Fed\">1 Year Fed</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"1_YR_Fed\"\r\n              className=\"form-control\"\r\n              id=\"1_YR_Fed\"\r\n              onChange={handleYr1FedChange}\r\n              value={Yr1Fed}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"1_YR_State\">1 Year State</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"1_YR_State\"\r\n              className=\"form-control\"\r\n              id=\"1_YR_State\"\r\n              onChange={handleYr1StateChange}\r\n              value={Yr1State}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"1_YR_Note\">1 Year Note</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"1_YR_Note\"\r\n              className=\"form-control\"\r\n              id=\"1_YR_Note\"\r\n              onChange={handleYr1NoteChange}\r\n              value={Yr1Note}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"2_YR_Fed\">2 Year Fed</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"2_YR_Fed\"\r\n              className=\"form-control\"\r\n              id=\"2_YR_Fed\"\r\n              onChange={handleYr2FedChange}\r\n              value={Yr2Fed}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"2_YR_State\">2 Year State</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"2_YR_State\"\r\n              className=\"form-control\"\r\n              id=\"2_YR_State\"\r\n              onChange={handleYr2StateChange}\r\n              value={Yr2State}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"2_YR_Note\">2 Year Note</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"2_YR_Note\"\r\n              className=\"form-control\"\r\n              id=\"2_YR_Note\"\r\n              onChange={handleYr2NoteChange}\r\n              value={Yr2Note}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"3_YR_Fed\">3 Year Fed</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"3_YR_Fed\"\r\n              className=\"form-control\"\r\n              id=\"3_YR_Fed\"\r\n              onChange={handleYr3FedChange}\r\n              value={Yr3Fed}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"1_YR_State\">3 Year State</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"3_YR_State\"\r\n              className=\"form-control\"\r\n              id=\"3_YR_State\"\r\n              onChange={handleYr3StateChange}\r\n              value={Yr3State}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"3_YR_Note\">3 Year Note</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"3_YR_Note\"\r\n              className=\"form-control\"\r\n              id=\"3_YR_Note\"\r\n              onChange={handleYr3NoteChange}\r\n              value={Yr3Note}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"4_YR_Fed\">4 Year Fed</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"4_YR_Fed\"\r\n              className=\"form-control\"\r\n              id=\"4_YR_Fed\"\r\n              onChange={handleYr4FedChange}\r\n              value={Yr4Fed}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"4_YR_State\">4 Year State</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"4_YR_State\"\r\n              className=\"form-control\"\r\n              id=\"4_YR_State\"\r\n              onChange={handleYr4StateChange}\r\n              value={Yr4State}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"4_YR_Note\">4 Year Note</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"4_YR_Note\"\r\n              className=\"form-control\"\r\n              id=\"4_YR_Note\"\r\n              onChange={handleYr4NoteChange}\r\n              value={Yr4Note}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"5_YR_Fed\">5 Year Fed</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"5_YR_Fed\"\r\n              className=\"form-control\"\r\n              id=\"5_YR_Fed\"\r\n              onChange={handleYr5FedChange}\r\n              value={Yr5Fed}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"5_YR_State\">5 Year State</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"5_YR_State\"\r\n              className=\"form-control\"\r\n              id=\"5_YR_State\"\r\n              onChange={handleYr5StateChange}\r\n              value={Yr5State}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"5_YR_Note\">5 Year Note</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"5_YR_Note\"\r\n              className=\"form-control\"\r\n              id=\"5_YR_Note\"\r\n              onChange={handleYr5NoteChange}\r\n              value={Yr5Note}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\"></div>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Save Changes\r\n      </button>{\" \"}\r\n      <Link to={`/instances/${instanceId}/view`}>\r\n        <button type=\"button\" className=\"btn btn-primary\">\r\n          Return to Previous\r\n        </button>\r\n      </Link>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default StatusForm;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\View_Edit_Status.js",["554","555","556","557","558","559","560","561","562"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  createStatus,\r\n  readStatus,\r\n  updateInstance,\r\n  updateStatus,\r\n} from \"../../utils/api\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\n\r\nfunction View_Edit_Status() {\r\n  const [statuses, setStatuses] = useState([\r\n    { statusField: \"off_coping_date\", statusDescr: \"Off Coping Date\" },\r\n    { statusField: \"off_coping60_date\", statusDescr: \"Off Coping +60\" },\r\n    {\r\n      statusField: \"on_restrictions_date\",\r\n      statusDescr: \"On Restrictions Date\",\r\n    },\r\n    {\r\n      statusField: \"off_restrictions_date\",\r\n      statusDescr: \"Off Restrictions Date\",\r\n    },\r\n    {\r\n      statusField: \"employment_start_date\",\r\n      statusDescr: \"Employment Start Date\",\r\n    },\r\n    {\r\n      statusField: \"leadership_dev_start_date\",\r\n      statusDescr: \"Leadership Development Start Date\",\r\n    },\r\n    {\r\n      statusField: \"job_search_start_date\",\r\n      statusDescr: \"Job Search Start Date\",\r\n    },\r\n    { statusField: \"iop_start_date\", statusDescr: \"IOP Start Date\" },\r\n    { statusField: \"iop_end_date\", statusDescr: \"IOP End Date\" },\r\n    {\r\n      statusField: \"aftercare_start_date\",\r\n      statusDescr: \"Aftercare Start Date\",\r\n    },\r\n    { statusField: \"aftercare_end_date\", statusDescr: \"Aftercare End Date\" },\r\n    { statusField: \"ged_start_date\", statusDescr: \"GED Start Date\" },\r\n    { statusField: \"ged_end_date\", statusDescr: \"GED End Date\" },\r\n    { statusField: \"cpt_start_date\", statusDescr: \"CPT Start Date\" },\r\n    { statusField: \"cpt_end_date\", statusDescr: \"CPT End Date\" },\r\n    {\r\n      statusField: \"rec_treatment_update\",\r\n      statusDescr: \"Received Treatment Update\",\r\n    },\r\n    { statusField: \"had_counseling\", statusDescr: \"Had Individual Counseling\" },\r\n    { statusField: \"relapse_date\", statusDescr: \"Relapse Date\" },\r\n    { statusField: \"started_mat_date\", statusDescr: \"Started MAT\" },\r\n  ]);\r\n\r\n  //Create state variables for each instance and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => {\r\n    setLastName(event.target.value);\r\n    console.log(statusField);\r\n  };\r\n\r\n  const [incident, setIncident] = useState(null);\r\n  const handleIncidentChange = (event) => setIncident(event.target.value);\r\n\r\n  const [instanceId, setInstanceId] = useState(null);\r\n\r\n  const [statusName, setStatusName] = useState(\"Started MAT\");\r\n  const handleStatusNameChange = (event) => setStatusName(event.target.value);\r\n\r\n  const [statusField, setStatusField] = useState(null);\r\n\r\n  const [statusDate, setStatusDate] = useState(null);\r\n  const handleStatusDateChange = (event) => setStatusDate(event.target.value);\r\n\r\n  const [statusNotes, setStatusNotes] = useState(null);\r\n  const handleStatusNotesChange = (event) => setStatusNotes(event.target.value);\r\n\r\n  const history = useHistory();\r\n\r\n  //State vars for ErrorCaught\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  //Get ParticipantId from url\r\n  const { statusId } = useParams();\r\n\r\n  //Make an API Call to get the instance\r\n  useEffect(() => {\r\n    async function getStatus(statusId) {\r\n      const response = await readStatus(statusId);\r\n      console.log(\"response is here\", response);\r\n\r\n      setInstanceId(response.instance_id);\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setIncident(response.incident_num);\r\n      setStatusDate(response.date.substring(0, 10));\r\n      setStatusName(response.status_name);\r\n      setStatusNotes(response.notes);\r\n    }\r\n    getStatus(statusId);\r\n  }, [statusId]);\r\n\r\n  async function handleSubmit() {\r\n    //Make an api call to update the statuses table in the db\r\n    let status = {\r\n      data: {},\r\n    };\r\n\r\n    status.data.status_id = statusId;\r\n    status.data.first_name = firstName;\r\n    status.data.last_name = lastName;\r\n    status.data.incident_num = incident;\r\n    status.data.status_name = statusName;\r\n    status.data.date = statusDate;\r\n    status.data.notes = statusNotes;\r\n    status.data.instance_id = instanceId;\r\n\r\n    try {\r\n      const response2 = await updateStatus(status);\r\n      if (response2) alert(\"Status Update Added\");\r\n    } catch (err) {\r\n      console.log(\"Error making createTable API call: \", err);\r\n    }\r\n  }\r\n\r\n  //Create table rows from the statuses state array and use to populate the drop-down\r\n  const statusLinks = statuses.map((status) => (\r\n    <option value={status.statusDescr}>{status.statusDescr}</option>\r\n  ));\r\n\r\n  //Return the html with status drop-down\r\n  return (\r\n    <main>\r\n      <h1>View/Edit Status Event</h1>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"first_name\">First Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"first_name\"\r\n          className=\"form-control\"\r\n          id=\"first_name\"\r\n          aria-describedby=\"emailHelp\"\r\n          onChange={handleFirstNameChange}\r\n          value={firstName}\r\n          readOnly\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"last_name\">Last Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"last_name\"\r\n          className=\"form-control\"\r\n          id=\"last_name\"\r\n          onChange={handleLastNameChange}\r\n          value={lastName}\r\n          readOnly\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"last_name\">Incident Number</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"last_name\"\r\n          className=\"form-control\"\r\n          id=\"last_name\"\r\n          onChange={handleIncidentChange}\r\n          value={incident}\r\n          readOnly\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <form onSubmit={handleSubmit}>\r\n          <label for=\"exampleFormControlSelect1\">Select Status</label>\r\n          <select\r\n            class=\"form-control\"\r\n            id=\"statusName\"\r\n            name=\"statusName\"\r\n            onChange={handleStatusNameChange}\r\n            value={statusName}\r\n            disabled=\"true\"\r\n          >\r\n            <option value=\"\">--Select an Option--</option>\r\n            {statusLinks}\r\n          </select>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"status_date\">Date of Status Update</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"status_date\"\r\n              className=\"form-control\"\r\n              id=\"status_date\"\r\n              onChange={handleStatusDateChange}\r\n              value={statusDate}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"status_notes\">Status Notes</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"status_notes\"\r\n              className=\"form-control\"\r\n              id=\"status_notes\"\r\n              onChange={handleStatusNotesChange}\r\n              value={statusNotes}\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Submit Status Update\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            style={{ margin: \"5px\" }}\r\n            onClick={() => {\r\n              history.goBack();\r\n            }}\r\n          >\r\n            Return to Previous\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default View_Edit_Status;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\ViewAllStatuses.js",["563","564","565","566","567","568","569"],"//This component is used to view all of the statuses (regardless of instance)\r\n//for a given participant\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { readParticipant, listStatuses, deleteStatus } from \"../../utils/api\";\r\nimport ParticipantMenu2 from \"../ParticipantMenu2\";\r\n\r\nfunction ViewAllStatuses({}) {\r\n  //The main state variables are statuses to be displayed\r\n  const [statuses, setStatuses] = useState([]);\r\n  const [statusesError, setStatusesError] = useState(null);\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  //Declare an instance of the useHistory hook\r\n  const history = useHistory();\r\n\r\n  //Get instanceId from url\r\n  const { participantId } = useParams();\r\n  const participant_id = participantId;\r\n  console.log(\"participant id\", participant_id);\r\n\r\n  //Use useEffect to load the statuses and the instances\r\n  //Load statuses\r\n  useEffect(loadStatuses, []);\r\n\r\n  function loadStatuses() {\r\n    const abortController = new AbortController();\r\n    setStatusesError(null);\r\n\r\n    listStatuses({ participant_id }, abortController.signal)\r\n      .then(setStatuses)\r\n      .catch(setStatusesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  //Load Participant\r\n  //Make an API Call to get the instance on the instance_id\r\n  useEffect(() => {\r\n    async function getParticipant(participantId) {\r\n      const response = await readParticipant(participantId);\r\n\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n    }\r\n    getParticipant(participantId);\r\n  }, [participantId]);\r\n\r\n  async function handleDelete(status_id) {\r\n    console.log(\"here is the status id\", status_id);\r\n\r\n    try {\r\n      await deleteStatus(status_id);\r\n    } catch (err) {\r\n      console.log(\"Error making API call: \", err);\r\n    }\r\n\r\n    history.go(0);\r\n  }\r\n\r\n  //Create table rows of statuses using the 'statuses' state array\r\n  const statusLinks = statuses.map((status) => {\r\n    let dateString = status.date ? status.date.substring(0, 10) : null;\r\n\r\n    return (\r\n      <tr key={status.status_id}>\r\n        <td style={{ padding: \"10px\" }}>{status.status_name}</td>\r\n        <td style={{ padding: \"10px\" }}>{dateString}</td>\r\n        <td style={{ padding: \"10px\" }}>{status.notes}</td>\r\n        <Link to={`/statuses/${status.status_id}/edit`}>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            style={{ margin: \"5px\" }}\r\n          >\r\n            View/Edit Status\r\n          </button>\r\n        </Link>{\" \"}\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-primary\"\r\n          style={{ margin: \"5px\" }}\r\n          onClick={() => {\r\n            handleDelete(status.status_id);\r\n          }}\r\n        >\r\n          Delete Status\r\n        </button>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  //Return the html code to display all of the statuses[l]\r\n  return (\r\n    <main>\r\n      <h1>\r\n        <center>View All Participant Statuses</center>\r\n      </h1>\r\n      <center>\r\n        <table\r\n          class=\"table table-sm\"\r\n          style={{ width: \"70%\", fontSize: \"25px\" }}\r\n        >\r\n          <tr style={{ padding: \"5px\" }}>\r\n            <td>\r\n              <strong>First Name: </strong>\r\n              {firstName}{\" \"}\r\n            </td>\r\n            <td>\r\n              <strong>Last Name: </strong> {lastName}\r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </center>\r\n      <br />\r\n\r\n      <div class=\"container\">\r\n        <div class=\"row\">\r\n          <div class=\"col\">\r\n            <ParticipantMenu2 participantId={participantId} />\r\n          </div>\r\n          <div class=\"col-9\">\r\n            <h1>Status Updates</h1>\r\n            <table class=\"table table-sm\">\r\n              <tr>\r\n                <th>Status Name</th> <th>Date</th> <th>Notes</th>{\" \"}\r\n              </tr>\r\n              {statusLinks}\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <br />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default ViewAllStatuses;\r\n","C:\\Users\\Todd\\Desktop\\TWhite 2020 Desktop\\Active Projects\\SJ\\TRY_DB\\front-end\\src\\reservations\\ParticipantMenuComponents\\View_Edit_Participant.js",["570","571","572","573","574"],"//This component is used to view and edit the info for a\r\n//specific participant (name, dob)\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readParticipant, updateParticipant } from \"../../utils/api\";\r\nimport ParticipantNewForm from \"../ParticipantNewForm\";\r\n\r\nimport ErrorAlert from \"../../layout/ErrorAlert\";\r\n\r\nfunction View_Edit_Participant() {\r\n  //Create state variables for each participant and add event listeners\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const handleFirstNameChange = (event) => setFirstName(event.target.value);\r\n\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const handleLastNameChange = (event) => setLastName(event.target.value);\r\n\r\n  const [dob, setDob] = useState(null);\r\n  const handleDobChange = (event) => setDob(event.target.value);\r\n\r\n  //State vars for error message\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [visibility3, setVisibility3] = useState(null);\r\n\r\n  //Create instance of useHistory hook\r\n\r\n  const history = useHistory();\r\n\r\n  //Get participantId from url\r\n  const { participantId } = useParams();\r\n  console.log(\"participantId\", participantId);\r\n\r\n  //Load Participant\r\n  //Make an API Call to get the participant on the participant_id\r\n  useEffect(() => {\r\n    async function getParticipant(participantId) {\r\n      const response = await readParticipant(participantId);\r\n      console.log(\"participantRetrieved\", response);\r\n      setFirstName(response.first_name);\r\n      setLastName(response.last_name);\r\n      setDob(response.dob.substring(0, 10));\r\n    }\r\n    getParticipant(participantId);\r\n  }, [participantId]);\r\n\r\n  //Create the handleSubmit function to update the deck\r\n  //This function updates a participant based on the input\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let participant = {\r\n      data: {},\r\n    };\r\n\r\n    participant.data.participant_id = participantId;\r\n    participant.data.first_name = firstName;\r\n    participant.data.last_name = lastName;\r\n    participant.data.dob = dob;\r\n\r\n    console.log(\"participantToSend\", participant);\r\n\r\n    //Make api call to update participant\r\n    async function editParticipant(participant) {\r\n      try {\r\n        const response = await updateParticipant(participant);\r\n      } catch (err) {\r\n        console.log(\"Error making updateReservation API call: \", err);\r\n        setErrMessage(err);\r\n      }\r\n    }\r\n    await editParticipant(participant);\r\n\r\n    alert(\"Participant Enrolled Successfully\");\r\n    //Go back to dashboard page\r\n    //history.push(`/participants/${participantId}/enrollNew`);\r\n  }\r\n\r\n  //Create the handleCancel function to return the user to the previous page\r\n  const handleCancel = (event) => {\r\n    history.push(`/dashboard`);\r\n  };\r\n\r\n  //Show the participant form\r\n  return (\r\n    <main>\r\n      <h1>View/Edit Participant Info</h1>\r\n      <ParticipantNewForm\r\n        firstName={firstName}\r\n        handleFirstNameChange={handleFirstNameChange}\r\n        lastName={lastName}\r\n        handleLastNameChange={handleLastNameChange}\r\n        dob={dob}\r\n        handleDobChange={handleDobChange}\r\n        handleSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default View_Edit_Participant;\r\n",{"ruleId":"575","replacedBy":"576"},{"ruleId":"577","replacedBy":"578"},{"ruleId":"579","severity":1,"message":"580","line":17,"column":8,"nodeType":"581","messageId":"582","endLine":17,"endColumn":18},{"ruleId":"579","severity":1,"message":"583","line":28,"column":10,"nodeType":"581","messageId":"582","endLine":28,"endColumn":27},{"ruleId":"579","severity":1,"message":"584","line":30,"column":10,"nodeType":"581","messageId":"582","endLine":30,"endColumn":21},{"ruleId":"579","severity":1,"message":"585","line":34,"column":9,"nodeType":"581","messageId":"582","endLine":34,"endColumn":16},{"ruleId":"586","severity":1,"message":"587","line":38,"column":3,"nodeType":"588","messageId":"589","endLine":42,"endColumn":4},{"ruleId":"579","severity":1,"message":"590","line":122,"column":15,"nodeType":"581","messageId":"582","endLine":122,"endColumn":23},{"ruleId":"579","severity":1,"message":"590","line":166,"column":15,"nodeType":"581","messageId":"582","endLine":166,"endColumn":23},{"ruleId":"579","severity":1,"message":"580","line":3,"column":8,"nodeType":"581","messageId":"582","endLine":3,"endColumn":18},{"ruleId":"579","severity":1,"message":"583","line":13,"column":10,"nodeType":"581","messageId":"582","endLine":13,"endColumn":27},{"ruleId":"579","severity":1,"message":"580","line":11,"column":8,"nodeType":"581","messageId":"582","endLine":11,"endColumn":18},{"ruleId":"579","severity":1,"message":"584","line":25,"column":10,"nodeType":"581","messageId":"582","endLine":25,"endColumn":21},{"ruleId":"591","severity":1,"message":"592","line":63,"column":25,"nodeType":"593","endLine":63,"endColumn":31,"suggestions":"594"},{"ruleId":"579","severity":1,"message":"590","line":118,"column":15,"nodeType":"581","messageId":"582","endLine":118,"endColumn":23},{"ruleId":"579","severity":1,"message":"580","line":5,"column":8,"nodeType":"581","messageId":"582","endLine":5,"endColumn":18},{"ruleId":"579","severity":1,"message":"580","line":4,"column":8,"nodeType":"581","messageId":"582","endLine":4,"endColumn":18},{"ruleId":"579","severity":1,"message":"590","line":80,"column":17,"nodeType":"581","messageId":"582","endLine":80,"endColumn":25},{"ruleId":"579","severity":1,"message":"580","line":6,"column":8,"nodeType":"581","messageId":"582","endLine":6,"endColumn":18},{"ruleId":"579","severity":1,"message":"580","line":4,"column":8,"nodeType":"581","messageId":"582","endLine":4,"endColumn":18},{"ruleId":"579","severity":1,"message":"583","line":18,"column":10,"nodeType":"581","messageId":"582","endLine":18,"endColumn":27},{"ruleId":"579","severity":1,"message":"595","line":43,"column":9,"nodeType":"581","messageId":"582","endLine":43,"endColumn":21},{"ruleId":"579","severity":1,"message":"596","line":5,"column":17,"nodeType":"581","messageId":"582","endLine":5,"endColumn":26},{"ruleId":"579","severity":1,"message":"597","line":5,"column":28,"nodeType":"581","messageId":"582","endLine":5,"endColumn":36},{"ruleId":"579","severity":1,"message":"596","line":5,"column":17,"nodeType":"581","messageId":"582","endLine":5,"endColumn":26},{"ruleId":"579","severity":1,"message":"597","line":5,"column":28,"nodeType":"581","messageId":"582","endLine":5,"endColumn":36},{"ruleId":"575","replacedBy":"598"},{"ruleId":"577","replacedBy":"599"},{"ruleId":"579","severity":1,"message":"600","line":3,"column":10,"nodeType":"581","messageId":"582","endLine":3,"endColumn":18},{"ruleId":"579","severity":1,"message":"601","line":3,"column":35,"nodeType":"581","messageId":"582","endLine":3,"endColumn":46},{"ruleId":"579","severity":1,"message":"602","line":31,"column":10,"nodeType":"581","messageId":"582","endLine":31,"endColumn":15},{"ruleId":"603","severity":1,"message":"604","line":120,"column":9,"nodeType":"605","messageId":"606","endLine":120,"endColumn":29},{"ruleId":"603","severity":1,"message":"607","line":123,"column":9,"nodeType":"605","messageId":"606","endLine":123,"endColumn":34},{"ruleId":"579","severity":1,"message":"608","line":3,"column":10,"nodeType":"581","messageId":"582","endLine":3,"endColumn":27},{"ruleId":"579","severity":1,"message":"580","line":4,"column":8,"nodeType":"581","messageId":"582","endLine":4,"endColumn":18},{"ruleId":"579","severity":1,"message":"609","line":17,"column":9,"nodeType":"581","messageId":"582","endLine":17,"endColumn":30},{"ruleId":"579","severity":1,"message":"610","line":20,"column":9,"nodeType":"581","messageId":"582","endLine":20,"endColumn":29},{"ruleId":"579","severity":1,"message":"611","line":23,"column":9,"nodeType":"581","messageId":"582","endLine":23,"endColumn":33},{"ruleId":"579","severity":1,"message":"612","line":38,"column":9,"nodeType":"581","messageId":"582","endLine":38,"endColumn":21},{"ruleId":"579","severity":1,"message":"590","line":59,"column":17,"nodeType":"581","messageId":"582","endLine":59,"endColumn":25},{"ruleId":"579","severity":1,"message":"595","line":86,"column":9,"nodeType":"581","messageId":"582","endLine":86,"endColumn":21},{"ruleId":"575","replacedBy":"613"},{"ruleId":"577","replacedBy":"614"},{"ruleId":"579","severity":1,"message":"615","line":2,"column":38,"nodeType":"581","messageId":"582","endLine":2,"endColumn":52},{"ruleId":"579","severity":1,"message":"616","line":3,"column":27,"nodeType":"581","messageId":"582","endLine":3,"endColumn":37},{"ruleId":"579","severity":1,"message":"617","line":12,"column":20,"nodeType":"581","messageId":"582","endLine":12,"endColumn":31},{"ruleId":"579","severity":1,"message":"618","line":74,"column":23,"nodeType":"581","messageId":"582","endLine":74,"endColumn":37},{"ruleId":"579","severity":1,"message":"619","line":83,"column":10,"nodeType":"581","messageId":"582","endLine":83,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":83,"column":23,"nodeType":"581","messageId":"582","endLine":83,"endColumn":37},{"ruleId":"579","severity":1,"message":"621","line":84,"column":10,"nodeType":"581","messageId":"582","endLine":84,"endColumn":20},{"ruleId":"579","severity":1,"message":"622","line":84,"column":22,"nodeType":"581","messageId":"582","endLine":84,"endColumn":35},{"ruleId":"579","severity":1,"message":"623","line":18,"column":10,"nodeType":"581","messageId":"582","endLine":18,"endColumn":24},{"ruleId":"579","severity":1,"message":"620","line":19,"column":23,"nodeType":"581","messageId":"582","endLine":19,"endColumn":37},{"ruleId":"579","severity":1,"message":"622","line":20,"column":22,"nodeType":"581","messageId":"582","endLine":20,"endColumn":35},{"ruleId":"579","severity":1,"message":"585","line":22,"column":9,"nodeType":"581","messageId":"582","endLine":22,"endColumn":16},{"ruleId":"579","severity":1,"message":"624","line":2,"column":10,"nodeType":"581","messageId":"582","endLine":2,"endColumn":22},{"ruleId":"579","severity":1,"message":"625","line":25,"column":9,"nodeType":"581","messageId":"582","endLine":25,"endColumn":33},{"ruleId":"579","severity":1,"message":"626","line":27,"column":10,"nodeType":"581","messageId":"582","endLine":27,"endColumn":20},{"ruleId":"579","severity":1,"message":"627","line":28,"column":9,"nodeType":"581","messageId":"582","endLine":28,"endColumn":31},{"ruleId":"579","severity":1,"message":"619","line":61,"column":10,"nodeType":"581","messageId":"582","endLine":61,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":61,"column":23,"nodeType":"581","messageId":"582","endLine":61,"endColumn":37},{"ruleId":"579","severity":1,"message":"621","line":62,"column":10,"nodeType":"581","messageId":"582","endLine":62,"endColumn":20},{"ruleId":"579","severity":1,"message":"622","line":62,"column":22,"nodeType":"581","messageId":"582","endLine":62,"endColumn":35},{"ruleId":"591","severity":1,"message":"628","line":97,"column":6,"nodeType":"593","endLine":97,"endColumn":8,"suggestions":"629"},{"ruleId":"630","severity":1,"message":"631","line":8,"column":23,"nodeType":"632","messageId":"589","endLine":8,"endColumn":25},{"ruleId":"579","severity":1,"message":"633","line":11,"column":8,"nodeType":"581","messageId":"582","endLine":11,"endColumn":25},{"ruleId":"579","severity":1,"message":"634","line":11,"column":27,"nodeType":"581","messageId":"582","endLine":11,"endColumn":47},{"ruleId":"579","severity":1,"message":"623","line":12,"column":10,"nodeType":"581","messageId":"582","endLine":12,"endColumn":24},{"ruleId":"579","severity":1,"message":"619","line":13,"column":10,"nodeType":"581","messageId":"582","endLine":13,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":13,"column":23,"nodeType":"581","messageId":"582","endLine":13,"endColumn":37},{"ruleId":"579","severity":1,"message":"621","line":14,"column":10,"nodeType":"581","messageId":"582","endLine":14,"endColumn":20},{"ruleId":"579","severity":1,"message":"622","line":14,"column":22,"nodeType":"581","messageId":"582","endLine":14,"endColumn":35},{"ruleId":"579","severity":1,"message":"585","line":19,"column":9,"nodeType":"581","messageId":"582","endLine":19,"endColumn":16},{"ruleId":"579","severity":1,"message":"635","line":8,"column":3,"nodeType":"581","messageId":"582","endLine":8,"endColumn":15},{"ruleId":"579","severity":1,"message":"636","line":9,"column":3,"nodeType":"581","messageId":"582","endLine":9,"endColumn":15},{"ruleId":"579","severity":1,"message":"623","line":25,"column":10,"nodeType":"581","messageId":"582","endLine":25,"endColumn":24},{"ruleId":"579","severity":1,"message":"637","line":29,"column":10,"nodeType":"581","messageId":"582","endLine":29,"endColumn":19},{"ruleId":"579","severity":1,"message":"638","line":29,"column":21,"nodeType":"581","messageId":"582","endLine":29,"endColumn":33},{"ruleId":"579","severity":1,"message":"619","line":30,"column":10,"nodeType":"581","messageId":"582","endLine":30,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":30,"column":23,"nodeType":"581","messageId":"582","endLine":30,"endColumn":37},{"ruleId":"579","severity":1,"message":"621","line":31,"column":10,"nodeType":"581","messageId":"582","endLine":31,"endColumn":20},{"ruleId":"579","severity":1,"message":"622","line":31,"column":22,"nodeType":"581","messageId":"582","endLine":31,"endColumn":35},{"ruleId":"591","severity":1,"message":"639","line":42,"column":28,"nodeType":"593","endLine":42,"endColumn":30,"suggestions":"640"},{"ruleId":"641","severity":1,"message":"642","line":73,"column":9,"nodeType":"643","messageId":"589","endLine":73,"endColumn":11},{"ruleId":"579","severity":1,"message":"596","line":11,"column":17,"nodeType":"581","messageId":"582","endLine":11,"endColumn":26},{"ruleId":"579","severity":1,"message":"597","line":11,"column":28,"nodeType":"581","messageId":"582","endLine":11,"endColumn":36},{"ruleId":"579","severity":1,"message":"644","line":3,"column":10,"nodeType":"581","messageId":"582","endLine":3,"endColumn":23},{"ruleId":"579","severity":1,"message":"580","line":4,"column":8,"nodeType":"581","messageId":"582","endLine":4,"endColumn":18},{"ruleId":"579","severity":1,"message":"645","line":5,"column":10,"nodeType":"581","messageId":"582","endLine":5,"endColumn":19},{"ruleId":"579","severity":1,"message":"616","line":5,"column":27,"nodeType":"581","messageId":"582","endLine":5,"endColumn":37},{"ruleId":"579","severity":1,"message":"623","line":19,"column":10,"nodeType":"581","messageId":"582","endLine":19,"endColumn":24},{"ruleId":"579","severity":1,"message":"646","line":21,"column":10,"nodeType":"581","messageId":"582","endLine":21,"endColumn":27},{"ruleId":"591","severity":1,"message":"647","line":45,"column":31,"nodeType":"593","endLine":45,"endColumn":33,"suggestions":"648"},{"ruleId":"579","severity":1,"message":"595","line":88,"column":9,"nodeType":"581","messageId":"582","endLine":88,"endColumn":21},{"ruleId":"579","severity":1,"message":"645","line":5,"column":10,"nodeType":"581","messageId":"582","endLine":5,"endColumn":19},{"ruleId":"641","severity":1,"message":"642","line":21,"column":9,"nodeType":"643","messageId":"589","endLine":21,"endColumn":11},{"ruleId":"579","severity":1,"message":"596","line":1,"column":17,"nodeType":"581","messageId":"582","endLine":1,"endColumn":26},{"ruleId":"579","severity":1,"message":"645","line":2,"column":10,"nodeType":"581","messageId":"582","endLine":2,"endColumn":19},{"ruleId":"579","severity":1,"message":"649","line":3,"column":10,"nodeType":"581","messageId":"582","endLine":3,"endColumn":25},{"ruleId":"579","severity":1,"message":"580","line":6,"column":8,"nodeType":"581","messageId":"582","endLine":6,"endColumn":18},{"ruleId":"579","severity":1,"message":"621","line":26,"column":10,"nodeType":"581","messageId":"582","endLine":26,"endColumn":20},{"ruleId":"579","severity":1,"message":"619","line":27,"column":10,"nodeType":"581","messageId":"582","endLine":27,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":27,"column":23,"nodeType":"581","messageId":"582","endLine":27,"endColumn":37},{"ruleId":"579","severity":1,"message":"596","line":5,"column":17,"nodeType":"581","messageId":"582","endLine":5,"endColumn":26},{"ruleId":"579","severity":1,"message":"597","line":5,"column":28,"nodeType":"581","messageId":"582","endLine":5,"endColumn":36},{"ruleId":"579","severity":1,"message":"650","line":6,"column":10,"nodeType":"581","messageId":"582","endLine":6,"endColumn":14},{"ruleId":"579","severity":1,"message":"596","line":5,"column":17,"nodeType":"581","messageId":"582","endLine":5,"endColumn":26},{"ruleId":"579","severity":1,"message":"597","line":5,"column":28,"nodeType":"581","messageId":"582","endLine":5,"endColumn":36},{"ruleId":"579","severity":1,"message":"650","line":6,"column":10,"nodeType":"581","messageId":"582","endLine":6,"endColumn":14},{"ruleId":"579","severity":1,"message":"616","line":5,"column":16,"nodeType":"581","messageId":"582","endLine":5,"endColumn":26},{"ruleId":"579","severity":1,"message":"616","line":2,"column":21,"nodeType":"581","messageId":"582","endLine":2,"endColumn":31},{"ruleId":"579","severity":1,"message":"580","line":6,"column":8,"nodeType":"581","messageId":"582","endLine":6,"endColumn":18},{"ruleId":"579","severity":1,"message":"651","line":23,"column":9,"nodeType":"581","messageId":"582","endLine":23,"endColumn":34},{"ruleId":"579","severity":1,"message":"621","line":87,"column":10,"nodeType":"581","messageId":"582","endLine":87,"endColumn":20},{"ruleId":"579","severity":1,"message":"619","line":88,"column":10,"nodeType":"581","messageId":"582","endLine":88,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":88,"column":23,"nodeType":"581","messageId":"582","endLine":88,"endColumn":37},{"ruleId":"579","severity":1,"message":"580","line":5,"column":8,"nodeType":"581","messageId":"582","endLine":5,"endColumn":18},{"ruleId":"579","severity":1,"message":"646","line":19,"column":10,"nodeType":"581","messageId":"582","endLine":19,"endColumn":27},{"ruleId":"579","severity":1,"message":"595","line":47,"column":9,"nodeType":"581","messageId":"582","endLine":47,"endColumn":21},{"ruleId":"579","severity":1,"message":"580","line":6,"column":8,"nodeType":"581","messageId":"582","endLine":6,"endColumn":18},{"ruleId":"579","severity":1,"message":"621","line":83,"column":10,"nodeType":"581","messageId":"582","endLine":83,"endColumn":20},{"ruleId":"579","severity":1,"message":"619","line":84,"column":10,"nodeType":"581","messageId":"582","endLine":84,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":84,"column":23,"nodeType":"581","messageId":"582","endLine":84,"endColumn":37},{"ruleId":"579","severity":1,"message":"623","line":16,"column":10,"nodeType":"581","messageId":"582","endLine":16,"endColumn":24},{"ruleId":"579","severity":1,"message":"619","line":17,"column":10,"nodeType":"581","messageId":"582","endLine":17,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":17,"column":23,"nodeType":"581","messageId":"582","endLine":17,"endColumn":37},{"ruleId":"579","severity":1,"message":"621","line":18,"column":10,"nodeType":"581","messageId":"582","endLine":18,"endColumn":20},{"ruleId":"579","severity":1,"message":"622","line":18,"column":22,"nodeType":"581","messageId":"582","endLine":18,"endColumn":35},{"ruleId":"579","severity":1,"message":"652","line":19,"column":15,"nodeType":"581","messageId":"582","endLine":19,"endColumn":21},{"ruleId":"579","severity":1,"message":"653","line":20,"column":17,"nodeType":"581","messageId":"582","endLine":20,"endColumn":25},{"ruleId":"579","severity":1,"message":"654","line":21,"column":16,"nodeType":"581","messageId":"582","endLine":21,"endColumn":23},{"ruleId":"579","severity":1,"message":"585","line":24,"column":9,"nodeType":"581","messageId":"582","endLine":24,"endColumn":16},{"ruleId":"591","severity":1,"message":"639","line":32,"column":28,"nodeType":"593","endLine":32,"endColumn":46,"suggestions":"655"},{"ruleId":"579","severity":1,"message":"649","line":6,"column":3,"nodeType":"581","messageId":"582","endLine":6,"endColumn":18},{"ruleId":"579","severity":1,"message":"656","line":7,"column":3,"nodeType":"581","messageId":"582","endLine":7,"endColumn":17},{"ruleId":"579","severity":1,"message":"580","line":11,"column":8,"nodeType":"581","messageId":"582","endLine":11,"endColumn":18},{"ruleId":"579","severity":1,"message":"621","line":62,"column":10,"nodeType":"581","messageId":"582","endLine":62,"endColumn":20},{"ruleId":"579","severity":1,"message":"619","line":63,"column":10,"nodeType":"581","messageId":"582","endLine":63,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":63,"column":23,"nodeType":"581","messageId":"582","endLine":63,"endColumn":37},{"ruleId":"579","severity":1,"message":"596","line":5,"column":17,"nodeType":"581","messageId":"582","endLine":5,"endColumn":26},{"ruleId":"579","severity":1,"message":"597","line":5,"column":28,"nodeType":"581","messageId":"582","endLine":5,"endColumn":36},{"ruleId":"579","severity":1,"message":"657","line":2,"column":8,"nodeType":"581","messageId":"582","endLine":2,"endColumn":21},{"ruleId":"579","severity":1,"message":"580","line":4,"column":8,"nodeType":"581","messageId":"582","endLine":4,"endColumn":18},{"ruleId":"579","severity":1,"message":"646","line":16,"column":10,"nodeType":"581","messageId":"582","endLine":16,"endColumn":27},{"ruleId":"579","severity":1,"message":"658","line":20,"column":10,"nodeType":"581","messageId":"582","endLine":20,"endColumn":26},{"ruleId":"579","severity":1,"message":"659","line":20,"column":28,"nodeType":"581","messageId":"582","endLine":20,"endColumn":47},{"ruleId":"579","severity":1,"message":"623","line":22,"column":10,"nodeType":"581","messageId":"582","endLine":22,"endColumn":24},{"ruleId":"579","severity":1,"message":"660","line":23,"column":10,"nodeType":"581","messageId":"582","endLine":23,"endColumn":18},{"ruleId":"579","severity":1,"message":"661","line":25,"column":10,"nodeType":"581","messageId":"582","endLine":25,"endColumn":23},{"ruleId":"579","severity":1,"message":"662","line":26,"column":10,"nodeType":"581","messageId":"582","endLine":26,"endColumn":16},{"ruleId":"579","severity":1,"message":"663","line":26,"column":18,"nodeType":"581","messageId":"582","endLine":26,"endColumn":27},{"ruleId":"579","severity":1,"message":"664","line":28,"column":9,"nodeType":"581","messageId":"582","endLine":28,"endColumn":29},{"ruleId":"579","severity":1,"message":"595","line":138,"column":9,"nodeType":"581","messageId":"582","endLine":138,"endColumn":21},{"ruleId":"579","severity":1,"message":"596","line":1,"column":17,"nodeType":"581","messageId":"582","endLine":1,"endColumn":26},{"ruleId":"579","severity":1,"message":"624","line":3,"column":3,"nodeType":"581","messageId":"582","endLine":3,"endColumn":15},{"ruleId":"579","severity":1,"message":"635","line":4,"column":3,"nodeType":"581","messageId":"582","endLine":4,"endColumn":15},{"ruleId":"579","severity":1,"message":"615","line":5,"column":3,"nodeType":"581","messageId":"582","endLine":5,"endColumn":17},{"ruleId":"579","severity":1,"message":"645","line":8,"column":10,"nodeType":"581","messageId":"582","endLine":8,"endColumn":19},{"ruleId":"579","severity":1,"message":"650","line":8,"column":21,"nodeType":"581","messageId":"582","endLine":8,"endColumn":25},{"ruleId":"579","severity":1,"message":"616","line":8,"column":27,"nodeType":"581","messageId":"582","endLine":8,"endColumn":37},{"ruleId":"579","severity":1,"message":"665","line":18,"column":21,"nodeType":"581","messageId":"582","endLine":18,"endColumn":33},{"ruleId":"579","severity":1,"message":"621","line":20,"column":10,"nodeType":"581","messageId":"582","endLine":20,"endColumn":20},{"ruleId":"579","severity":1,"message":"661","line":19,"column":10,"nodeType":"581","messageId":"582","endLine":19,"endColumn":23},{"ruleId":"579","severity":1,"message":"619","line":25,"column":10,"nodeType":"581","messageId":"582","endLine":25,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":25,"column":23,"nodeType":"581","messageId":"582","endLine":25,"endColumn":37},{"ruleId":"579","severity":1,"message":"621","line":26,"column":10,"nodeType":"581","messageId":"582","endLine":26,"endColumn":20},{"ruleId":"579","severity":1,"message":"622","line":26,"column":22,"nodeType":"581","messageId":"582","endLine":26,"endColumn":35},{"ruleId":"591","severity":1,"message":"666","line":37,"column":27,"nodeType":"593","endLine":37,"endColumn":33,"suggestions":"667"},{"ruleId":"641","severity":1,"message":"642","line":70,"column":68,"nodeType":"643","messageId":"589","endLine":70,"endColumn":70},{"ruleId":"579","severity":1,"message":"596","line":11,"column":17,"nodeType":"581","messageId":"582","endLine":11,"endColumn":26},{"ruleId":"579","severity":1,"message":"597","line":11,"column":28,"nodeType":"581","messageId":"582","endLine":11,"endColumn":36},{"ruleId":"579","severity":1,"message":"585","line":15,"column":9,"nodeType":"581","messageId":"582","endLine":15,"endColumn":16},{"ruleId":"579","severity":1,"message":"649","line":6,"column":3,"nodeType":"581","messageId":"582","endLine":6,"endColumn":18},{"ruleId":"579","severity":1,"message":"656","line":8,"column":3,"nodeType":"581","messageId":"582","endLine":8,"endColumn":17},{"ruleId":"579","severity":1,"message":"644","line":9,"column":3,"nodeType":"581","messageId":"582","endLine":9,"endColumn":16},{"ruleId":"630","severity":1,"message":"631","line":14,"column":21,"nodeType":"632","messageId":"589","endLine":14,"endColumn":23},{"ruleId":"579","severity":1,"message":"651","line":29,"column":9,"nodeType":"581","messageId":"582","endLine":29,"endColumn":34},{"ruleId":"579","severity":1,"message":"621","line":87,"column":10,"nodeType":"581","messageId":"582","endLine":87,"endColumn":20},{"ruleId":"579","severity":1,"message":"619","line":88,"column":10,"nodeType":"581","messageId":"582","endLine":88,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":88,"column":23,"nodeType":"581","messageId":"582","endLine":88,"endColumn":37},{"ruleId":"579","severity":1,"message":"596","line":4,"column":17,"nodeType":"581","messageId":"582","endLine":4,"endColumn":26},{"ruleId":"579","severity":1,"message":"597","line":4,"column":28,"nodeType":"581","messageId":"582","endLine":4,"endColumn":36},{"ruleId":"579","severity":1,"message":"585","line":52,"column":9,"nodeType":"581","messageId":"582","endLine":52,"endColumn":16},{"ruleId":"579","severity":1,"message":"649","line":8,"column":3,"nodeType":"581","messageId":"582","endLine":8,"endColumn":18},{"ruleId":"579","severity":1,"message":"656","line":10,"column":3,"nodeType":"581","messageId":"582","endLine":10,"endColumn":17},{"ruleId":"579","severity":1,"message":"644","line":11,"column":3,"nodeType":"581","messageId":"582","endLine":11,"endColumn":16},{"ruleId":"630","severity":1,"message":"631","line":16,"column":21,"nodeType":"632","messageId":"589","endLine":16,"endColumn":23},{"ruleId":"579","severity":1,"message":"651","line":25,"column":9,"nodeType":"581","messageId":"582","endLine":25,"endColumn":34},{"ruleId":"579","severity":1,"message":"621","line":103,"column":10,"nodeType":"581","messageId":"582","endLine":103,"endColumn":20},{"ruleId":"579","severity":1,"message":"619","line":104,"column":10,"nodeType":"581","messageId":"582","endLine":104,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":104,"column":23,"nodeType":"581","messageId":"582","endLine":104,"endColumn":37},{"ruleId":"579","severity":1,"message":"596","line":4,"column":17,"nodeType":"581","messageId":"582","endLine":4,"endColumn":26},{"ruleId":"579","severity":1,"message":"597","line":4,"column":28,"nodeType":"581","messageId":"582","endLine":4,"endColumn":36},{"ruleId":"579","severity":1,"message":"649","line":4,"column":3,"nodeType":"581","messageId":"582","endLine":4,"endColumn":18},{"ruleId":"579","severity":1,"message":"656","line":6,"column":3,"nodeType":"581","messageId":"582","endLine":6,"endColumn":17},{"ruleId":"579","severity":1,"message":"644","line":7,"column":3,"nodeType":"581","messageId":"582","endLine":7,"endColumn":16},{"ruleId":"630","severity":1,"message":"631","line":12,"column":21,"nodeType":"632","messageId":"589","endLine":12,"endColumn":23},{"ruleId":"579","severity":1,"message":"651","line":21,"column":9,"nodeType":"581","messageId":"582","endLine":21,"endColumn":34},{"ruleId":"579","severity":1,"message":"621","line":60,"column":10,"nodeType":"581","messageId":"582","endLine":60,"endColumn":20},{"ruleId":"579","severity":1,"message":"619","line":61,"column":10,"nodeType":"581","messageId":"582","endLine":61,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":61,"column":23,"nodeType":"581","messageId":"582","endLine":61,"endColumn":37},{"ruleId":"579","severity":1,"message":"596","line":2,"column":17,"nodeType":"581","messageId":"582","endLine":2,"endColumn":26},{"ruleId":"579","severity":1,"message":"597","line":2,"column":28,"nodeType":"581","messageId":"582","endLine":2,"endColumn":36},{"ruleId":"579","severity":1,"message":"649","line":4,"column":3,"nodeType":"581","messageId":"582","endLine":4,"endColumn":18},{"ruleId":"579","severity":1,"message":"656","line":6,"column":3,"nodeType":"581","messageId":"582","endLine":6,"endColumn":17},{"ruleId":"579","severity":1,"message":"644","line":7,"column":3,"nodeType":"581","messageId":"582","endLine":7,"endColumn":16},{"ruleId":"630","severity":1,"message":"631","line":12,"column":21,"nodeType":"632","messageId":"589","endLine":12,"endColumn":23},{"ruleId":"579","severity":1,"message":"651","line":21,"column":9,"nodeType":"581","messageId":"582","endLine":21,"endColumn":34},{"ruleId":"579","severity":1,"message":"668","line":31,"column":9,"nodeType":"581","messageId":"582","endLine":31,"endColumn":34},{"ruleId":"579","severity":1,"message":"621","line":84,"column":10,"nodeType":"581","messageId":"582","endLine":84,"endColumn":20},{"ruleId":"579","severity":1,"message":"619","line":85,"column":10,"nodeType":"581","messageId":"582","endLine":85,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":85,"column":23,"nodeType":"581","messageId":"582","endLine":85,"endColumn":37},{"ruleId":"579","severity":1,"message":"596","line":4,"column":17,"nodeType":"581","messageId":"582","endLine":4,"endColumn":26},{"ruleId":"579","severity":1,"message":"597","line":4,"column":28,"nodeType":"581","messageId":"582","endLine":4,"endColumn":36},{"ruleId":"579","severity":1,"message":"624","line":3,"column":3,"nodeType":"581","messageId":"582","endLine":3,"endColumn":15},{"ruleId":"579","severity":1,"message":"615","line":5,"column":3,"nodeType":"581","messageId":"582","endLine":5,"endColumn":17},{"ruleId":"579","severity":1,"message":"650","line":8,"column":21,"nodeType":"581","messageId":"582","endLine":8,"endColumn":25},{"ruleId":"579","severity":1,"message":"617","line":11,"column":20,"nodeType":"581","messageId":"582","endLine":11,"endColumn":31},{"ruleId":"579","severity":1,"message":"618","line":72,"column":23,"nodeType":"581","messageId":"582","endLine":72,"endColumn":37},{"ruleId":"579","severity":1,"message":"619","line":83,"column":10,"nodeType":"581","messageId":"582","endLine":83,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":83,"column":23,"nodeType":"581","messageId":"582","endLine":83,"endColumn":37},{"ruleId":"579","severity":1,"message":"621","line":84,"column":10,"nodeType":"581","messageId":"582","endLine":84,"endColumn":20},{"ruleId":"579","severity":1,"message":"622","line":84,"column":22,"nodeType":"581","messageId":"582","endLine":84,"endColumn":35},{"ruleId":"630","severity":1,"message":"631","line":8,"column":26,"nodeType":"632","messageId":"589","endLine":8,"endColumn":28},{"ruleId":"579","severity":1,"message":"661","line":11,"column":10,"nodeType":"581","messageId":"582","endLine":11,"endColumn":23},{"ruleId":"579","severity":1,"message":"619","line":14,"column":10,"nodeType":"581","messageId":"582","endLine":14,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":14,"column":23,"nodeType":"581","messageId":"582","endLine":14,"endColumn":37},{"ruleId":"579","severity":1,"message":"621","line":15,"column":10,"nodeType":"581","messageId":"582","endLine":15,"endColumn":20},{"ruleId":"579","severity":1,"message":"622","line":15,"column":22,"nodeType":"581","messageId":"582","endLine":15,"endColumn":35},{"ruleId":"591","severity":1,"message":"639","line":26,"column":27,"nodeType":"593","endLine":26,"endColumn":29,"suggestions":"669"},{"ruleId":"579","severity":1,"message":"580","line":9,"column":8,"nodeType":"581","messageId":"582","endLine":9,"endColumn":18},{"ruleId":"579","severity":1,"message":"621","line":23,"column":10,"nodeType":"581","messageId":"582","endLine":23,"endColumn":20},{"ruleId":"579","severity":1,"message":"619","line":24,"column":10,"nodeType":"581","messageId":"582","endLine":24,"endColumn":21},{"ruleId":"579","severity":1,"message":"620","line":24,"column":23,"nodeType":"581","messageId":"582","endLine":24,"endColumn":37},{"ruleId":"579","severity":1,"message":"590","line":66,"column":15,"nodeType":"581","messageId":"582","endLine":66,"endColumn":23},"no-native-reassign",["670"],"no-negated-in-lhs",["671"],"no-unused-vars","'ErrorAlert' is defined but never used.","Identifier","unusedVar","'reservationsError' is assigned a value but never used.","'tablesError' is assigned a value but never used.","'history' is assigned a value but never used.","no-extend-native","Date prototype is read only, properties should not be added.","AssignmentExpression","unexpected","'response' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadPeople'. Either include it or remove the dependency array.","ArrayExpression",["672"],"'handleCancel' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.",["670"],["671"],"'Redirect' is defined but never used.","'useLocation' is defined but never used.","'today' is defined but never used.","react/jsx-pascal-case","Imported JSX component View_Edit_Status must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component View_Edit_Participant must be in PascalCase or SCREAMING_SNAKE_CASE","'createReservation' is defined but never used.","'handleFirstNameChange' is assigned a value but never used.","'handleLastNameChange' is assigned a value but never used.","'handleMobileNumberChange' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.",["670"],["671"],"'updateInstance' is defined but never used.","'useHistory' is defined but never used.","'setStatuses' is assigned a value but never used.","'setStatusField' is assigned a value but never used.","'visibility3' is assigned a value but never used.","'setVisibility3' is assigned a value but never used.","'errMessage' is assigned a value but never used.","'setErrMessage' is assigned a value but never used.","'instancesError' is assigned a value but never used.","'createStatus' is defined but never used.","'handleParicipantIdChange' is assigned a value but never used.","'statusName' is assigned a value but never used.","'handleStatusNameChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dischargeDate', 'instanceId', 'startDate', and 'updatedProgramUtilization'. Either include them or remove the dependency array.",["673"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'instancesFiltered' is assigned a value but never used.","'setInstancesFiltered' is assigned a value but never used.","'readInstance' is defined but never used.","'listStatuses' is defined but never used.","'startDate' is assigned a value but never used.","'setStartDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'participant_id'. Either include it or remove the dependency array.",["674"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'listInstances' is defined but never used.","'useParams' is defined but never used.","'participantsError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'last_name'. Either include it or remove the dependency array.",["675"],"'readParticipant' is defined but never used.","'Link' is defined but never used.","'handleParticipantIdChange' is assigned a value but never used.","'setDay' is assigned a value but never used.","'setMonth' is assigned a value but never used.","'setYear' is assigned a value but never used.",["676"],"'createInstance' is defined but never used.","'SearchResults' is defined but never used.","'visibilityStatus' is assigned a value but never used.","'setVisibilityStatus' is assigned a value but never used.","'instance' is assigned a value but never used.","'statusesError' is assigned a value but never used.","'status' is assigned a value but never used.","'setStatus' is assigned a value but never used.","'handleInstanceChange' is assigned a value but never used.","'setInstances' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'instance_id'. Either include it or remove the dependency array.",["677"],"'handleDischargeDateChange' is assigned a value but never used.",["678"],"no-global-assign","no-unsafe-negation",{"desc":"679","fix":"680"},{"desc":"681","fix":"682"},{"desc":"683","fix":"684"},{"desc":"685","fix":"686"},{"desc":"687","fix":"688"},{"desc":"689","fix":"690"},{"desc":"683","fix":"691"},"Update the dependencies array to be: [date, loadPeople]",{"range":"692","text":"693"},"Update the dependencies array to be: [dischargeDate, instanceId, startDate, updatedProgramUtilization]",{"range":"694","text":"695"},"Update the dependencies array to be: [participant_id]",{"range":"696","text":"697"},"Update the dependencies array to be: [last_name]",{"range":"698","text":"699"},"Update the dependencies array to be: [day, month, participant_id, year]",{"range":"700","text":"701"},"Update the dependencies array to be: [date, instance_id]",{"range":"702","text":"703"},{"range":"704","text":"697"},[2073,2079],"[date, loadPeople]",[3627,3629],"[dischargeDate, instanceId, startDate, updatedProgramUtilization]",[1587,1589],"[participant_id]",[1774,1776],"[last_name]",[1164,1182],"[day, month, participant_id, year]",[1572,1578],"[date, instance_id]",[1120,1122]]